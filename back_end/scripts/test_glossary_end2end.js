/**
 * Script test end-to-end t·∫°o v√† l∆∞u th∆∞ vi·ªán t·ª´ m·ªõi (glossary)
 * - G·ªçi d·ªãch t·ª´ translateService.js
 * - Log chi ti·∫øt qu√° tr√¨nh d·ªãch, k·∫øt qu·∫£, ph·∫ßn glossary
 * - L·∫•y v√† log l·∫°i glossary ƒë√£ l∆∞u t·ª´ glossaryService.js
 */

const { translateText } = require('../services/translateService');
const { getGlossaryByStoryId } = require('../services/glossaryService');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Thay ƒë·ªïi key v√† model n·∫øu c·∫ßn
const TEST_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyCsvSybJ7Wxw118MP-tYBl1N3JM2nZ5hsQ';
const TEST_MODEL = 'gemini-2.0-flash';

// T·∫°o storyId test ri√™ng bi·ªát ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng d·ªØ li·ªáu th·∫≠t
const TEST_STORY_ID = '665f1e2a2a2a2a2a2a2a2a2a'; // 24 k√Ω t·ª± hex h·ª£p l·ªá

// ƒêo·∫°n text m·∫´u c√≥ nhi·ªÅu t√™n ri√™ng, ƒëa ng√¥n ng·ªØ
const testText = `
Âº†‰ºü l√† m·ªôt nh√¢n v·∫≠t n·ªïi ti·∫øng ·ªü MÈÉΩ. Anh ta t·ª´ng h·ªçc t·∫°i H·ªçc vi·ªán Onmyou c√πng v·ªõi Haikura Shinku v√† John Smith. Sau n√†y, Âº†‰ºü s√°ng l·∫≠p t·ªï ch·ª©c Black Lotus v√† ph√°t tri·ªÉn chi√™u th·ª©c "Heavenly Dragon Fist". Trong tr·∫≠n chi·∫øn ·ªü Tokyo, Haikura Shinku ƒë√£ s·ª≠ d·ª•ng tuy·ªát k·ªπ "Kage Bunshin no Jutsu". Ngo√†i ra c√≤n c√≥ nh√¢n v·∫≠t ph·ª• l√† Lee Min Ho v√† t·ªï ch·ª©c White Tiger.\n\nT·∫•t c·∫£ c√°c t√™n ri√™ng tr√™n ƒë·ªÅu c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng quy t·∫Øc!\n\n`;

async function main() {
  console.log('--- B·∫ÆT ƒê·∫¶U TEST D·ªäCH & GLOSSARY ---');
  // X√≥a glossary c≈© n·∫øu c√≥ (cho storyId test)
  await prisma.glossaryItem.deleteMany({ where: { storyId: TEST_STORY_ID } });

  // G·ªçi d·ªãch
  console.log('G·ªçi translateText...');
  const result = await translateText(
    testText,
    { key: TEST_API_KEY, usageId: null, isUserKey: true },
    TEST_MODEL,
    'content',
    TEST_STORY_ID
  );

  console.log('\n--- K·∫æT QU·∫¢ D·ªäCH ---');
  if (result.hasError) {
    console.error('‚ùå L·ªói d·ªãch:', result.error);
    console.error('Chi ti·∫øt:', result.errorDetails);
    return;
  }
  console.log('B·∫£n d·ªãch:', result.translated);

  // Log ph·∫ßn glossary (n·∫øu c√≥)
  const glossaryMatch = result.translated.match(/üìö TH∆Ø VI·ªÜN T·ª™ M·ªöI:\n([\s\S]*?)(?=\n---|$)/);
  if (glossaryMatch) {
    console.log('\n--- TH∆Ø VI·ªÜN T·ª™ M·ªöI TR√çCH XU·∫§T ---');
    console.log(glossaryMatch[1].trim());
  } else {
    console.log('\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph·∫ßn "TH∆Ø VI·ªÜN T·ª™ M·ªöI" trong b·∫£n d·ªãch!');
  }

  // L·∫•y l·∫°i glossary ƒë√£ l∆∞u t·ª´ DB
  const glossaryItems = await getGlossaryByStoryId(TEST_STORY_ID);
  console.log('\n--- GLOSSARY ƒê√É L∆ØU TRONG DB ---');
  if (glossaryItems.length === 0) {
    console.log('Kh√¥ng c√≥ t·ª´ m·ªõi n√†o ƒë∆∞·ª£c l∆∞u!');
  } else {
    glossaryItems.forEach((item, idx) => {
      console.log(`${idx + 1}. ${item.original} = ${item.translated} [${item.type}] [${item.lang}]`);
    });
  }

  console.log('--- K·∫æT TH√öC TEST ---');
  await prisma.$disconnect();
}

if (require.main === module) {
  main().catch(err => {
    console.error('‚ùå L·ªói khi ch·∫°y test:', err);
    prisma.$disconnect();
  });
} 