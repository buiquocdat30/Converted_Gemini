
const axios = require('axios');

const BASE_URL = 'http://localhost:8000';

// ƒê·∫∑t Story ID v√† User ID h·ª£p l·ªá c·ªßa b·∫°n t·∫°i ƒë√¢y
// B·∫°n c·∫ßn c√≥ √≠t nh·∫•t m·ªôt truy·ªán v·ªõi m·ªôt v√†i ch∆∞∆°ng ƒë·ªÉ test
const TEST_STORY_ID = '689ff75961c296e4c822ad1d'; // Thay b·∫±ng m·ªôt storyId c√≥ th·∫≠t
const TEST_USER_ID = '6681826bfe8339b73ad579f56';   // Thay b·∫±ng m·ªôt userId c√≥ th·∫≠t
const TEST_AUTH_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODE4MjZiZmU4MzM5YjczYWQ1NzlmNTYiLCJ1c2VybmFtZSI6IlRvbnkiLCJpYXQiOjE3NTE0MjE1OTl9.JvCFfE8MV3CuVS6veIufM1Rr8WugBo6OozSIy8iQ9Uo'; // Thay b·∫±ng token x√°c th·ª±c h·ª£p l·ªá

const testChapterLoading = async () => {
    if (TEST_AUTH_TOKEN === 'YOUR_AUTH_TOKEN_HERE') {
        console.error('‚ùå L·ªói: Vui l√≤ng thay TEST_AUTH_TOKEN b·∫±ng token x√°c th·ª±c h·ª£p l·ªá c·ªßa b·∫°n.');
        console.error('B·∫°n c√≥ th·ªÉ l·∫•y token sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng v√†o ·ª©ng d·ª•ng.');
        return;
    }

    console.log('==================================================');
    console.log('üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ t·∫£i ch∆∞∆°ng truy·ªán v·ªõi Redis caching');
    console.log('==================================================');

    const headers = {
        Authorization: `Bearer ${TEST_AUTH_TOKEN}`,
    };

    const params = {
        page: 1,
        limit: 5,
    };

    // Test l·∫ßn 1: Mong ƒë·ª£i Cache MISS
    console.log('\n--- L·∫ßn 1: G·ªçi API ƒë·ªÉ t·∫£i ch∆∞∆°ng (mong ƒë·ª£i Cache MISS) ---');
    try {
        const startTime = Date.now();
        const response1 = await axios.get(
            `${BASE_URL}/user/library/${TEST_STORY_ID}/chapters`,
            { headers, params }
        );
        const endTime = Date.now();
        console.log(`‚úÖ L·∫ßn 1 th√†nh c√¥ng! T·∫£i ${response1.data.length} ch∆∞∆°ng trong ${endTime - startTime}ms.`);
        // console.log('D·ªØ li·ªáu ch∆∞∆°ng l·∫ßn 1:', response1.data.map(ch => ch.chapterNumber));
        console.log('Vui l√≤ng ki·ªÉm tra log backend ƒë·ªÉ th·∫•y [REDIS] Cache MISS.');
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i ch∆∞∆°ng l·∫ßn 1:', error.response?.data || error.message);
        return;
    }

    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o cache k·ªãp l∆∞u
    console.log('ƒêang ch·ªù 2 gi√¢y tr∆∞·ªõc khi g·ªçi l·∫°i...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Test l·∫ßn 2: Mong ƒë·ª£i Cache HIT
    console.log('\n--- L·∫ßn 2: G·ªçi API ƒë·ªÉ t·∫£i ch∆∞∆°ng (mong ƒë·ª£i Cache HIT) ---');
    try {
        const startTime = Date.now();
        const response2 = await axios.get(
            `${BASE_URL}/user/library/${TEST_STORY_ID}/chapters`,
            { headers, params }
        );
        const endTime = Date.now();
        console.log(`‚úÖ L·∫ßn 2 th√†nh c√¥ng! T·∫£i ${response2.data.length} ch∆∞∆°ng trong ${endTime - startTime}ms.`);
        // console.log('D·ªØ li·ªáu ch∆∞∆°ng l·∫ßn 2:', response2.data.map(ch => ch.chapterNumber));
        console.log('Vui l√≤ng ki·ªÉm tra log backend ƒë·ªÉ th·∫•y [REDIS] Cache HIT.');
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i ch∆∞∆°ng l·∫ßn 2:', error.response?.data || error.message);
        return;
    }

    console.log('\n==================================================');
    console.log('‚úÖ Ki·ªÉm th·ª≠ ho√†n t·∫•t. H√£y ki·ªÉm tra console log c·ªßa backend ƒë·ªÉ x√°c nh·∫≠n Cache HIT/MISS.');
    console.log('==================================================');
};

testChapterLoading();
