require("dotenv").config();
const { translateText } = require("../services/translateService");
const ApiKeyManager = require("../services/apiKeyManagers");

async function testGlossarySimple() {
  console.log("üöÄ Test logic th∆∞ vi·ªán t·ª´ m·ªõi...");
  
  // Kh·ªüi t·∫°o key manager
  const keyManager = new ApiKeyManager();
  
  // L·∫•y key ƒë·ªÉ s·ª≠ d·ª•ng
  const keyData = await keyManager.getKeyToUse(null, [], "gemini-2.0-flash");
  
  if (!keyData || !keyData.key) {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y key kh·∫£ d·ª•ng!");
    return;
  }
  
  console.log(`üîë S·ª≠ d·ª•ng key: ${keyData.key.substring(0, 8)}...`);
  
  // Test v·ªõi n·ªôi dung c√≥ t√™n ri√™ng
  const testContent = `Âú®‰∏Ä‰∏™Âπ≥Âá°ÁöÑÊó•Â≠êÈáåÔºåÊùéÊòéÊ≠£Âú®Âõæ‰π¶È¶ÜÈáåÁúã‰π¶„ÄÇÁ™ÅÁÑ∂Ôºå‰ªñÁöÑÊâãÊú∫ÈúáÂä®‰∫Ü‰∏Ä‰∏ã„ÄÇ

"ËøôÊòØ‰ªÄ‰πàÔºü"ÊùéÊòéÁñëÊÉëÂú∞ÁúãÁùÄÊâãÊú∫Â±èÂπï‰∏äÁöÑÂ•áÊÄ™Â∫îÁî®„ÄÇ

Â∫îÁî®ÁöÑÂêçÂ≠óÂè´ÂÅö"ÂëΩËøêËΩ¨Êç¢Âô®"ÔºåÂõæÊ†áÊòØ‰∏Ä‰∏™Á•ûÁßòÁöÑÊº©Ê∂°„ÄÇ

"ÁúãËµ∑Êù•ÂæàÊúâË∂£ÁöÑÊ†∑Â≠ê„ÄÇ"ÊùéÊòéÁÇπÂáª‰∫ÜÂÆâË£ÖÊåâÈíÆ„ÄÇ

ÂÆâË£ÖÂÆåÊàêÂêéÔºåÂ∫îÁî®Ëá™Âä®ÊâìÂºÄ‰∫Ü„ÄÇÂ±èÂπï‰∏äÂá∫Áé∞‰∫Ü‰∏ÄË°åÂ≠óÔºö

"Ê¨¢ËøéÊù•Âà∞ÂëΩËøêËΩ¨Êç¢Âô®ÔºåÊ£ÄÊµãÂà∞ÊÇ®ÊúâÊàê‰∏∫Âº∫ËÄÖÁöÑÊΩúË¥®„ÄÇ"

ÊùéÊòéÁû™Â§ß‰∫ÜÁúºÁùõÔºö"ËøôÊòØ‰ªÄ‰πàÊÑèÊÄùÔºü"

"ËØ∑ÈÄâÊã©ÊÇ®ÁöÑÂàùÂßãËÅå‰∏öÔºö"
"1. Ê≠¶ËÄÖ"
"2. Ê≥ïÂ∏à" 
"3. Âè¨Âî§Â∏à"

ÊùéÊòéÊÄùËÄÉ‰∫Ü‰∏Ä‰∏ãÔºåÈÄâÊã©‰∫ÜÊ≠¶ËÄÖ„ÄÇ

"ÊÅ≠ÂñúÔºÅÊÇ®Â∑≤Êàê‰∏∫Ê≠¶ËÄÖÔºåËé∑ÂæóÂü∫Á°ÄÊäÄËÉΩÔºöÈìÅÊã≥„ÄÇ"

ÊùéÊòéÊÑüËßâË∫´‰ΩìÈáåÊ∂åËµ∑‰∏ÄËÇ°ÊöñÊµÅÔºå‰ªø‰ΩõÊúâ‰ªÄ‰πà‰∏úË•øËßâÈÜí‰∫Ü„ÄÇ

"Ëøô...ËøôÊòØÁúüÁöÑÂêóÔºü"ÊùéÊòéÊè°‰∫ÜÊè°Êã≥Â§¥ÔºåÊÑüËßâÂäõÈáèÁ°ÆÂÆûÂ¢ûÂº∫‰∫Ü„ÄÇ

Â∞±Âú®ËøôÊó∂ÔºåÂõæ‰π¶È¶ÜÁöÑÈó®Ë¢´Êé®ÂºÄ‰∫Ü„ÄÇ‰∏Ä‰∏™Á©øÁùÄÈªëËâ≤Ë°£ÊúçÁöÑ‰∫∫Ëµ∞‰∫ÜËøõÊù•Ôºå‰ªñÁöÑÁúºÁ•ûÈò¥ÂÜ∑ÔºåË∫´‰∏äÊï£ÂèëÁùÄÂç±Èô©ÁöÑÊ∞îÊÅØ„ÄÇ

"Áªà‰∫éÊâæÂà∞‰∫Ü„ÄÇ"ÈªëË°£‰∫∫ÁõØÁùÄÊùéÊòéËØ¥ÈÅì„ÄÇ

ÊùéÊòéÂøÉ‰∏≠‰∏ÄÁ¥ßÔºö"‰Ω†ÊòØË∞ÅÔºü"

"ÊàëÊòØÊù•Âèñ‰Ω†ÊÄßÂëΩÁöÑ‰∫∫„ÄÇ"ÈªëË°£‰∫∫ËØ¥ÁùÄÔºåÊâã‰∏≠Âá∫Áé∞‰∫Ü‰∏ÄÊääÈªëËâ≤ÁöÑÂåïÈ¶ñ„ÄÇ

ÊùéÊòéÁü•ÈÅìÔºå‰ªñÁöÑÂëΩËøê‰ªéÊ≠§ÊîπÂèò‰∫Ü„ÄÇ`;
  
  try {
    console.log("üìù D·ªãch n·ªôi dung v·ªõi storyId ƒë·ªÉ ki·ªÉm tra glossary...");
    const result = await translateText(
      testContent, 
      keyData, 
      "gemini-2.0-flash", 
      "content",
      "test-story-123" // C√≥ storyId ƒë·ªÉ k√≠ch ho·∫°t logic glossary
    );
    
    console.log("üìã K·∫øt qu·∫£ d·ªãch:");
    console.log(`  C√≥ translated: ${!!result.translated}`);
    console.log(`  ƒê·ªô d√†i: ${result.translated?.length || 0}`);
    console.log(`  C√≥ l·ªói: ${!!result.error}`);
    
    if (result.translated) {
      // T√¨m ph·∫ßn glossary trong response
      const glossaryMatch = result.translated.match(/üìö TH∆Ø VI·ªÜN T·ª™ M·ªöI:\n([\s\S]*?)(?=\n---|$)/);
      
      if (glossaryMatch) {
        const glossaryText = glossaryMatch[1].trim();
        console.log("‚úÖ T√¨m th·∫•y ph·∫ßn 'üìö TH∆Ø VI·ªÜN T·ª™ M·ªöI:'");
        console.log("üìö N·ªôi dung glossary:");
        console.log(glossaryText);
        
        if (glossaryText === "Kh√¥ng c√≥ t·ª´ m·ªõi") {
          console.log("‚ÑπÔ∏è Kh√¥ng c√≥ t·ª´ m·ªõi trong n·ªôi dung n√†y");
        } else {
          const words = glossaryText.split('\n').filter(line => line.trim() && line.includes('='));
          console.log(`üìä S·ªë t·ª´ m·ªõi: ${words.length}`);
          words.forEach(word => console.log(`  - ${word.trim()}`));
        }
      } else {
        console.log("‚ùå KH√îNG T√åM TH·∫§Y ph·∫ßn 'üìö TH∆Ø VI·ªÜN T·ª™ M·ªöI:' trong response");
        console.log("üìÑ Response preview:");
        console.log(result.translated.substring(0, 500) + "...");
      }
    }
    
  } catch (error) {
    console.error("‚ùå L·ªói test:", error.message);
  }
}

// Ch·∫°y test
if (require.main === module) {
  testGlossarySimple()
    .then(() => {
      console.log("\nüèÅ Test ho√†n th√†nh!");
      process.exit(0);
    })
    .catch(error => {
      console.error("‚ùå L·ªói:", error);
      process.exit(1);
    });
}

module.exports = { testGlossarySimple }; 