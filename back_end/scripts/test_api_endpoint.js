require("dotenv").config();
const axios = require("axios");

// C·∫•u h√¨nh API
const API_BASE_URL = "http://localhost:3001"; // Thay ƒë·ªïi port n·∫øu c·∫ßn
const API_ENDPOINT = "/api/translate";

// D·ªØ li·ªáu test 3 ch∆∞∆°ng
const testChapters = [
  {
    chapterNumber: 1,
    title: "Á¨¨‰∏ÄÁ´† ËßâÈÜí",
    content: `Âú®‰∏Ä‰∏™Âπ≥Âá°ÁöÑÊó•Â≠êÈáåÔºåÊùéÊòéÊ≠£Âú®Âõæ‰π¶È¶ÜÈáåÁúã‰π¶„ÄÇÁ™ÅÁÑ∂Ôºå‰ªñÁöÑÊâãÊú∫ÈúáÂä®‰∫Ü‰∏Ä‰∏ã„ÄÇ

"ËøôÊòØ‰ªÄ‰πàÔºü"ÊùéÊòéÁñëÊÉëÂú∞ÁúãÁùÄÊâãÊú∫Â±èÂπï‰∏äÁöÑÂ•áÊÄ™Â∫îÁî®„ÄÇ

Â∫îÁî®ÁöÑÂêçÂ≠óÂè´ÂÅö"ÂëΩËøêËΩ¨Êç¢Âô®"ÔºåÂõæÊ†áÊòØ‰∏Ä‰∏™Á•ûÁßòÁöÑÊº©Ê∂°„ÄÇ

"ÁúãËµ∑Êù•ÂæàÊúâË∂£ÁöÑÊ†∑Â≠ê„ÄÇ"ÊùéÊòéÁÇπÂáª‰∫ÜÂÆâË£ÖÊåâÈíÆ„ÄÇ

ÂÆâË£ÖÂÆåÊàêÂêéÔºåÂ∫îÁî®Ëá™Âä®ÊâìÂºÄ‰∫Ü„ÄÇÂ±èÂπï‰∏äÂá∫Áé∞‰∫Ü‰∏ÄË°åÂ≠óÔºö

"Ê¨¢ËøéÊù•Âà∞ÂëΩËøêËΩ¨Êç¢Âô®ÔºåÊ£ÄÊµãÂà∞ÊÇ®ÊúâÊàê‰∏∫Âº∫ËÄÖÁöÑÊΩúË¥®„ÄÇ"

ÊùéÊòéÁû™Â§ß‰∫ÜÁúºÁùõÔºö"ËøôÊòØ‰ªÄ‰πàÊÑèÊÄùÔºü"

"ËØ∑ÈÄâÊã©ÊÇ®ÁöÑÂàùÂßãËÅå‰∏öÔºö"
"1. Ê≠¶ËÄÖ"
"2. Ê≥ïÂ∏à" 
"3. Âè¨Âî§Â∏à"

ÊùéÊòéÊÄùËÄÉ‰∫Ü‰∏Ä‰∏ãÔºåÈÄâÊã©‰∫ÜÊ≠¶ËÄÖ„ÄÇ

"ÊÅ≠ÂñúÔºÅÊÇ®Â∑≤Êàê‰∏∫Ê≠¶ËÄÖÔºåËé∑ÂæóÂü∫Á°ÄÊäÄËÉΩÔºöÈìÅÊã≥„ÄÇ"

ÊùéÊòéÊÑüËßâË∫´‰ΩìÈáåÊ∂åËµ∑‰∏ÄËÇ°ÊöñÊµÅÔºå‰ªø‰ΩõÊúâ‰ªÄ‰πà‰∏úË•øËßâÈÜí‰∫Ü„ÄÇ

"Ëøô...ËøôÊòØÁúüÁöÑÂêóÔºü"ÊùéÊòéÊè°‰∫ÜÊè°Êã≥Â§¥ÔºåÊÑüËßâÂäõÈáèÁ°ÆÂÆûÂ¢ûÂº∫‰∫Ü„ÄÇ

Â∞±Âú®ËøôÊó∂ÔºåÂõæ‰π¶È¶ÜÁöÑÈó®Ë¢´Êé®ÂºÄ‰∫Ü„ÄÇ‰∏Ä‰∏™Á©øÁùÄÈªëËâ≤Ë°£ÊúçÁöÑ‰∫∫Ëµ∞‰∫ÜËøõÊù•Ôºå‰ªñÁöÑÁúºÁ•ûÈò¥ÂÜ∑ÔºåË∫´‰∏äÊï£ÂèëÁùÄÂç±Èô©ÁöÑÊ∞îÊÅØ„ÄÇ

"Áªà‰∫éÊâæÂà∞‰∫Ü„ÄÇ"ÈªëË°£‰∫∫ÁõØÁùÄÊùéÊòéËØ¥ÈÅì„ÄÇ

ÊùéÊòéÂøÉ‰∏≠‰∏ÄÁ¥ßÔºö"‰Ω†ÊòØË∞ÅÔºü"

"ÊàëÊòØÊù•Âèñ‰Ω†ÊÄßÂëΩÁöÑ‰∫∫„ÄÇ"ÈªëË°£‰∫∫ËØ¥ÁùÄÔºåÊâã‰∏≠Âá∫Áé∞‰∫Ü‰∏ÄÊääÈªëËâ≤ÁöÑÂåïÈ¶ñ„ÄÇ

ÊùéÊòéÁü•ÈÅìÔºå‰ªñÁöÑÂëΩËøê‰ªéÊ≠§ÊîπÂèò‰∫Ü„ÄÇ`
  },
  {
    chapterNumber: 2,
    title: "Á¨¨‰∫åÁ´† ÊàòÊñó",
    content: `ÈªëË°£‰∫∫Áû¨Èó¥ÂÜ≤ÂêëÊùéÊòéÔºåÂåïÈ¶ñÈó™ÁÉÅÁùÄÂØíÂÖâ„ÄÇ

ÊùéÊòéÊú¨ËÉΩÂú∞‰∏æËµ∑ÂèåÊâãÔºåÊÉ≥Ë¶ÅÊå°‰ΩèÊîªÂáª„ÄÇÂ∞±Âú®ËøôÊó∂Ôºå‰ªñÁöÑËÑëÊµ∑‰∏≠Á™ÅÁÑ∂ÂìçËµ∑‰∫Ü‰∏Ä‰∏™Â£∞Èü≥Ôºö

"Ê£ÄÊµãÂà∞Âç±Èô©ÔºåËá™Âä®ÊøÄÊ¥ªÊäÄËÉΩÔºöÈìÅÊã≥ÔºÅ"

ÊùéÊòéÁöÑÊã≥Â§¥Áû¨Èó¥ÂèòÂæóÂùöÁ°¨Â¶ÇÈìÅÔºå‰ªñ‰∏ãÊÑèËØÜÂú∞‰∏ÄÊã≥ËΩ∞Âá∫„ÄÇ

"Á†∞ÔºÅ"

Êã≥Â§¥‰∏éÂåïÈ¶ñÁõ∏ÊíûÔºåÂèëÂá∫ÈáëÂ±ûÁ¢∞ÊíûÁöÑÂ£∞Èü≥„ÄÇÈªëË°£‰∫∫Ë¢´ÈúáÈÄÄ‰∫ÜÂá†Ê≠•ÔºåÁúº‰∏≠Èó™Ëøá‰∏Ä‰∏ùÊÉäËÆ∂„ÄÇ

"ÊÄé‰πàÂèØËÉΩÔºü‰Ω†ÊòéÊòéÂè™ÊòØ‰∏Ä‰∏™ÊôÆÈÄö‰∫∫ÔºÅ"ÈªëË°£‰∫∫Èöæ‰ª•ÁΩÆ‰ø°Âú∞ËØ¥ÈÅì„ÄÇ

ÊùéÊòé‰πüÊÑüÂà∞ÈúáÊÉäÔºå‰ªñÁúãÁùÄËá™Â∑±ÁöÑÊã≥Â§¥Ôºå‰∏äÈù¢Ëøû‰∏ÄÁÇπ‰º§ÁóïÈÉΩÊ≤°Êúâ„ÄÇ

"ËøôÂ∞±ÊòØÊ≠¶ËÄÖÁöÑÂäõÈáèÂêóÔºü"ÊùéÊòéÂñÉÂñÉËá™ËØ≠„ÄÇ

ÈªëË°£‰∫∫ÂæàÂø´Ë∞ÉÊï¥‰∫ÜÁä∂ÊÄÅÔºåÂÜ∑Á¨ëÈÅìÔºö"ÊúâÁÇπÊÑèÊÄùÔºå‰∏çËøá‰Ω†‰ª•‰∏∫ËøôÊ†∑Â∞±ËÉΩÊâìË¥•ÊàëÂêóÔºü"

ËØ¥ÁùÄÔºå‰ªñÁöÑË∫´‰ΩìÂºÄÂßãÂèëÁîüÂèòÂåñÔºåÁöÆËÇ§ÂèòÂæóÊºÜÈªëÔºåÁúºÁùõÂèòÊàê‰∫ÜË°ÄÁ∫¢Ëâ≤„ÄÇ

"È≠îÂåñÔºÅ"ÈªëË°£‰∫∫‰ΩéÂêº‰∏ÄÂ£∞„ÄÇ

ÊùéÊòéÊÑüÂèóÂà∞‰∫Ü‰∏ÄËÇ°Âº∫Â§ßÁöÑÂéãËø´ÊÑüÔºå‰ªñÁü•ÈÅìÁúºÂâçÁöÑÊïå‰∫∫ÂèòÂæóÊõ¥Âä†Âº∫Â§ß‰∫Ü„ÄÇ

"Á≥ªÁªüÔºåÊàëËØ•ÊÄé‰πàÂäûÔºü"ÊùéÊòéÂú®ÂøÉ‰∏≠ÈóÆÈÅì„ÄÇ

"Ê£ÄÊµãÂà∞Êïå‰∫∫ÂÆûÂäõÊèêÂçáÔºåÂª∫ËÆÆ‰ΩøÁî®ÊäÄËÉΩÔºöÈìÅÊã≥ËøûÂáª„ÄÇ"

ÊùéÊòéÊ∑±Âê∏‰∏ÄÂè£Ê∞îÔºåÊëÜÂá∫‰∫ÜÊàòÊñóÂßøÂäø„ÄÇ‰ªñÁü•ÈÅìÔºåÁúüÊ≠£ÁöÑÊàòÊñóÊâçÂàöÂàöÂºÄÂßã„ÄÇ

"Êù•ÂêßÔºÅ"ÊùéÊòéÂ§ßÂñä‰∏ÄÂ£∞Ôºå‰∏ªÂä®ÂÜ≤ÂêëÈªëË°£‰∫∫„ÄÇ

‰∏§‰∫∫Âú®Âõæ‰π¶È¶ÜÈáåÂ±ïÂºÄ‰∫ÜÊøÄÁÉàÁöÑÊàòÊñóÔºå‰π¶Êû∂ÂÄíÂ°åÔºå‰π¶Á±çÊï£ËêΩ‰∏ÄÂú∞„ÄÇ`
  },
  {
    chapterNumber: 3,
    title: "Á¨¨‰∏âÁ´† ËÉúÂà©",
    content: `ÁªèËøá‰∏ÄÁï™ÊøÄÊàòÔºåÊùéÊòéÈÄêÊ∏êÊéåÊè°‰∫ÜÈìÅÊã≥ÁöÑ‰ΩøÁî®ÊñπÊ≥ï„ÄÇ

"ÈìÅÊã≥ËøûÂáªÔºÅ"ÊùéÊòéËøûÁª≠Êå•Âá∫Êï∞Êã≥ÔºåÊØè‰∏ÄÊã≥ÈÉΩÂ∏¶ÁùÄÂº∫Â§ßÁöÑÂäõÈáè„ÄÇ

ÈªëË°£‰∫∫ËôΩÁÑ∂È≠îÂåñ‰∫ÜÔºå‰ΩÜÂú®ÊùéÊòéÁöÑËøûÁª≠ÊîªÂáª‰∏ãÔºå‰πüÂºÄÂßãÊãõÊû∂‰∏ç‰Ωè„ÄÇ

"‰∏çÂèØËÉΩÔºÅ‰Ω†ÊÄé‰πàÂèØËÉΩËøô‰πàÂº∫ÔºÅ"ÈªëË°£‰∫∫ÊÑ§ÊÄíÂú∞ÂíÜÂìÆÁùÄ„ÄÇ

ÊùéÊòéÊ≤°ÊúâÂõûÁ≠îÔºå‰ªñ‰∏ìÊ≥®‰∫éÊàòÊñó„ÄÇÈÄöËøáÁ≥ªÁªüÁöÑÊèêÁ§∫Ôºå‰ªñÂ≠¶‰ºö‰∫ÜÂ¶Ç‰ΩïÊõ¥Â•ΩÂú∞ËøêÁî®Ëá™Â∑±ÁöÑÂäõÈáè„ÄÇ

"ÊúÄÂêé‰∏ÄÂáªÔºÅ"ÊùéÊòéËÅöÈõÜÂÖ®Ë∫´ÁöÑÂäõÈáèÔºå‰∏ÄÊã≥ËΩ∞ÂêëÈªëË°£‰∫∫ÁöÑËÉ∏Âè£„ÄÇ

"Á†∞ÔºÅ"

ÈªëË°£‰∫∫Ë¢´ÂáªÈ£ûÂá∫ÂéªÔºåÊíûÂú®Â¢ô‰∏äÔºåÁÑ∂ÂêéÊªëËêΩÂú®Âú∞„ÄÇ‰ªñÁöÑÈ≠îÂåñÁä∂ÊÄÅÂºÄÂßãÊ∂àÈÄÄÔºåÂèòÂõû‰∫ÜÂéüÊù•ÁöÑÊ†∑Â≠ê„ÄÇ

"‰Ω†...‰Ω†Ëµ¢‰∫Ü..."ÈªëË°£‰∫∫Ëâ∞ÈöæÂú∞ËØ¥ÈÅìÔºåÁÑ∂ÂêéÊòè‰∫ÜËøáÂéª„ÄÇ

ÊùéÊòéÊùæ‰∫Ü‰∏ÄÂè£Ê∞îÔºåÁúãÁùÄÂÄíÂú®Âú∞‰∏äÁöÑÈªëË°£‰∫∫ÔºåÂøÉ‰∏≠‰∫îÂë≥ÊùÇÈôà„ÄÇ

"ÊÅ≠ÂñúÂÆø‰∏ªÂáªË¥•Êïå‰∫∫ÔºåËé∑ÂæóÁªèÈ™åÂÄº100ÁÇπÔºåÁ≠âÁ∫ßÊèêÂçáÂà∞2Á∫ßÔºÅ"
"Ëé∑ÂæóÊñ∞ÊäÄËÉΩÔºöÈìÅÊã≥Âº∫ÂåñÔºÅ"

ÊùéÊòéÊÑüÂèóÂà∞Ë∫´‰ΩìÂÜçÊ¨°ÂèëÁîü‰∫ÜÂèòÂåñÔºåÂäõÈáèÂèàÂ¢ûÂº∫‰∫Ü‰∏ÄÂàÜ„ÄÇ

"ËøôÂ∞±ÊòØÂèòÂº∫ÁöÑÊÑüËßâÂêóÔºü"ÊùéÊòéÊè°‰∫ÜÊè°Êã≥Â§¥ÔºåÊÑüÂèóÁùÄ‰ΩìÂÜÖÊ∂åÂä®ÁöÑÂäõÈáè„ÄÇ

Â∞±Âú®ËøôÊó∂ÔºåÂõæ‰π¶È¶ÜÁöÑÈó®ÂÜçÊ¨°Ë¢´Êé®ÂºÄ‰∫Ü„ÄÇËøôÊ¨°Ëµ∞ËøõÊù•ÁöÑÊòØ‰∏Ä‰∏™Á©øÁùÄÁôΩËâ≤ÈïøË¢çÁöÑËÄÅËÄÖ„ÄÇ

"‰∏çÈîôÔºå‰∏çÈîô„ÄÇ"ËÄÅËÄÖÁúãÁùÄÊùéÊòéÔºåÊª°ÊÑèÂú∞ÁÇπ‰∫ÜÁÇπÂ§¥„ÄÇ

"‰Ω†ÊòØË∞ÅÔºü"ÊùéÊòéË≠¶ÊÉïÂú∞ÈóÆÈÅì„ÄÇ

"ÊàëÊòØÊ≠¶ËÄÖÂçè‰ºöÁöÑ‰ºöÈïøÔºå‰∏ìÈó®Ë¥üË¥£ÂØªÊâæÊúâÊΩúÂäõÁöÑÊñ∞‰∫∫„ÄÇ"ËÄÅËÄÖÁ¨ëÁùÄËØ¥ÈÅì„ÄÇ

"Ê≠¶ËÄÖÂçè‰ºöÔºü"ÊùéÊòéÁñëÊÉëÂú∞ÈóÆÈÅì„ÄÇ

"ÊòØÁöÑÔºå‰ªé‰ªäÂ§©ÂºÄÂßãÔºå‰Ω†Â∞±ÊòØÊàë‰ª¨Âçè‰ºöÁöÑ‰∏ÄÂëò‰∫Ü„ÄÇ"ËÄÅËÄÖËØ¥ÈÅì„ÄÇ

ÊùéÊòéÁü•ÈÅìÔºå‰ªñÁöÑÊñ∞ÁîüÊ¥ªÂç≥Â∞ÜÂºÄÂßã„ÄÇ`
  }
];

async function testApiEndpoint() {
  console.log("üöÄ B·∫Øt ƒë·∫ßu test API endpoint...");
  console.log(`üì° API URL: ${API_BASE_URL}${API_ENDPOINT}`);
  
  const requestData = {
    chapters: testChapters,
    model: "gemini-2.0-flash",
    storyId: "test-story-123"
  };
  
  console.log("üì§ G·ª≠i request v·ªõi d·ªØ li·ªáu:", {
    totalChapters: requestData.chapters.length,
    model: requestData.model,
    storyId: requestData.storyId
  });
  
  try {
    const startTime = Date.now();
    
    const response = await axios.post(
      `${API_BASE_URL}${API_ENDPOINT}`,
      requestData,
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 300000 // 5 ph√∫t timeout
      }
    );
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`‚úÖ Response nh·∫≠n ƒë∆∞·ª£c sau ${duration}s`);
    console.log("üìä Status:", response.status);
    
    const result = response.data;
    
    // Ph√¢n t√≠ch k·∫øt qu·∫£
    console.log("\nüìä K·∫æT QU·∫¢ T·ªîNG QUAN:");
    console.log("=".repeat(50));
    console.log(`T·ªïng s·ªë ch∆∞∆°ng: ${result.stats?.total || result.chapters?.length || 0}`);
    console.log(`Th√†nh c√¥ng: ${result.stats?.success || 0}`);
    console.log(`Th·∫•t b·∫°i: ${result.stats?.failed || 0}`);
    console.log(`C√≤n key kh·∫£ d·ª•ng: ${result.keyStatus?.hasAvailableKeys || 'N/A'}`);
    
    // Chi ti·∫øt t·ª´ng ch∆∞∆°ng
    console.log("\nüìã CHI TI·∫æT T·ª™NG CH∆Ø∆†NG:");
    console.log("=".repeat(50));
    
    if (result.chapters && Array.isArray(result.chapters)) {
      result.chapters.forEach((chapter, index) => {
        console.log(`\nüìñ Ch∆∞∆°ng ${chapter.chapterNumber}:`);
        console.log(`  Tr·∫°ng th√°i: ${chapter.status || 'N/A'}`);
        console.log(`  Th·ªùi gian d·ªãch: ${chapter.timeTranslation || 0}s`);
        
        // Ti√™u ƒë·ªÅ
        console.log(`  üî§ Ti√™u ƒë·ªÅ:`);
        console.log(`    G·ªëc: "${chapter.title}"`);
        console.log(`    D·ªãch: "${chapter.translatedTitle}"`);
        console.log(`    Thay ƒë·ªïi: ${chapter.title !== chapter.translatedTitle ? '‚úÖ' : '‚ùå'}`);
        
        // N·ªôi dung
        console.log(`  üìù N·ªôi dung:`);
        console.log(`    G·ªëc: ${chapter.content?.length || 0} k√Ω t·ª±`);
        console.log(`    D·ªãch: ${chapter.translatedContent?.length || 0} k√Ω t·ª±`);
        console.log(`    Thay ƒë·ªïi: ${chapter.content !== chapter.translatedContent ? '‚úÖ' : '‚ùå'}`);
        
        // L·ªói n·∫øu c√≥
        if (chapter.translationError) {
          console.log(`    ‚ùå L·ªói: ${chapter.translationError}`);
        }
        
        // Preview n·ªôi dung d·ªãch
        if (chapter.translatedContent) {
          console.log(`    Preview: ${chapter.translatedContent.substring(0, 100)}...`);
        }
      });
    }
    
    // Ph√¢n t√≠ch v·∫•n ƒë·ªÅ
    console.log("\nüîç PH√ÇN T√çCH V·∫§N ƒê·ªÄ:");
    console.log("=".repeat(50));
    
    if (result.chapters) {
      const titleIssues = result.chapters.filter(ch => ch.title === ch.translatedTitle);
      const contentIssues = result.chapters.filter(ch => ch.content === ch.translatedContent);
      const errorIssues = result.chapters.filter(ch => ch.translationError);
      
      if (titleIssues.length > 0) {
        console.log(`‚ùå ${titleIssues.length} ch∆∞∆°ng c√≥ v·∫•n ƒë·ªÅ v·ªõi ti√™u ƒë·ªÅ (kh√¥ng thay ƒë·ªïi):`);
        titleIssues.forEach(ch => console.log(`  - Ch∆∞∆°ng ${ch.chapterNumber}`));
      }
      
      if (contentIssues.length > 0) {
        console.log(`‚ùå ${contentIssues.length} ch∆∞∆°ng c√≥ v·∫•n ƒë·ªÅ v·ªõi n·ªôi dung (kh√¥ng thay ƒë·ªïi):`);
        contentIssues.forEach(ch => console.log(`  - Ch∆∞∆°ng ${ch.chapterNumber}`));
      }
      
      if (errorIssues.length > 0) {
        console.log(`‚ùå ${errorIssues.length} ch∆∞∆°ng c√≥ l·ªói d·ªãch:`);
        errorIssues.forEach(ch => console.log(`  - Ch∆∞∆°ng ${ch.chapterNumber}: ${ch.translationError}`));
      }
      
      if (titleIssues.length === 0 && contentIssues.length === 0 && errorIssues.length === 0) {
        console.log("‚úÖ T·∫•t c·∫£ ch∆∞∆°ng ƒë·ªÅu d·ªãch th√†nh c√¥ng!");
      }
    }
    
    // L∆∞u k·∫øt qu·∫£ ra file ƒë·ªÉ ph√¢n t√≠ch
    const fs = require('fs');
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `test_result_${timestamp}.json`;
    
    fs.writeFileSync(filename, JSON.stringify(result, null, 2));
    console.log(`\nüíæ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: ${filename}`);
    
  } catch (error) {
    console.error("‚ùå L·ªói khi g·ªçi API:", error.message);
    
    if (error.response) {
      console.error("üìä Response error:", {
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data
      });
    }
    
    if (error.code === 'ECONNREFUSED') {
      console.error("üîå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. H√£y ƒë·∫£m b·∫£o server ƒëang ch·∫°y!");
    }
  }
}

// Ch·∫°y test
if (require.main === module) {
  testApiEndpoint()
    .then(() => {
      console.log("\nüèÅ Test API endpoint ho√†n th√†nh!");
      process.exit(0);
    })
    .catch(error => {
      console.error("‚ùå L·ªói trong qu√° tr√¨nh test:", error);
      process.exit(1);
    });
}

module.exports = { testApiEndpoint }; 