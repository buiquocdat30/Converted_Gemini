const path = require("path");
const fs = require("fs").promises;
const os = require("os");
const crypto = require("crypto");
const { readEpub } = require("./epubService");
const { readTxt } = require("./txtServices");
const prisma = require("../config/prismaConfig");

const uploadService = {
    // Upload v√† x·ª≠ l√Ω file truy·ªán
    handleStoryUpload: async (fileName, fileContent) => {
        console.log("üìö B·∫Øt ƒë·∫ßu x·ª≠ l√Ω upload truy·ªán:", fileName);

        const ext = path.extname(fileName).toLowerCase();
        if (ext !== ".epub" && ext !== ".txt") {
            throw new Error("Ch·ªâ h·ªó tr·ª£ file EPUB ho·∫∑c TXT");
        }

        // T·∫°o file t·∫°m v·ªõi n·ªôi dung
        const tempDir = os.tmpdir();
        const tempFileName = crypto.randomUUID() + ext;
        const tempFilePath = path.join(tempDir, tempFileName);

        console.log("üìù ƒêang t·∫°o file t·∫°m t·∫°i:", tempFilePath);

        if (!fileContent) {
            console.log("‚ö†Ô∏è fileContent tr·ªëng cho file:", fileName);
            throw new Error("N·ªôi dung file tr·ªëng");
        }

        await fs.writeFile(
            tempFilePath,
            fileContent,
            ext === ".epub" ? "base64" : "utf-8"
        );

        console.log("‚úÖ ƒê√£ l∆∞u file t·∫°m th√†nh c√¥ng");

        let chapters = [];
        try {
            if (ext === ".epub") {
                console.log("üìñ ƒêang ƒë·ªçc file EPUB...");
                chapters = await readEpub(tempFilePath);
            } else {
                console.log("üìÑ ƒêang ƒë·ªçc file TXT...");
                chapters = await readTxt(tempFilePath);
            }
            console.log(`‚úÖ ƒê√£ ƒë·ªçc th√†nh c√¥ng ${chapters.length} ch∆∞∆°ng`);
        } finally {
            // X√≥a file t·∫°m sau khi x·ª≠ l√Ω xong
            await fs.unlink(tempFilePath);
            console.log("üßπ ƒê√£ x√≥a file t·∫°m");
        }

        return chapters;
    },

    // Upload v√† x·ª≠ l√Ω ·∫£nh
    handleImageUpload: async (userId, imageFile, type) => {
        console.log(`üñºÔ∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω upload ·∫£nh ${type} cho user:`, userId);

        if (!imageFile || !imageFile.buffer) {
            throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu ·∫£nh");
        }

        // Ki·ªÉm tra lo·∫°i ·∫£nh
        if (!['avatar', 'background'].includes(type)) {
            throw new Error("Lo·∫°i ·∫£nh kh√¥ng h·ª£p l·ªá");
        }

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ·∫£nh
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
        if (!allowedTypes.includes(imageFile.mimetype)) {
            throw new Error("ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£");
        }

        // T·∫°o t√™n file duy nh·∫•t
        const ext = path.extname(imageFile.originalname);
        const fileName = `${type}_${userId}_${Date.now()}${ext}`;
        
        // L∆∞u ·∫£nh v√†o th∆∞ m·ª•c uploads
        const uploadDir = path.join(__dirname, '../uploads');
        const filePath = path.join(uploadDir, fileName);

        // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        await fs.mkdir(uploadDir, { recursive: true });

        // L∆∞u file
        await fs.writeFile(filePath, imageFile.buffer);
        console.log(`‚úÖ ƒê√£ l∆∞u ·∫£nh ${type} th√†nh c√¥ng t·∫°i:`, filePath);

        // C·∫≠p nh·∫≠t th√¥ng tin user trong database
        const updateData = type === 'avatar' 
            ? { avatar: fileName }
            : { backgroundImage: fileName };

        await prisma.user.update({
            where: { id: userId },
            data: updateData
        });

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ${type} trong database`);

        return {
            fileName,
            filePath,
            type
        };
    }
};

module.exports = uploadService; 