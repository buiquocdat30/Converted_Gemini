const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const RE_HIRAGANA = /[\u3040-\u309f]/;
const RE_KATAKANA = /[\u30a0-\u30ff]/;
const RE_CJK = /[\u4e00-\u9fff]/;
const RE_HANGUL = /[\uac00-\ud7af]/;
const RE_VIETNAMESE = /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/i;

// c·∫£i ti·∫øn: x√°c ƒë·ªãnh ng√¥n ng·ªØ t·ª´ chu·ªói
function guessLanguage(original) {
  if (RE_HIRAGANA.test(original) || RE_KATAKANA.test(original)) return 'Nh·∫≠t';
  if (RE_HANGUL.test(original)) return 'H√†n';
  if (RE_CJK.test(original)) return 'Trung';
  // Latin-only (ko d·∫•u) -> Anh (Romanized)
  if (/^[A-Za-z0-9'‚Äô\-\s]+$/.test(original)) return 'Anh';
  return 'Anh';
}

function containsVietnameseChars(text) {
  return RE_VIETNAMESE.test(text);
}
function containsChineseChars(text) {
  return RE_CJK.test(text);
}
function containsJapaneseChars(text) {
  // ch·ªâ coi l√† Nh·∫≠t n·∫øu c√≥ kana (Hiragana/Katakana) ‚Äî tr√°nh nh·∫ßm v·ªõi Kanji
  return RE_HIRAGANA.test(text) || RE_KATAKANA.test(text);
}
function containsKoreanChars(text) {
  return RE_HANGUL.test(text);
}
function isForeignLanguage(text) {
  if (!text) return false;
  if (containsVietnameseChars(text)) return false;
  return containsChineseChars(text) || containsJapaneseChars(text) || containsKoreanChars(text) || /[A-Za-z]/.test(text);
}

// helper l∆∞u / c·∫≠p nh·∫≠t 1 d√≤ng
async function saveGlossaryItem(storyId, original, translated, type, lang) {
  original = original.trim();
  translated = translated.trim();
  type = (type || 'Nh√¢n v·∫≠t').trim();
  lang = (lang || guessLanguage(original)).trim();

  // clean quotes
  original = original.replace(/^["'""'']+|["'""'']+$/g, '').trim();
  translated = translated.replace(/^["'""'']+|["'""'']+$/g, '').trim();

  if (!isForeignLanguage(original)) {
    console.log(`‚ö†Ô∏è B·ªè qua v√¨ kh√¥ng ph·∫£i ng√¥n ng·ªØ n∆∞·ªõc ngo√†i: "${original}"`);
    return { skipped: 1, saved: 0, updated: 0 };
  }

  // lo·∫°i nh·ªØng c·ª•m qu√° d√†i
  const wordCount = original.split(/\s+/).filter(Boolean).length;
  if (original.length > 80 || wordCount > 6 || original.includes('Ôºö')) { // cho ng∆∞·ª°ng m·ªÅm h∆°n
    console.log(`‚ö†Ô∏è B·ªè qua c·ª•m qu√° d√†i: "${original}" (len=${original.length}, words=${wordCount})`);
    return { skipped: 1, saved: 0, updated: 0 };
  }

  // ki·ªÉm tra t·ªìn t·∫°i (so s√°nh ch√≠nh x√°c)
  const exists = await prisma.glossaryItem.findFirst({
    where: { storyId, original }
  });

  if (!exists) {
    await prisma.glossaryItem.create({
      data: {
        storyId,
        original,
        translated,
        type,
        lang
      }
    });
    console.log(`‚úÖ ƒê√£ l∆∞u: ${original} = ${translated} [${type}] [${lang}]`);
    return { skipped: 0, saved: 1, updated: 0 };
  } else {
    await prisma.glossaryItem.update({
      where: { id: exists.id },
      data: {
        frequency: (exists.frequency || 0) + 1,
        updatedAt: new Date()
      }
    });
    console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t: "${original}"`);
    return { skipped: 0, saved: 0, updated: 1 };
  }
}

// h√†m ch√≠nh (refactor)
async function extractAndSaveGlossary(storyId, glossaryText) {
  if (!glossaryText || !storyId) {
    console.log("‚ö†Ô∏è Kh√¥ng c√≥ glossary text ho·∫∑c storyId ƒë·ªÉ l∆∞u");
    return;
  }

  const lines = glossaryText
    .replace(/\r\n/g, '\n')
    .split('\n')
    .map(l => l.trim())
    .filter(Boolean);

  let savedCount = 0;
  let updatedCount = 0;
  let skippedCount = 0;

  const fullRe = /^(.+?)\s*=\s*(.+?)\s*\[(.+?)\]\s*\[(.+?)\]\s*$/;
  const simpleRe = /^\s*["'""'']?(.+?)["'""'']?\s*=\s*["'""'']?(.*?)["'""'']?\s*$/;

  for (const raw of lines) {
    console.log(`[GLOSSARY] üîé X·ª≠ l√Ω: "${raw}"`);
    // remove bullet/number prefix
    const line = raw.replace(/^[\-\*\‚Ä¢\d\.\)\s]+/, '').trim();

    let m = line.match(fullRe);
    if (m) {
      const [, original, translated, type, lang] = m;
      const r = await saveGlossaryItem(storyId, original, translated, type, lang);
      savedCount += r.saved; updatedCount += r.updated; skippedCount += r.skipped;
        continue;
      }

    m = line.match(simpleRe);
    if (m) {
      const [, original, translated] = m;
      // t·ª± suy ƒëo√°n type/lang; kh√¥ng skip ch·ªâ v√¨ thi·∫øu [] []
      const guessedLang = guessLanguage(original);
      const guessedType = 'Nh√¢n v·∫≠t';
      const r = await saveGlossaryItem(storyId, original, translated, guessedType, guessedLang);
      savedCount += r.saved; updatedCount += r.updated; skippedCount += r.skipped;
        continue;
      }

    // n·∫øu kh√¥ng kh·ªõp 2 ƒë·ªãnh d·∫°ng tr√™n, th·ª≠ parse v·ªõi bracket t√°ch r·ªùi vd: "Âº†‰ºü = Tr∆∞∆°ng Vƒ© [Nh√¢n v·∫≠t] [Trung]" style with extra spaces
    const bracketRe = /^(.+?)\s*=\s*(.+?)\s*\[(.+?)\]\s*\[(.+?)\]/;
    m = line.match(bracketRe);
    if (m) {
      const [, original, translated, type, lang] = m;
      const r = await saveGlossaryItem(storyId, original, translated, type, lang);
      savedCount += r.saved; updatedCount += r.updated; skippedCount += r.skipped;
        continue;
      }

    console.log(`‚ö†Ô∏è Kh√¥ng parse ƒë∆∞·ª£c d√≤ng glossary: "${line}" ‚Äî b·ªè qua`);
        skippedCount++;
  }

  console.log(`üìö K·∫øt qu·∫£ l∆∞u glossary: ${savedCount} m·ªõi, ${updatedCount} c·∫≠p nh·∫≠t, ${skippedCount} b·ªè qua`);
}

/**
 * L·∫•y t·∫•t c·∫£ glossary items c·ªßa m·ªôt truy·ªán
 */
async function getGlossaryByStoryId(storyId) {
  try {
    const items = await prisma.glossaryItem.findMany({
      where: { storyId },
      orderBy: [
        { frequency: 'desc' },
        { createdAt: 'desc' }
      ]
    });
    return items;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y glossary:", error);
    return [];
  }
}

/**
 * Chuy·ªÉn ƒë·ªïi glossary items th√†nh text format ƒë·ªÉ g·ª≠i cho AI
 */
function formatGlossaryForAI(glossaryItems) {
  if (!glossaryItems || glossaryItems.length === 0) {
    return "";
  }

  const formattedItems = glossaryItems.map(item => 
    `${item.original} = ${item.translated} [${item.type}] [${item.lang}]`
  ).join("\n");

  return formattedItems;
}

/**
 * X√≥a m·ªôt glossary item
 */
async function deleteGlossaryItem(itemId) {
  try {
    await prisma.glossaryItem.delete({
      where: { id: itemId }
    });
    return true;
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a glossary item:", error);
    return false;
  }
}

/**
 * C·∫≠p nh·∫≠t m·ªôt glossary item
 */
async function updateGlossaryItem(itemId, data) {
  try {
    const updated = await prisma.glossaryItem.update({
      where: { id: itemId },
      data: {
        ...data,
        updatedAt: new Date()
      }
    });
    return updated;
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t glossary item:", error);
    return null;
  }
}

/**
 * T√¨m ki·∫øm glossary items theo t·ª´ kh√≥a
 */
async function searchGlossaryItems(storyId, keyword) {
  try {
    const items = await prisma.glossaryItem.findMany({
      where: {
        storyId,
        OR: [
          { original: { contains: keyword, mode: 'insensitive' } },
          { translated: { contains: keyword, mode: 'insensitive' } },
          { type: { contains: keyword, mode: 'insensitive' } }
        ]
      },
      orderBy: [
        { frequency: 'desc' },
        { createdAt: 'desc' }
      ]
    });
    return items;
  } catch (error) {
    console.error("‚ùå L·ªói khi t√¨m ki·∫øm glossary:", error);
    return [];
  }
}

module.exports = {
  extractAndSaveGlossary,
  getGlossaryByStoryId,
  formatGlossaryForAI,
  deleteGlossaryItem,
  updateGlossaryItem,
  searchGlossaryItems,
  isForeignLanguage,
  containsChineseChars,
  containsJapaneseChars,
  containsKoreanChars
}; 