const fs = require("fs").promises;
const path = require("path");
require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const ApiKeyManagers = require("./apiKeyManagers.js"); // üëà Import ApiKeyManager

const DEFAULT_KEYS = process.env.DEFAULT_GEMINI_API_KEYS
  ? process.env.DEFAULT_GEMINI_API_KEYS.split(",")
  : [];

const apiKeyManager = new ApiKeyManagers(DEFAULT_KEYS);
// console.log('ƒê√¢y l√† apiKeyManager: ',apiKeyManager)
const DEFAULT_MODEL = process.env.DEFAULT_MODEL_AI;
const CUSTOM_KEYS_FILE = path.join(__dirname, "../data/custom_keys.txt");

// H√†m l∆∞u key kh√°ch
const saveCustomKey = async (key) => {
  try {
    const filePath = CUSTOM_KEYS_FILE;
    let existingKeys = [];

    try {
      const data = await fs.readFile(filePath, "utf8");
      existingKeys = data
        .split("\n")
        .map((k) => k.trim())
        .filter((k) => k.length > 0);
    } catch (err) {
      if (err.code !== "ENOENT") {
        console.error("‚ùå L·ªói ƒë·ªçc custom keys:", err.message);
      }
    }

    if (existingKeys.includes(key.trim())) {
      console.log("‚ö° Key ƒë√£ t·ªìn t·∫°i trong kho, b·ªè qua:", key.slice(0, 8) + "...");
      return;
    }

    await fs.appendFile(filePath, key.trim() + "\n");
    console.log("üì• ƒê√£ l∆∞u key kh√°ch m·ªõi v√†o kho:", key.slice(0, 8) + "...");
  } catch (err) {
    console.error("‚ùå L·ªói l∆∞u key kh√°ch:", err.message);
  }
};

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// H√†m d·ªãch text v·ªõi retry th√¥ng minh
const translateText = async (text, customKey, modelAI) => {
  console.log("‚úçÔ∏è Text ƒë·∫ßu v√†o:", text?.slice(0, 50), "...");

  const currentModelAI = modelAI || DEFAULT_MODEL;
  if (!text) throw new Error("Thi·∫øu n·ªôi dung c·∫ßn d·ªãch.");

  let keyToUse = customKey || null;
  let isCustomKey = !!customKey;

  if (!keyToUse) {
    if (!apiKeyManager.hasUsableKey()) throw new Error("Kh√¥ng c√≤n API Key m·∫∑c ƒë·ªãnh kh·∫£ d·ª•ng.");
    keyToUse = apiKeyManager.getActiveKey();
  }

  let retryAttempts = 0;
  const maxRetryAttempts = 5;

  while (retryAttempts < maxRetryAttempts) {
    try {
      console.log("üîë ƒêang d√πng API Key:", keyToUse.slice(0, 8) + "...");
      const genAI = new GoogleGenerativeAI(keyToUse);
      const model = genAI.getGenerativeModel({ model: currentModelAI });

      const prompt = `D·ªãch n·ªôi dung sau sang ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n, c√°c ƒë·∫°i t·ª´ nh√¢n x∆∞ng ph√π h·ª£p ng·ªØ c·∫£nh, gi·ªØ nguy√™n √Ω nghƒ©a, kh√¥ng th√™m g√¨ c·∫£:\n\n"${text}"`;
      const startTime = Date.now();
      const result = await model.generateContent(prompt);
      const response = await result.response;

      console.log('KQ Res usageMetadata.cachedContentTokenCount', response.usageMetadata.cachedContentTokenCount);
      console.log('KQ Res usageMetadata.candidatesTokenCount', response.usageMetadata.candidatesTokenCount);

      const translated = await response.text();
      const duration = ((Date.now() - startTime) / 1000).toFixed(2);

      console.log(
        `‚úÖ D·ªãch th√†nh c√¥ng sau ${duration}s v·ªõi key: ${keyToUse.slice(0, 8)}...`
      );

      // C·∫≠p nh·∫≠t usage n·∫øu d√πng key m·∫∑c ƒë·ªãnh
      if (!isCustomKey) {
        apiKeyManager.updateUsage(keyToUse, 
          (response.usageMetadata.cachedContentTokenCount || 0) +
          (response.usageMetadata.candidatesTokenCount || 0)
        );
      }

      return translated;
    } catch (error) {
      const errorMessage = error.message || error.toString();
      console.error("‚ö†Ô∏è L·ªói d·ªãch:", errorMessage);

      if (
        errorMessage.includes("Too Many Requests") ||
        errorMessage.includes("quotaMetric")
      ) {
        const retryDelayMatch = errorMessage.match(/"retryDelay":"(\d+)s"/);
        let retryDelay = 21000;
        if (retryDelayMatch && retryDelayMatch[1]) {
          retryDelay = parseInt(retryDelayMatch[1]) * 1000;
        }

        console.log(
          `‚è≥ Key ${keyToUse.slice(0, 8)}... b·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô. Ch·ªù ${retryDelay / 1000}s r·ªìi th·ª≠ l·∫°i...`
        );
        await delay(retryDelay);
        retryAttempts++;
        console.log(`üîÑ Th·ª≠ l·∫°i l·∫ßn ${retryAttempts}/${maxRetryAttempts}`);
        continue;
      }

      if (
        errorMessage.includes("API key") ||
        errorMessage.includes("permission") ||
        errorMessage.includes("quota")
      ) {
        if (isCustomKey) {
          throw new Error(`‚ùå Key kh√°ch ${keyToUse.slice(0, 8)}... ƒë√£ h·∫øt quota ho·∫∑c l·ªói permission. D·ª´ng d·ªãch.`);
        } else {
          console.log(`‚ùå X√≥a key l·ªói: ${keyToUse.slice(0, 8)}...`);
          apiKeyManager.exhaustKey(keyToUse);
          if (!apiKeyManager.hasUsableKey()) {
            throw new Error("H·∫øt API Key kh·∫£ d·ª•ng. D·ªãch th·∫•t b·∫°i.");
          }
          keyToUse = apiKeyManager.getActiveKey();
          retryAttempts = 0;
          continue;
        }
      }

      // C√°c l·ªói kh√°c
      throw new Error(`L·ªói d·ªãch: ${errorMessage}`);
    }
  }

  throw new Error("D·ªãch th·∫•t b·∫°i sau nhi·ªÅu l·∫ßn th·ª≠. Vui l√≤ng th·ª≠ l·∫°i sau.");
};

module.exports = { translateText };



