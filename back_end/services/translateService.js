require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const ApiKeyManager = require("./apiKeyManagers");
const publicModelService = require("./publicModelService");
const { extractAndSaveGlossary, getGlossaryByStoryId, formatGlossaryForAI } = require("./glossaryService");
const ErrorHandlerService = require("./errorHandlerService");

// M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng Gemini Pro
const DEFAULT_MODEL = "gemini-2.0-flash";

// ‚è≥ Delay helper
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// Kh·ªüi t·∫°o ErrorHandlerService
const errorHandler = new ErrorHandlerService();

const translateText = async (text, keyInfo, modelAI, type = "content", storyId = null) => {
  console.log("üî§ [TRANSLATE] ===== B·∫ÆT ƒê·∫¶U D·ªäCH =====");
  console.log("‚úçÔ∏è [TRANSLATE] Text ƒë·∫ßu v√†o:", text?.slice(0, 50), "...");
  console.log("[TRANSLATE] üìã Th√¥ng tin:", {
    type: type,
    model: modelAI?.name || modelAI,
    storyId: storyId,
    textLength: text?.length || 0
  });

  const { key, usageId, isUserKey } = keyInfo;

  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ modelAI th√¨ b√°o l·ªói
  if (!modelAI) {
    console.log("[TRANSLATE] ‚ùå L·ªói: Thi·∫øu th√¥ng tin modelAI");
    throw new Error("Thi·∫øu th√¥ng tin modelAI.");
  }

  const currentModelAI = modelAI?.value || modelAI || DEFAULT_MODEL;

  if (!text) {
    console.log("[TRANSLATE] ‚ùå L·ªói: Thi·∫øu n·ªôi dung c·∫ßn d·ªãch");
    throw new Error("Thi·∫øu n·ªôi dung c·∫ßn d·ªãch.");
  }

  // Ki·ªÉm tra key
  if (!key) {
    console.log("[TRANSLATE] ‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y key kh·∫£ d·ª•ng");
    throw new Error("Kh√¥ng t√¨m th·∫•y key kh·∫£ d·ª•ng.");
  }

  // Retry logic cho l·ªói 503
  const maxRetries = 3;
  let lastError = null;
  let currentModel = currentModelAI;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
  try {
      const keyDisplay = typeof key === 'string' ? key.substring(0, 8) + '...' : 'unknown';
      console.log(`[TRANSLATE] üîë D√πng key: ${keyDisplay} (l·∫ßn th·ª≠ ${attempt}/${maxRetries})`);
      console.log(`[TRANSLATE] ü§ñ D√πng model: ${currentModel}`);
      
    const genAI = new GoogleGenerativeAI(key);
      const model = genAI.getGenerativeModel({ model: currentModel });

    let prompt;
    if (type === "title") {
        console.log("[TRANSLATE] üìù T·∫°o prompt cho ti√™u ƒë·ªÅ");
      prompt = `D·ªãch ch√≠nh x√°c ti√™u ƒë·ªÅ truy·ªán sau sang ti·∫øng Vi·ªát, ch·ªâ tr·∫£ v·ªÅ b·∫£n d·ªãch, kh√¥ng th√™m b·∫•t k·ª≥ ch√∫ th√≠ch, gi·∫£i th√≠ch, ho·∫∑c k√Ω t·ª± n√†o kh√°c.
      L∆∞u √Ω quan tr·ªçng: Khi d·ªãch s·ªë ch∆∞∆°ng, h√£y s·ª≠ d·ª•ng s·ªë ·∫¢ R·∫≠p (1, 2, 3...) thay v√¨ s·ªë t·ª´ (m·ªôt, hai, ba...). V√≠ d·ª•: "ch∆∞∆°ng 1", "ch∆∞∆°ng 2", "ch∆∞∆°ng 3" thay v√¨ "ch∆∞∆°ng m·ªôt", "ch∆∞∆°ng hai", "ch∆∞∆°ng ba".
      Ti√™u ƒë·ªÅ: ${text}`;
    } else {
        console.log("[TRANSLATE] üìù T·∫°o prompt cho n·ªôi dung");
      // L·∫•y glossary n·∫øu c√≥ storyId
      let glossaryText = "";
      if (storyId) {
        try {
          const glossaryItems = await getGlossaryByStoryId(storyId);
          glossaryText = formatGlossaryForAI(glossaryItems);
            console.log(`[TRANSLATE] üìö ƒê√£ t·∫£i ${glossaryItems.length} items t·ª´ glossary cho truy·ªán ${storyId}`);
        } catch (error) {
            console.error("[TRANSLATE] ‚ö†Ô∏è L·ªói khi t·∫£i glossary:", error);
        }
      }

      // C·∫£i thi·ªán prompt ƒë·ªÉ d·ªãch hi·ªáu qu·∫£ h∆°n v·ªõi glossary
    //   const promptContent = `B·∫°n l√† "T√™n G·ªçi Chuy√™n Gia" ‚Äì m·ªôt c√¥ng c·ª• AI chuy√™n d·ªãch truy·ªán t·ª´ ti·∫øng Trung, Nh·∫≠t, H√†n ho·∫∑c Anh sang ti·∫øng Vi·ªát, v√† chuy·ªÉn ƒë·ªïi ch√≠nh x√°c to√†n b·ªô t√™n g·ªçi (nh√¢n v·∫≠t, ƒë·ªãa danh, t·ªï ch·ª©c, bi·ªát danh, th·ª±c th·ªÉ ƒë·∫∑c bi·ªát) theo quy t·∫Øc sau:
    //   ---

    //   üéØ M·ª§C TI√äU
    //   - D·ªãch to√†n b·ªô vƒÉn b·∫£n truy·ªán sang ti·∫øng Vi·ªát.
    //   - ƒê·ªìng th·ªùi x√°c ƒë·ªãnh, ph√¢n lo·∫°i v√† chuy·ªÉn ƒë·ªïi ƒë√∫ng t√™n g·ªçi theo quy t·∫Øc d∆∞·ªõi ƒë√¢y, ƒë·∫£m b·∫£o:
    //     - D·ªãch t√™n g·ªçi ƒë√∫ng ng·ªØ c·∫£nh, th·ªÉ lo·∫°i
    //     - Gi·ªØ nh·∫•t qu√°n trong to√†n b·ªô vƒÉn b·∫£n
    //     - Kh√¥ng gi·ªØ nguy√™n t√™n n∆∞·ªõc ngo√†i m·ªôt c√°ch tu·ª≥ ti·ªán
    //     - KH√îNG ƒê∆Ø·ª¢C B·ªé S√ìT b·∫•t k·ª≥ t·ª´ ti·∫øng n∆∞·ªõc ngo√†i n√†o

    //   ---

    //   üìò QUY T·∫ÆC CHUY·ªÇN ƒê·ªîI T√äN G·ªåI

    //   1. ƒê·ªëi t∆∞·ª£ng b·∫Øt bu·ªôc x·ª≠ l√Ω:
    //     - Nh√¢n v·∫≠t, ƒë·ªãa danh, t·ªï ch·ª©c, bi·ªát danh, chi√™u th·ª©c, c√¥ng ph√°p, v·∫≠t ph·∫©m ƒë·∫∑c bi·ªát.
    //     - Kh√¥ng x·ª≠ l√Ω c√°c t·ª´ chung (VD: "ma v∆∞∆°ng", "h·ªçc vi·ªán", "gi√°m ƒë·ªëc" n·∫øu kh√¥ng k√®m t√™n c·ª• th·ªÉ).

    //   2. T√≠nh nh·∫•t qu√°n:
    //     - M·ªói t√™n g·ªëc ch·ªâ c√≥ m·ªôt b·∫£n d·ªãch duy nh·∫•t xuy√™n su·ªët vƒÉn b·∫£n.
    //     - Ph√°t hi·ªán bi·∫øn th·ªÉ v√† h·ª£p nh·∫•t v·ªÅ c√πng t√™n (VD: ÁÅ∞ÂÄâÁúüÁ¥Ö = Haikura Shinku).
    //     - X·ª≠ l√Ω t√™n vi·∫øt t·∫Øt v√† t√™n ƒë·∫ßy ƒë·ªß ƒë√∫ng c√°ch (VD: J. Smith = John Smith).

    //   3. Quy t·∫Øc chuy·ªÉn ƒë·ªïi c·ª• th·ªÉ:

    //   | Ng√¥n ng·ªØ | Th·ªÉ lo·∫°i | Quy t·∫Øc |
    //   |---------|----------|--------|
    //   | Trung | Ti√™n Hi·ªáp, Huy·ªÅn Huy·ªÖn | H√°n Vi·ªát, bi·ªát danh d·ªãch nghƒ©a |
    //   |          | V√µng Du, ƒê√¥ Th·ªã, Khoa Huy·ªÖn | H√°n Vi·ªát cho t√™n th·∫≠t, gi·ªØ IGN n·∫øu c·∫ßn |
    //   | Nh·∫≠t | Light Novel, V√µng Du | Romaji chu·∫©n, bi·ªát danh d·ªãch nghƒ©a |
    //   | H√†n | Light Novel, ƒê√¥ Th·ªã | Romanized, bi·ªát danh d·ªãch nghƒ©a ho·∫∑c gi·ªØ nguy√™n n·∫øu ph·ªï bi·∫øn |
    //   | Anh | M·ªçi th·ªÉ lo·∫°i | Gi·ªØ nguy√™n t√™n ph∆∞∆°ng T√¢y, bi·ªát danh d·ªãch nghƒ©a |
    //   | ƒêa ng√¥n ng·ªØ | T·∫•t c·∫£ | ∆Øu ti√™n d·∫°ng ph·ªï bi·∫øn nh·∫•t trong ng·ªØ c·∫£nh |

    //   4. L·ªói v√† chu·∫©n h√≥a:
    //     - S·ª≠a l·ªói d√≠nh ch·ªØ: "H·ªçcvi·ªánOnmyou" ‚Üí "H·ªçc vi·ªán Onmyou"
    //     - Chu·∫©n h√≥a ch√≠nh t·∫£: d·∫•u c√°ch, d·∫•u thanh, hoa th∆∞·ªùng

    //   5. KI·ªÇM TRA B·∫ÆT BU·ªòC:
    //     - Sau khi d·ªãch xong, ki·ªÉm tra l·∫°i to√†n b·ªô vƒÉn b·∫£n ƒë·ªÉ ƒë·∫£m b·∫£o KH√îNG C√íN t·ª´ ti·∫øng n∆∞·ªõc ngo√†i n√†o ch∆∞a ƒë∆∞·ª£c d·ªãch
    //     - ƒê·∫∑c bi·ªát ch√∫ √Ω c√°c k√Ω t·ª± ti·∫øng Trung, Nh·∫≠t, H√†n c√≤n s√≥t l·∫°i

    //   ---

    //   üìö TH∆Ø VI·ªÜN T·ª™ ƒê√É C√ì (B·∫ÆT BU·ªòC S·ª¨ D·ª§NG):
    //   ${glossaryText ? glossaryText : "Ch∆∞a c√≥ th∆∞ vi·ªán t·ª´ n√†o."}

    //   ---

    //   üì§ ƒê·∫¶U RA PH·∫¢I L√Ä:
    //   - VƒÉn b·∫£n d·ªãch ho√†n ch·ªânh ti·∫øng Vi·ªát, c√≥ √°p d·ª•ng ƒë√∫ng chuy·ªÉn ƒë·ªïi t√™n ri√™ng theo quy t·∫Øc tr√™n.
    //   - Kh√¥ng ghi ch√∫ t√™n ri√™ng ri√™ng bi·ªát, kh√¥ng ch√®n metadata, kh√¥ng ch√∫ th√≠ch [lo·∫°i] [ng√¥n ng·ªØ].
    //   - T√™n ƒë√£ chuy·ªÉn ƒë·ªïi c·∫ßn t·ª± nhi√™n, ph√π h·ª£p th·ªÉ lo·∫°i v√† b·ªëi c·∫£nh, kh√¥ng c√≥ c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát tr∆∞·ªõc t√™n, trong t√™n v√† sau t√™n.
    //   - Kho·∫£ng c√°ch gi·ªØa c√°c t√™n ri√™ng ph·∫£i h·ª£p l√Ω, kh√¥ng ƒë·ªÉ l·∫°i kho·∫£ng tr·∫Øng ·ªü gi·ªØa t√™n.
    //   - Kho·∫£ng c√°ch gi·ªØa c√°c t√™n ri√™ng v√† t·ª´ ti·∫øp theo ph·∫£i h·ª£p l√Ω, kh√¥ng ƒë·ªÉ l·∫°i kho·∫£ng tr·∫Øng ·ªü gi·ªØa t√™n v√† t·ª´ ti·∫øp theo.
    //   - Ch·ªâ s·ª≠ d·ª•ng ƒë·∫°i t·ª´ nh√¢n x∆∞ng "ta" cho nh√¢n v·∫≠t, "ng∆∞∆°i" cho ng∆∞·ªùi ƒë·ªëi tho·∫°i.

    //   ---

    //   üö´ C·∫§M (B·∫ÆT BU·ªòC TU√ÇN TH·ª¶)
    //   - KH√îNG gi·ªØ nguy√™n t√™n g·ªëc n∆∞·ªõc ngo√†i n·∫øu kh√¥ng h·ª£p quy t·∫Øc.
    //   - KH√îNG phi√™n √¢m sai quy t·∫Øc th·ªÉ lo·∫°i.
    //   - KH√îNG th√™m gi·∫£i th√≠ch, ch√∫ th√≠ch, ho·∫∑c in ra danh s√°ch t√™n ri√™ng.
    //   - KH√îNG d√πng ƒë·∫°i t·ª´ nh√¢n x∆∞ng cho b·∫£n th√¢n nh√¢n v·∫≠t. 
    //   - KH√îNG d·ªãch sai nghƒ©a, sai ch·ª©c nƒÉng c·ªßa t√™n g·ªçi (VD: nh·∫ßm chi√™u th·ª©c l√† nh√¢n v·∫≠t).
    //   - KH√îNG ƒê∆Ø·ª¢C B·ªé S√ìT b·∫•t k·ª≥ t·ª´ ti·∫øng n∆∞·ªõc ngo√†i n√†o trong vƒÉn b·∫£n.

    //   ---

    //   üì• B·∫Øt ƒë·∫ßu d·ªãch ƒëo·∫°n truy·ªán sau sang ti·∫øng Vi·ªát:\n\n${text}, √°p d·ª•ng ƒë√∫ng c√°c quy t·∫Øc tr√™n:

    //   ---

    //   ·ªû CU·ªêI C√ôNG, B·∫ÆT BU·ªòC IN RA PH·∫¶N SAU (KH√îNG ƒê∆Ø·ª¢C THI·∫æU):

    //   TH∆Ø VI·ªÜN T·ª™ M·ªöI:
    //   - CH·ªà in c√°c d√≤ng theo ƒë√∫ng ƒë·ªãnh d·∫°ng: T√™n g·ªëc = T√™n d·ªãch [Lo·∫°i] [Ng√¥n ng·ªØ]
    //   - KH√îNG gi·∫£i th√≠ch, KH√îNG ti√™u ƒë·ªÅ ph·ª•, KH√îNG markdown/code block
    //   - N·∫øu KH√îNG c√≥ t√™n ri√™ng m·ªõi, in CH√çNH X√ÅC: Kh√¥ng c√≥ t·ª´ m·ªõi
    //   - [Lo·∫°i] PH·∫¢I thu·ªôc m·ªôt trong: Nh√¢n v·∫≠t, ƒê·ªãa danh, T·ªï ch·ª©c, V·∫≠t ph·∫©m, Chi√™u th·ª©c, C√¥ng ph√°p
    //   - [Ng√¥n ng·ªØ] PH·∫¢I thu·ªôc m·ªôt trong: Trung, Nh·∫≠t, H√†n, Anh (KH√îNG ƒë∆∞·ª£c ghi "Ti·∫øng Vi·ªát")
    //   - KH√îNG d√πng ngo·∫∑c vu√¥ng trong t√™n; KH√îNG th√™m k√Ω t·ª± l·∫° quanh t√™n

    //   N·∫øu c√≥ t√™n ri√™ng m·ªõi ph√°t hi·ªán, h√£y li·ªát k√™ theo format:
    //   T√™n g·ªëc = T√™n d·ªãch [Lo·∫°i] [Ng√¥n ng·ªØ]
      
    //   QUY T·∫ÆC LI·ªÜT K√ä CH√çNH X√ÅC:
    //   1. CH·ªà li·ªát k√™ c√°c DANH T·ª™ RI√äNG (Proper Nouns):
    //      - T√™n ng∆∞·ªùi: Âº†‰ºü, ÊùéÁæé, Haikura Shinku
    //      - T√™n ƒë·ªãa danh: Âåó‰∫¨, ‰∏ú‰∫¨, Seoul
    //      - T√™n t·ªï ch·ª©c: Ê∏ÖÂçéÂ§ßÂ≠¶, ‰∏ú‰∫¨Â§ßÂ≠¶
    //      - T√™n v·∫≠t ph·∫©m ƒë·∫∑c bi·ªát: ËΩ©ËæïÂâë, Â±†ÈæôÂàÄ
    //      - T√™n chi√™u th·ª©c: ÈôçÈæôÂçÅÂÖ´Êéå, ‰πùÈò¥ÁúüÁªè
    //      - T√™n c√¥ng ph√°p: ÊòìÁ≠ãÁªè, Ê¥óÈ´ìÁªè
      
    //   2. KH√îNG li·ªát k√™:
    //      - C√°c t·ª´ chung: "ma v∆∞∆°ng", "h·ªçc vi·ªán", "gi√°m ƒë·ªëc" (tr·ª´ khi c√≥ t√™n c·ª• th·ªÉ)
    //      - C√°c c√¢u ho·∫∑c c·ª•m t·ª´ d√†i: "Á¨¨‰∏ÄÁ´† Ë∑ùÁ¶ªÊú´Êó•ËøòÊúâ180Â§©" (ƒë√¢y l√† t√™n ch∆∞∆°ng, kh√¥ng ph·∫£i danh t·ª´ ri√™ng)
    //      - T√™n ti·∫øng Vi·ªát: "L√Ω V≈©", "Tr·∫ßn Minh"
    //      - T√™n ƒë√£ c√≥ trong TH∆Ø VI·ªÜN T·ª™ ƒê√É C√ì ·ªü tr√™n
      
    //   3. CH·ªà li·ªát k√™ nh·ªØng t√™n c√≥ g·ªëc ti·∫øng n∆∞·ªõc ngo√†i (Trung, Nh·∫≠t, H√†n, Anh)
      
    //   4. M·ªñI T·ª™ RI√äNG PH·∫¢I L√Ä M·ªòT ƒê∆†N V·ªä ƒê·ªòC L·∫¨P:
    //      - ƒê√öNG: Âº†‰ºü = Tr∆∞∆°ng Vƒ© [Nh√¢n v·∫≠t] [Trung]
    //      - SAI: Âº†‰ºüÊùéÁæé = Tr∆∞∆°ng Vƒ© L√Ω M·ªπ [Nh√¢n v·∫≠t] [Trung] (ph·∫£i t√°ch th√†nh 2 t·ª´)
      
    //   V√≠ d·ª• ƒê√öNG:
    //   Âº†‰ºü = Tr∆∞∆°ng Vƒ© [Nh√¢n v·∫≠t] [Trung]
    //   ÊùéÁæé = L√Ω M·ªπ [Nh√¢n v·∫≠t] [Trung]
    //   MÈÉΩ = M ƒê√¥ [ƒê·ªãa danh] [Trung]
    //   Haikura Shinku = Haikura Shinku [Nh√¢n v·∫≠t] [Nh·∫≠t]
    //   ËΩ©ËæïÂâë = Hi√™n Vi√™n Ki·∫øm [V·∫≠t ph·∫©m] [Trung]
      
    //   V√≠ d·ª• SAI (kh√¥ng ƒë∆∞·ª£c li·ªát k√™):
    //   "Á¨¨‰∏ÄÁ´† Ë∑ùÁ¶ªÊú´Êó•ËøòÊúâ180Â§©" (t√™n ch∆∞∆°ng d√†i)
    //   "ma v∆∞∆°ng" (t·ª´ chung)
    //   "L√Ω V≈©" (t√™n ti·∫øng Vi·ªát)
      
    //   ‚ö†Ô∏è QUAN TR·ªåNG: N·∫øu kh√¥ng c√≥ t√™n ri√™ng m·ªõi n√†o, PH·∫¢I ghi "Kh√¥ng c√≥ t·ª´ m·ªõi"
    // `; //C√°i n√†y l√† c√°i c≈©
    const promptContent = `B·∫°n l√† "T√™n G·ªçi Chuy√™n Gia" ‚Äì m·ªôt c√¥ng c·ª• AI chuy√™n d·ªãch truy·ªán t·ª´ ti·∫øng Trung, Nh·∫≠t, H√†n ho·∫∑c Anh sang ti·∫øng Vi·ªát, v√† chuy·ªÉn ƒë·ªïi ch√≠nh x√°c to√†n b·ªô t√™n g·ªçi (nh√¢n v·∫≠t, ƒë·ªãa danh, t·ªï ch·ª©c, bi·ªát danh, th·ª±c th·ªÉ ƒë·∫∑c bi·ªát) theo quy t·∫Øc sau:
---

üéØ M·ª§C TI√äU
- D·ªãch to√†n b·ªô vƒÉn b·∫£n truy·ªán sang ti·∫øng Vi·ªát.
- ƒê·ªìng th·ªùi x√°c ƒë·ªãnh, ph√¢n lo·∫°i v√† chuy·ªÉn ƒë·ªïi ƒë√∫ng t√™n g·ªçi theo quy t·∫Øc d∆∞·ªõi ƒë√¢y, ƒë·∫£m b·∫£o:
  - D·ªãch t√™n g·ªçi ƒë√∫ng ng·ªØ c·∫£nh, th·ªÉ lo·∫°i
  - Gi·ªØ nh·∫•t qu√°n trong to√†n b·ªô vƒÉn b·∫£n
  - Kh√¥ng gi·ªØ nguy√™n t√™n n∆∞·ªõc ngo√†i m·ªôt c√°ch tu·ª≥ ti·ªán
  - KH√îNG ƒê∆Ø·ª¢C B·ªé S√ìT b·∫•t k·ª≥ t·ª´ ti·∫øng n∆∞·ªõc ngo√†i n√†o
- **Sau khi d·ªãch, B·∫ÆT BU·ªòC t·∫°o danh s√°ch "TH∆Ø VI·ªÜN T·ª™ M·ªöI" n·∫øu ph√°t hi·ªán b·∫•t k·ª≥ danh t·ª´ ri√™ng m·ªõi n√†o, n·∫øu kh√¥ng c√≥ th√¨ ghi "Kh√¥ng c√≥ t·ª´ m·ªõi".**

---

üìò QUY T·∫ÆC CHUY·ªÇN ƒê·ªîI T√äN G·ªåI
1. ƒê·ªëi t∆∞·ª£ng b·∫Øt bu·ªôc x·ª≠ l√Ω:
  - Nh√¢n v·∫≠t, ƒë·ªãa danh, t·ªï ch·ª©c, bi·ªát danh, chi√™u th·ª©c, c√¥ng ph√°p, v·∫≠t ph·∫©m ƒë·∫∑c bi·ªát.
  - Kh√¥ng x·ª≠ l√Ω c√°c t·ª´ chung (VD: "ma v∆∞∆°ng", "h·ªçc vi·ªán", "gi√°m ƒë·ªëc" n·∫øu kh√¥ng k√®m t√™n c·ª• th·ªÉ).

2. T√≠nh nh·∫•t qu√°n:
  - M·ªói t√™n g·ªëc ch·ªâ c√≥ m·ªôt b·∫£n d·ªãch duy nh·∫•t xuy√™n su·ªët vƒÉn b·∫£n.
  - Ph√°t hi·ªán bi·∫øn th·ªÉ v√† h·ª£p nh·∫•t v·ªÅ c√πng t√™n (VD: ÁÅ∞ÂÄâÁúüÁ¥Ö = Haikura Shinku).
  - X·ª≠ l√Ω t√™n vi·∫øt t·∫Øt v√† t√™n ƒë·∫ßy ƒë·ªß ƒë√∫ng c√°ch (VD: J. Smith = John Smith).

3. Quy t·∫Øc chuy·ªÉn ƒë·ªïi c·ª• th·ªÉ:

| Ng√¥n ng·ªØ | Th·ªÉ lo·∫°i | Quy t·∫Øc |
|---------|----------|--------|
| Trung | Ti√™n Hi·ªáp, Huy·ªÅn Huy·ªÖn | H√°n Vi·ªát, bi·ªát danh d·ªãch nghƒ©a |
|        | V√µng Du, ƒê√¥ Th·ªã, Khoa Huy·ªÖn | H√°n Vi·ªát cho t√™n th·∫≠t, gi·ªØ IGN n·∫øu c·∫ßn |
| Nh·∫≠t | Light Novel, V√µng Du | Romaji chu·∫©n, bi·ªát danh d·ªãch nghƒ©a |
| H√†n | Light Novel, ƒê√¥ Th·ªã | Romanized, bi·ªát danh d·ªãch nghƒ©a ho·∫∑c gi·ªØ nguy√™n n·∫øu ph·ªï bi·∫øn |
| Anh | M·ªçi th·ªÉ lo·∫°i | Gi·ªØ nguy√™n t√™n ph∆∞∆°ng T√¢y, bi·ªát danh d·ªãch nghƒ©a |
| ƒêa ng√¥n ng·ªØ | T·∫•t c·∫£ | ∆Øu ti√™n d·∫°ng ph·ªï bi·∫øn nh·∫•t trong ng·ªØ c·∫£nh |

4. L·ªói v√† chu·∫©n h√≥a:
  - S·ª≠a l·ªói d√≠nh ch·ªØ: "H·ªçcvi·ªánOnmyou" ‚Üí "H·ªçc vi·ªán Onmyou"
  - Chu·∫©n h√≥a ch√≠nh t·∫£: d·∫•u c√°ch, d·∫•u thanh, hoa th∆∞·ªùng

5. KI·ªÇM TRA B·∫ÆT BU·ªòC:
  - Sau khi d·ªãch xong, ki·ªÉm tra l·∫°i to√†n b·ªô vƒÉn b·∫£n ƒë·ªÉ ƒë·∫£m b·∫£o KH√îNG C√íN t·ª´ ti·∫øng n∆∞·ªõc ngo√†i n√†o ch∆∞a ƒë∆∞·ª£c d·ªãch
  - ƒê·∫∑c bi·ªát ch√∫ √Ω c√°c k√Ω t·ª± ti·∫øng Trung, Nh·∫≠t, H√†n c√≤n s√≥t l·∫°i
  - **Lu√¥n r√† so√°t ƒë·ªÉ t√¨m t√™n ri√™ng m·ªõi cho TH∆Ø VI·ªÜN T·ª™ M·ªöI**

---

üìö TH∆Ø VI·ªÜN T·ª™ ƒê√É C√ì (B·∫ÆT BU·ªòC S·ª¨ D·ª§NG):
${glossaryText ? glossaryText : "Ch∆∞a c√≥ th∆∞ vi·ªán t·ª´ n√†o."}

---

üì§ ƒê·∫¶U RA PH·∫¢I L√Ä:
1. VƒÉn b·∫£n d·ªãch ho√†n ch·ªânh ti·∫øng Vi·ªát, √°p d·ª•ng ƒë√∫ng chuy·ªÉn ƒë·ªïi t√™n ri√™ng theo quy t·∫Øc tr√™n.
2. **Sau vƒÉn b·∫£n d·ªãch, lu√¥n in "TH∆Ø VI·ªÜN T·ª™ M·ªöI" theo format chu·∫©n.**
3. Format TH∆Ø VI·ªÜN T·ª™ M·ªöI:
  - T√™n g·ªëc = T√™n d·ªãch [Lo·∫°i] [Ng√¥n ng·ªØ]
  - N·∫øu kh√¥ng c√≥, in ch√≠nh x√°c: Kh√¥ng c√≥ t·ª´ m·ªõi
  - [Lo·∫°i] ‚àà {Nh√¢n v·∫≠t, ƒê·ªãa danh, T·ªï ch·ª©c, V·∫≠t ph·∫©m, Chi√™u th·ª©c, C√¥ng ph√°p}
  - [Ng√¥n ng·ªØ] ‚àà {Trung, Nh·∫≠t, H√†n, Anh}
  - N·∫øu kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ [Lo·∫°i] ho·∫∑c [Ng√¥n ng·ªØ], h√£y ch·ªçn kh·∫£ nƒÉng h·ª£p l√Ω nh·∫•t.

---

üì• D·ªãch ƒëo·∫°n truy·ªán sau sang ti·∫øng Vi·ªát, √°p d·ª•ng ƒë·∫ßy ƒë·ªß quy t·∫Øc v√† y√™u c·∫ßu tr√™n:
${text}

---
TH∆Ø VI·ªÜN T·ª™ M·ªöI:
- CH·ªà li·ªát k√™ danh t·ª´ ri√™ng g·ªëc ngo·∫°i ng·ªØ, m·ªói t√™n l√† m·ªôt ƒë∆°n v·ªã ƒë·ªôc l·∫≠p.
- Kh√¥ng li·ªát k√™ t·ª´ chung, t√™n ti·∫øng Vi·ªát, t√™n ƒë√£ c√≥ trong th∆∞ vi·ªán.
- N·∫øu kh√¥ng ph√°t hi·ªán t√™n m·ªõi, ghi "Kh√¥ng c√≥ t·ª´ m·ªõi".
`;

      prompt = promptContent;
    }

    console.log("üìù [TRANSLATE] Prompt g·ª≠i ƒëi:", prompt.substring(0, 100) + "...");

    console.log("[TRANSLATE] üîÑ G·ªçi API Gemini...");
    const startTime = Date.now();
    const result = await model.generateContent(prompt);
    const response = result.response;
    let translated = response.text();
    const duration = parseFloat(((Date.now() - startTime) / 1000).toFixed(2)); // Chuy·ªÉn th√†nh number

    console.log("üì§ [TRANSLATE] Response t·ª´ API:", translated.substring(0, 100) + "...");
    console.log("üìè [TRANSLATE] ƒê·ªô d√†i text g·ªëc:", text.length);
    console.log("üìè [TRANSLATE] ƒê·ªô d√†i text d·ªãch:", translated.length);
    console.log("‚è±Ô∏è [TRANSLATE] Th·ªùi gian d·ªãch:", duration + "s");
    console.log("üìö [TRANSLATE] Response t·ª´ API:", translated);
    const isUnchanged = translated.trim() === text.trim();

    if (isUnchanged) {
      const keyDisplay = typeof key === 'string' ? key.substring(0, 8) + '...' : 'unknown';
      console.warn(
        `‚ö†Ô∏è [TRANSLATE] B·∫£n d·ªãch kh√¥ng thay ƒë·ªïi cho key ${keyDisplay}`
      );
      console.warn("üîç [TRANSLATE] Text g·ªëc:", text.substring(0, 100));
      console.warn("üîç [TRANSLATE] Text d·ªãch:", translated.substring(0, 100));
    }

    // C·∫≠p nh·∫≠t th·ªëng k√™ s·ª≠ d·ª•ng key n·∫øu c√≥ usageId
    if (response.usageMetadata && usageId) {
      console.log("[TRANSLATE] üìä C·∫≠p nh·∫≠t th·ªëng k√™ s·ª≠ d·ª•ng key...");
      const apiKeyManager = new ApiKeyManager();
      await apiKeyManager.updateUsageStats(
        usageId,
        response.usageMetadata,
        isUserKey
      );
    }

    // L∆∞u glossary n·∫øu c√≥ storyId v√† kh√¥ng ph·∫£i d·ªãch title
    if (storyId && type !== "title") {
      try {
        console.log("[TRANSLATE] üìö X·ª≠ l√Ω glossary...");
        // T√¨m v√† tr√≠ch xu·∫•t glossary t·ª´ response (h·ªó tr·ª£ c√≥/kh√¥ng emoji, CRLF)
        const glossaryMatch = translated.match(/(?:üìö\s*)?TH∆Ø VI·ªÜN T·ª™ M·ªöI:\s*[\r\n]+([\s\S]*?)(?=(?:\r?\n)---|$)/i);
        if (glossaryMatch) {
          const glossaryText = glossaryMatch[1].trim();
          const glossaryLines = glossaryText.split('\n').filter(l => l.trim());
          console.log(`[TRANSLATE] üîé Glossary block ƒë∆∞·ª£c ph√°t hi·ªán: ${glossaryLines.length} d√≤ng`);
          console.log(`[TRANSLATE] üß© Glossary preview:`, glossaryLines.slice(0, 5));
          
          // Ki·ªÉm tra xem c√≥ t·ª´ m·ªõi th·ª±c s·ª± kh√¥ng (kh√¥ng ph·∫£i "Kh√¥ng c√≥ t·ª´ m·ªõi")
          if (glossaryText && glossaryText !== "Kh√¥ng c√≥ t·ª´ m·ªõi" && !glossaryText.includes("Kh√¥ng c√≥ t·ª´ m·ªõi")) {
            await extractAndSaveGlossary(storyId, glossaryText);
            console.log(`[TRANSLATE] üìö ƒê√£ l∆∞u ${glossaryText.split('\n').filter(line => line.trim() && line.includes('=')).length} t·ª´ m·ªõi v√†o glossary`);
          } else {
            console.log("[TRANSLATE] üìö Kh√¥ng c√≥ t·ª´ m·ªõi ƒë·ªÉ l∆∞u v√†o glossary");
          }
          
          // Lo·∫°i b·ªè ph·∫ßn glossary kh·ªèi text d·ªãch cu·ªëi c√πng (h·ªó tr·ª£ c√≥/kh√¥ng emoji, CRLF)
          translated = translated.replace(/(?:üìö\s*)?TH∆Ø VI·ªÜN T·ª™ M·ªöI:\s*[\r\n]+[\s\S]*?(?=(?:\r?\n)---|$)/i, '').trim();
          console.log('[TRANSLATE] üßº ƒê√£ lo·∫°i b·ªè block TH∆Ø VI·ªÜN T·ª™ M·ªöI kh·ªèi n·ªôi dung d·ªãch tr·∫£ v·ªÅ');
        } else {
          console.warn("[TRANSLATE] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph·∫ßn 'TH∆Ø VI·ªÜN T·ª™ M·ªöI' trong response");
          const hasKeyword = /TH∆Ø VI·ªÜN T·ª™ M·ªöI/i.test(translated);
          const hasEmoji = /üìö/.test(translated);
          console.log(`[TRANSLATE] üîç Ch·∫©n ƒëo√°n: hasKeyword=${hasKeyword}, hasEmoji=${hasEmoji}, length=${translated.length}`);
          console.log('[TRANSLATE] üîç 200 k√Ω t·ª± ƒë·∫ßu c·ªßa response:', translated.substring(0, 200).replace(/\n/g, ' \\n '));

          // Fallback: th·ª≠ tr√≠ch c√°c d√≤ng glossary theo format d√π kh√¥ng c√≥ header
          try {
            // Lo·∫°i b·ªè code fences n·∫øu c√≥
            const cleanedForScan = translated.replace(/```[\s\S]*?```/g, '');
            const lineRegex = /^\s*(.+?)\s*=\s*(.+?)\s*\[(.+?)\]\s*\[(.+?)\]\s*$/gim;
            const matches = [];
            let m;
            while ((m = lineRegex.exec(cleanedForScan)) !== null) {
              const line = `${m[1].trim()} = ${m[2].trim()} [${m[3].trim()}] [${m[4].trim()}]`;
              matches.push(line);
            }
            console.log(`[TRANSLATE] üîé Fallback scan t√¨m th·∫•y ${matches.length} d√≤ng glossary d·∫°ng "a = b [type] [lang]"`);
            if (matches.length > 0) {
              const glossaryText = matches.join('\n');
              await extractAndSaveGlossary(storyId, glossaryText);
              console.log(`[TRANSLATE] üìö Fallback ƒë√£ l∆∞u ${matches.length} d√≤ng glossary`);
              // Lo·∫°i b·ªè c√°c d√≤ng ƒë√£ match kh·ªèi n·ªôi dung d·ªãch ƒë·ªÉ tr√°nh l·∫´n v√†o b·∫£n d·ªãch
              matches.forEach(line => {
                const esc = line.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                translated = translated.replace(new RegExp(`^.*${esc}.*$`, 'gim'), '').trim();
              });
            }
          } catch (fallbackErr) {
            console.error('[TRANSLATE] ‚ö†Ô∏è L·ªói fallback scan glossary:', fallbackErr);
          }
        }
      } catch (error) {
        console.error("[TRANSLATE] ‚ö†Ô∏è L·ªói khi l∆∞u glossary:", error);
      }
    }

    console.log(
      `‚úÖ [TRANSLATE] D·ªãch th√†nh c√¥ng sau ${duration}s v·ªõi key ${typeof key === 'string' ? key.substring(0, 8) + '...' : 'unknown'}`
    );

    // ƒê·∫£m b·∫£o lu√¥n tr·∫£ v·ªÅ ƒë√∫ng format
    const resultObj = {
      translated: translated || text, // Fallback v·ªÅ text g·ªëc n·∫øu translated r·ªóng
      usage: response.usageMetadata || null,
      isUnchanged: isUnchanged,
      duration: duration, // Th√™m duration v√†o result
      hasError: false,
      error: null
    };

    console.log("üìã [TRANSLATE] K·∫øt qu·∫£ tr·∫£ v·ªÅ:", {
      hasTranslated: !!resultObj.translated,
      translatedLength: resultObj.translated?.length || 0,
      isUnchanged: resultObj.isUnchanged,
      duration: resultObj.duration,
      translatedPreview: resultObj.translated?.substring(0, 50) + "...",
    });

    console.log("üî§ [TRANSLATE] ===== HO√ÄN TH√ÄNH D·ªäCH =====");
    return resultObj;
  } catch (error) {
    lastError = error;
    console.log(`‚ùå [TRANSLATE] ===== L·ªñI D·ªäCH (L·∫¶N ${attempt}/${maxRetries}) =====`);
    
    // S·ª≠ d·ª•ng ErrorHandlerService ƒë·ªÉ ph√¢n t√≠ch l·ªói
    const errorInfo = errorHandler.logError(error, {
      model: currentModelAI,
      key: typeof key === 'string' ? key.substring(0, 8) + '...' : 'unknown',
      type: type,
      storyId: storyId,
      textLength: text?.length || 0
    });

    console.error("‚ö†Ô∏è [TRANSLATE] L·ªói d·ªãch chi ti·∫øt:", errorHandler.createDeveloperMessage(errorInfo));

    // N·∫øu l√† l·ªói 503 v√† c√≤n retry, th·ª≠ l·∫°i
    if (errorInfo.code === '503' && attempt < maxRetries) {
      const delay = attempt * 2000; // TƒÉng delay theo s·ªë l·∫ßn retry
      console.log(`‚è≥ [TRANSLATE] Ch·ªù ${delay}ms tr∆∞·ªõc khi th·ª≠ l·∫°i l·∫ßn ${attempt + 1}...`);
      
      // Th·ª≠ fallback model n·∫øu ƒëang d√πng gemini-2.0-flash-lite
      if (currentModel === 'gemini-2.0-flash-lite' && attempt === 2) {
        currentModel = 'gemini-1.5-flash';
        console.log(`üîÑ [TRANSLATE] Chuy·ªÉn sang fallback model: ${currentModel}`);
      } else if (currentModel === 'gemini-1.5-flash' && attempt === 3) {
        currentModel = 'gemini-1.5-pro';
        console.log(`üîÑ [TRANSLATE] Chuy·ªÉn sang fallback model cu·ªëi: ${currentModel}`);
      }
      
      await new Promise(resolve => setTimeout(resolve, delay));
      continue;
    }

    // N·∫øu h·∫øt retry ho·∫∑c kh√¥ng ph·∫£i l·ªói 503, tr·∫£ v·ªÅ l·ªói
    console.log("üîÑ [TRANSLATE] Tr·∫£ v·ªÅ th√¥ng tin l·ªói do d·ªãch th·∫•t b·∫°i");
    return {
      translated: null, // Kh√¥ng c√≥ b·∫£n d·ªãch
      usage: null,
      isUnchanged: false, // Kh√¥ng ph·∫£i kh√¥ng thay ƒë·ªïi m√† l√† l·ªói
      error: errorInfo.userMessage, // Th√¥ng b√°o l·ªói th√¢n thi·ªán v·ªõi user
      errorDetails: errorHandler.createDeveloperMessage(errorInfo), // Chi ti·∫øt l·ªói cho developer
      hasError: true, // Flag ƒë·ªÉ controller bi·∫øt c√≥ l·ªói
      retryable: errorInfo.retryable, // C√≥ th·ªÉ retry hay kh√¥ng
      errorType: errorInfo.type, // Lo·∫°i l·ªói
      solution: errorInfo.solution, // Gi·∫£i ph√°p cho user
      duration: 0 // Th·ªùi gian d·ªãch = 0 v√¨ l·ªói
    };
  }
  }

  // N·∫øu h·∫øt t·∫•t c·∫£ retry, tr·∫£ v·ªÅ l·ªói cu·ªëi c√πng
  console.log("üîÑ [TRANSLATE] H·∫øt t·∫•t c·∫£ retry, tr·∫£ v·ªÅ l·ªói cu·ªëi c√πng");
  const finalErrorInfo = errorHandler.logError(lastError, {
    model: currentModelAI,
    key: typeof key === 'string' ? key.substring(0, 8) + '...' : 'unknown',
    type: type,
    storyId: storyId,
    textLength: text?.length || 0
  });

  return {
    translated: null,
    usage: null,
    isUnchanged: false,
    error: finalErrorInfo.userMessage,
    errorDetails: errorHandler.createDeveloperMessage(finalErrorInfo),
    hasError: true,
    retryable: false, // H·∫øt retry r·ªìi
    errorType: finalErrorInfo.type,
    solution: finalErrorInfo.solution,
    duration: 0 // Th·ªùi gian d·ªãch = 0 v√¨ l·ªói
  };
};

module.exports = {
  translateText,
};
