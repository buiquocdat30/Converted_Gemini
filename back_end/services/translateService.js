require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const ApiKeyManager = require("./apiKeyManagers");
const publicModelService = require("./publicModelService");

// M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng Gemini Pro
const DEFAULT_MODEL = "gemini-2.0-flash";

// ‚è≥ Delay helper
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

const translateText = async (text, keyInfo, modelAI) => {
  console.log("‚úçÔ∏è Text ƒë·∫ßu v√†o:", text?.slice(0, 50), "...");

  const { key, usageId, isUserKey } = keyInfo;
  
  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ modelAI th√¨ b√°o l·ªói
  if (!modelAI) {
    throw new Error("Thi·∫øu th√¥ng tin modelAI.");
  }

  const currentModelAI = modelAI || DEFAULT_MODEL;

  if (!text) throw new Error("Thi·∫øu n·ªôi dung c·∫ßn d·ªãch.");

  // Ki·ªÉm tra key
  if (!key) {
    throw new Error("Kh√¥ng t√¨m th·∫•y key kh·∫£ d·ª•ng.");
  }

  try {
    console.log("üîë D√πng key:", key.substring(0, 8) + "...");
    const genAI = new GoogleGenerativeAI(key);
    const model = genAI.getGenerativeModel({ model: currentModelAI });

    const prompt = `D·ªãch n·ªôi dung sau sang ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n, Kh√¥ng d√πng ƒë·∫°i t·ª´ nh√¢n x∆∞ng, gi·ªØ nguy√™n √Ω nghƒ©a, kh√¥ng th√™m g√¨ c·∫£:\n\n"${text}"`;
    const startTime = Date.now();
    const result = await model.generateContent(prompt);
    const response = result.response;
    const translated = response.text();
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);

    // C·∫≠p nh·∫≠t th·ªëng k√™ s·ª≠ d·ª•ng key n·∫øu c√≥ usageId
    if (response.usageMetadata && usageId) {
      const apiKeyManager = new ApiKeyManager();
      await apiKeyManager.updateUsageStats(usageId, response.usageMetadata, isUserKey);
    }

    console.log(
      `‚úÖ D·ªãch th√†nh c√¥ng sau ${duration}s v·ªõi key ${key.substring(
        0,
        8
      )}...`
    );
    return {
      translated,
      usage: response.usageMetadata,
    };
  } catch (error) {
    const errorMessage = error.message || error.toString();
    console.error("‚ö†Ô∏è L·ªói d·ªãch:", errorMessage);
    throw new Error(`L·ªói d·ªãch: ${errorMessage}`);
  }
};

module.exports = {
  translateText,
};
