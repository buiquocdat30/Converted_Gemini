const { prisma, toObjectId } = require("../config/prismaConfig");
const { GoogleGenerativeAI } = require("@google/generative-ai");

class ApiKeyManager {
  constructor(modelValue) {
    this.modelValue = modelValue;
    this.defaultKeys = [];
    this.lastError = null;
    this.modelInfo = null;
    this.providerModels = null; // Cache danh s√°ch models c·ªßa provider
  }

  // L·∫•y th√¥ng tin model v√† ki·ªÉm tra default keys
  async loadModelInfo() {
    try {
      console.log(`\nüîç ƒêang ki·ªÉm tra th√¥ng tin model "${this.modelValue}"...`);
      
      // Query c∆° b·∫£n cho model
      const modelQuery = {
        where: {
          value: this.modelValue
        },
        include: {
          provider: true
        }
      };

      const model = await prisma.model.findFirst(modelQuery);

      if (!model) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y model:", this.modelValue);
        return null;
      }

      console.log("‚úÖ T√¨m th·∫•y model:", {
        id: model.id,
        value: model.value,
        label: model.label,
        provider: model.provider.name
      });

      // Ch·ªâ query defaultKeys khi c·∫ßn
      if (!this.userKey) {
        const defaultKeys = await prisma.defaultKey.findMany({
          where: {
            modelIds: {
              has: model.id
            },
            status: "ACTIVE"
          }
        });

        if (defaultKeys && defaultKeys.length > 0) {
          console.log(`üìä S·ªë l∆∞·ª£ng default keys: ${defaultKeys.length}`);
          model.defaultKeys = defaultKeys;
        }
      }

      return model;
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i th√¥ng tin model:", error);
      return null;
    }
  }

  // L·∫•y default keys t·ª´ database
  async loadDefaultKeys() {
    try {
      // Ki·ªÉm tra th√¥ng tin model tr∆∞·ªõc
      const modelLoaded = await this.loadModelInfo();
      if (!modelLoaded) {
        return false;
      }

      console.log(
        "\nüîç Ki·ªÉm tra chi ti·∫øt default keys cho model:",
        this.modelValue
      );

      // L·∫•y t·∫•t c·∫£ default keys c·ªßa model d·ª±a v√†o modelIds
      const defaultKeys = await prisma.defaultKey.findMany({
        where: {
          modelIds: {
            has: modelLoaded.id // T√¨m c√°c key c√≥ modelId trong m·∫£ng modelIds
          },
          status: "ACTIVE"
        }
      });

      console.log("\nüìä Th·ªëng k√™ default keys:");
      console.log(`- T·ªïng s·ªë keys t√¨m th·∫•y: ${defaultKeys.length}`);

      if (defaultKeys.length === 0) {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y default key n√†o cho model n√†y!");
        return false;
      }

      console.log("\nüìã Chi ti·∫øt t·ª´ng key:");
      defaultKeys.forEach((key, index) => {
        console.log(`\nüîë Key ${index + 1}: ${key.key.substring(0, 10)}...`);
        console.log(`- Tr·∫°ng th√°i: ${key.status}`);
        console.log(`- S·ªë l·∫ßn s·ª≠ d·ª•ng: ${key.usageCount}`);
        console.log(
          `- L·∫ßn s·ª≠ d·ª•ng cu·ªëi: ${
            key.lastUsedAt
              ? new Date(key.lastUsedAt).toLocaleString()
              : "Ch∆∞a s·ª≠ d·ª•ng"
          }`
        );
        console.log(`- S·ªë l∆∞·ª£ng models h·ªó tr·ª£: ${key.modelIds.length}`);
      });

      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ l∆∞u v√†o this.defaultKeys
      this.defaultKeys = defaultKeys.map((k) => ({
        key: k.key,
        lastUsed: k.lastUsedAt || null,
        requestCount: k.usageCount || 0,
        modelStatus: k.status,
      }));

      return true;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi t·∫£i default keys: ${error.message}`;
      console.error(this.lastError);
      return false;
    }
  }

  // Helper function ƒë·ªÉ l·∫•y th√¥ng tin user key
  async getUserKeyRecord(userId, userkey) {
    try {
      if (!userId || !userkey) {
        console.log("‚ùå Thi·∫øu userId ho·∫∑c userkey");
        return null;
      }

      const userKeyRecord = await prisma.userApiKey.findFirst({
        where: {
          userId: toObjectId(userId),
          key: userkey,
          status: "ACTIVE"
        },
        select: {
          id: true,
          key: true,
          modelIds: true,
          status: true,
          usageCount: true,
          lastUsedAt: true
        }
      });

      if (!userKeyRecord) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y user key record");
        return null;
      }

      // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ models
      const models = await prisma.model.findMany({
        where: {
          id: { in: userKeyRecord.modelIds }
        },
        select: {
          id: true,
          value: true,
          label: true
        }
      });

      console.log("üìù Th√¥ng tin user key:", {
        keyId: userKeyRecord.id,
        modelIds: userKeyRecord.modelIds,
        models: models.map(m => m.value),
        status: userKeyRecord.status,
        usageCount: userKeyRecord.usageCount
      });

      return { ...userKeyRecord, models };
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin user key:", err);
      return null;
    }
  }

  // Helper function ƒë·ªÉ l·∫•y th√¥ng tin default key
  async getDefaultKeyRecord(key) {
    try {
      if (!key) {
        console.log("‚ùå Thi·∫øu key");
        return null;
      }

      const defaultKeyRecord = await prisma.defaultKey.findFirst({
        where: {
          key: key,
          status: "ACTIVE"
        },
        select: {
          id: true,
          key: true,
          modelIds: true,
          status: true,
          usageCount: true,
          lastUsedAt: true
        }
      });

      if (!defaultKeyRecord) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y default key record");
        return null;
      }

      console.log("üìù Th√¥ng tin default key:", {
        keyId: defaultKeyRecord.id,
        modelIds: defaultKeyRecord.modelIds,
        status: defaultKeyRecord.status,
        usageCount: defaultKeyRecord.usageCount
      });

      return defaultKeyRecord;
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin default key:", err);
      return null;
    }
  }

  // Helper function ƒë·ªÉ l·∫•y default key ti·∫øp theo
  async getNextDefaultKey(modelValue = null) {
    try {
      // L·∫•y model ID n·∫øu c√≥ modelValue
      let modelId = null;
      if (modelValue) {
        const model = await prisma.model.findFirst({
          where: { value: modelValue }
        });
        if (!model) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y model:", modelValue);
          return null;
        }
        modelId = model.id;
      }

      // T√¨m default key kh·∫£ d·ª•ng
      const defaultKey = await prisma.defaultKey.findFirst({
        where: {
          status: "ACTIVE",
          ...(modelId && { modelIds: { has: modelId } })
        },
        orderBy: [
          { usageCount: 'asc' },  // ∆Øu ti√™n key √≠t d√πng nh·∫•t
          { lastUsedAt: 'asc' }   // N·∫øu c√πng s·ªë l·∫ßn d√πng, ∆∞u ti√™n key l√¢u ch∆∞a d√πng
        ]
      });

      if (!defaultKey) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y default key kh·∫£ d·ª•ng");
        return null;
      }

      console.log("‚úÖ T√¨m th·∫•y default key kh·∫£ d·ª•ng:", {
        keyId: defaultKey.id,
        modelIds: defaultKey.modelIds,
        usageCount: defaultKey.usageCount,
        lastUsedAt: defaultKey.lastUsedAt
      });

      // C·∫≠p nh·∫≠t th√¥ng tin s·ª≠ d·ª•ng
      await prisma.defaultKey.update({
        where: { id: defaultKey.id },
        data: {
          usageCount: { increment: 1 },
          lastUsedAt: new Date()
        }
      });

      return defaultKey.key;
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y default key:", err);
      return null;
    }
  }

  // L·∫•y key ƒë·ªÉ s·ª≠ d·ª•ng
  async getKeyToUse(userId, userKeys = null, modelValue = null) {
    try {
      // X·ª≠ l√Ω userKeys - c√≥ th·ªÉ l√† array ho·∫∑c single key
      let keysToCheck = [];
      if (Array.isArray(userKeys)) {
        keysToCheck = userKeys;
        console.log(`üîç Ki·ªÉm tra ${userKeys.length} keys t·ª´ danh s√°ch ƒë√£ ch·ªçn`);
      } else if (userKeys) {
        keysToCheck = [userKeys];
        console.log("üîç Ki·ªÉm tra 1 key t·ª´ userKey");
      }

      // N·∫øu c√≥ userKeys v√† userId, ki·ªÉm tra t·ª´ng key
      if (keysToCheck.length > 0 && userId) {
        for (const userKey of keysToCheck) {
          const userKeyRecord = await this.getUserKeyRecord(userId, userKey);
          if (userKeyRecord) {
            // Ki·ªÉm tra model c√≥ trong danh s√°ch modelIds kh√¥ng
            if (modelValue && userKeyRecord.modelIds.length > 0) {
              const model = await prisma.model.findFirst({
                where: { value: modelValue }
              });
              if (!model || !userKeyRecord.modelIds.includes(model.id)) {
                console.log(`‚ùå Model ${modelValue} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi key ${userKey.substring(0, 10)}...`);
                continue; // Th·ª≠ key ti·∫øp theo
              }
            }
            console.log(`‚úÖ T√¨m th·∫•y key kh·∫£ d·ª•ng: ${userKey.substring(0, 10)}...`);
            return userKey;
          } else {
            console.log(`‚ùå Key ${userKey.substring(0, 10)}... kh√¥ng h·ª£p l·ªá, th·ª≠ key ti·∫øp theo...`);
          }
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y key n√†o trong danh s√°ch, th·ª≠ t√¨m key kh√°c t·ª´ user
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y key n√†o kh·∫£ d·ª•ng trong danh s√°ch, th·ª≠ t√¨m key kh√°c t·ª´ user...");
        const nextKey = await this.getAroundKeyFrom(userId, keysToCheck[0], modelValue);
        if (nextKey) {
          console.log("‚úÖ ƒê√£ t√¨m th·∫•y user key kh√°c ƒë·ªÉ s·ª≠ d·ª•ng");
          return nextKey;
        }
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y user key kh√°c, th·ª≠ d√πng default key...");
      }

      // N·∫øu kh√¥ng c√≥ userKeys ho·∫∑c userKeys kh√¥ng kh·∫£ d·ª•ng, t√¨m default key
      console.log("üîç T√¨m default key...");
      const defaultKey = await this.getNextDefaultKey(modelValue);
      if (!defaultKey) {
        throw new Error("Kh√¥ng t√¨m th·∫•y key kh·∫£ d·ª•ng");
      }

      return defaultKey;
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y key:", err);
      throw err;
    }
  }

  // X·ª≠ l√Ω l·ªói 429 (Too Many Requests)
  async handle429Error(userId, key) {
    try {
      console.log(
        `\n‚ö†Ô∏è Ph√°t hi·ªán l·ªói 429 (Too Many Requests) cho key ${key.substring(
          0,
          10
        )}...`
      );

      // Ki·ªÉm tra xem l√† user key hay default key
      let keyRecord = null;
      if (userId) {
        keyRecord = await this.getUserKeyRecord(userId, key);
      }
      
      if (!keyRecord) {
        keyRecord = await this.getDefaultKeyRecord(key);
      }

      if (!keyRecord) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin key");
        throw new Error("KEY_NOT_FOUND");
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i key
      if (userId && keyRecord.id) {
        // N·∫øu l√† user key
        await prisma.userApiKey.update({
          where: { id: keyRecord.id },
          data: {
            status: "EXHAUSTED",
            lastUsedAt: new Date()
          }
        });
        console.log(`üîÑ ƒê√°nh d·∫•u user key ƒë√£ h·∫øt quota`);

        // Th·ª≠ l·∫•y key kh√°c t·ª´ user
        const nextKey = await this.getAroundKeyFrom(userId, key, this.modelValue);
        if (nextKey) {
          console.log("‚úÖ ƒê√£ t√¨m th·∫•y user key kh√°c ƒë·ªÉ s·ª≠ d·ª•ng");
          return { key: nextKey, error: null };
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y key kh√°c, tr·∫£ v·ªÅ l·ªói v·ªõi th√¥ng tin chi ti·∫øt
        const availableModels = keyRecord.models
          .filter(m => m.value !== this.modelValue)
          .map(m => m.value);
        
        throw new Error(JSON.stringify({
          code: "KEY_EXHAUSTED",
          message: "Key ƒë√£ h·∫øt quota cho model n√†y",
          details: {
            currentModel: this.modelValue,
            availableModels: availableModels,
            suggestion: availableModels.length > 0 
              ? "Vui l√≤ng ch·ªçn model kh√°c ho·∫∑c th√™m key m·ªõi" 
              : "Vui l√≤ng th√™m key m·ªõi"
          }
        }));
      } else {
        // N·∫øu l√† default key
        await prisma.defaultKey.update({
          where: { id: keyRecord.id },
          data: {
            status: "EXHAUSTED",
            lastUsedAt: new Date()
          }
        });
        console.log("üîÑ ƒê√°nh d·∫•u default key ƒë√£ h·∫øt quota");

        // Th·ª≠ l·∫•y default key kh√°c
        const nextDefaultKey = await this.getNextDefaultKey();
        if (nextDefaultKey) {
          console.log("‚úÖ ƒê√£ t√¨m th·∫•y default key kh√°c ƒë·ªÉ s·ª≠ d·ª•ng");
          return { key: nextDefaultKey, error: null };
        }

        throw new Error(JSON.stringify({
          code: "DEFAULT_KEY_EXHAUSTED",
          message: "Kh√¥ng c√≤n default key kh·∫£ d·ª•ng",
          details: {
            suggestion: "Vui l√≤ng th√™m key c·ªßa b·∫°n ho·∫∑c th·ª≠ l·∫°i sau"
          }
        }));
      }
    } catch (err) {
      console.error("‚ùå L·ªói khi x·ª≠ l√Ω l·ªói 429:", err);
      if (err.message === "KEY_NOT_FOUND") {
        throw new Error(JSON.stringify({
          code: "KEY_NOT_FOUND",
          message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin key",
          details: {
            suggestion: "Vui l√≤ng ki·ªÉm tra l·∫°i key c·ªßa b·∫°n"
          }
        }));
      }
      throw err;
    }
  }

  // ƒê√°nh d·∫•u key ƒë√£ h·∫øt quota
  async exhaustKey(userId, key) {
    try {
      console.log(
        `\n‚ö†Ô∏è Ph√°t hi·ªán key ${key.substring(0, 10)}... ƒë√£ h·∫øt quota cho model ${
          this.modelValue
        }`
      );

      // Ki·ªÉm tra xem key c√≥ ph·∫£i l√† key c·ªßa user kh√¥ng
      const userKeyRecord = await this.getUserKeyRecord(userId, key);

      if (userKeyRecord) {
        console.log(
          "üîí ƒê√¢y l√† key c·ªßa user, ƒë√°nh d·∫•u l√† EXHAUSTED cho model n√†y"
        );
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.userApiKeyToModel.updateMany({
          where: {
            userApiKeyId: userKeyRecord.id,
            model: {
              value: this.modelValue,
            },
          },
          data: {
            status: "EXHAUSTED",
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i key c·ªßa user cho model ${this.modelValue}`
        );
      } else {
        console.log("üîë ƒê√¢y l√† default key, c·∫≠p nh·∫≠t tr·∫°ng th√°i cho model n√†y");
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.defaultKeyToModel.updateMany({
          where: {
            defaultKey: {
              key: key,
            },
            model: {
              value: this.modelValue,
            },
          },
          data: {
            status: "EXHAUSTED",
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i default key cho model ${this.modelValue}`
        );
      }

      // Ki·ªÉm tra s·ªë l∆∞·ª£ng keys c√≤n l·∫°i cho model n√†y
      const remainingKeys = await prisma.defaultKeyToModel.count({
        where: {
          model: {
            value: this.modelValue,
          },
          status: "ACTIVE",
        },
      });
      console.log(
        `üìä C√≤n ${remainingKeys} keys ƒëang ho·∫°t ƒë·ªông cho model ${this.modelValue}`
      );

      if (remainingKeys === 0) {
        console.log(
          `‚ö†Ô∏è Kh√¥ng c√≤n key n√†o kh·∫£ d·ª•ng cho model ${this.modelValue}!`
        );
        throw new Error(
          `Key ${key.substring(0, 10)}... ƒë√£ kh√¥ng c√≤n s·ª≠ d·ª•ng ƒë∆∞·ª£c cho model ${
            this.modelValue
          }. Vui l√≤ng th·ª≠ model kh√°c ho·∫∑c th√™m key m·ªõi.`
        );
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë√°nh d·∫•u key h·∫øt quota:", error);
      throw error;
    }
  }

  // Ki·ªÉm tra xem c√≥ key n√†o kh·∫£ d·ª•ng kh√¥ng
  async hasAvailableKeys(userKeys, userId, modelValue) {
    try {
      // X·ª≠ l√Ω userKeys - c√≥ th·ªÉ l√† array ho·∫∑c single key
      let keysToCheck = [];
      if (Array.isArray(userKeys)) {
        keysToCheck = userKeys;
        console.log(`üîç Ki·ªÉm tra ${userKeys.length} keys t·ª´ danh s√°ch ƒë√£ ch·ªçn`);
      } else if (userKeys) {
        keysToCheck = [userKeys];
        console.log("üîç Ki·ªÉm tra 1 key t·ª´ userKey");
      }

      // Ki·ªÉm tra userKeys v√† userId
      if (!userId) {
        console.log("‚ùå userId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        return false;
      }

      // T√¨m model ID t·ª´ model value
      let modelId = null;
      if (modelValue) {
        const model = await prisma.model.findFirst({
          where: {
            value: modelValue
          },
          include: {
            provider: true
          }
        });
        if (!model) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y model:", modelValue);
          return false;
        }
        modelId = model.id;
        console.log("üîç T√¨m th·∫•y model ID:", modelId, "cho model value:", modelValue);
      }

      // N·∫øu c√≥ userKeys, ki·ªÉm tra t·ª´ng key
      if (keysToCheck.length > 0) {
        for (const userKey of keysToCheck) {
          const userKeyRecord = await this.getUserKeyRecord(userId, userKey);
          if (userKeyRecord) {
            // Ki·ªÉm tra model c√≥ trong danh s√°ch modelIds kh√¥ng
            if (modelValue && userKeyRecord.modelIds.length > 0) {
              const model = await prisma.model.findFirst({
                where: { value: modelValue }
              });
              if (!model || !userKeyRecord.modelIds.includes(model.id)) {
                console.log(`‚ùå Model ${modelValue} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi key ${userKey.substring(0, 10)}...`);
                continue; // Th·ª≠ key ti·∫øp theo
              }
            }
            console.log(`‚úÖ T√¨m th·∫•y key kh·∫£ d·ª•ng: ${userKey.substring(0, 10)}...`);
            return true;
          }
        }
        console.log("‚ùå Kh√¥ng c√≥ key n√†o trong danh s√°ch kh·∫£ d·ª•ng");
        return false;
      }

      // N·∫øu kh√¥ng c√≥ userKeys, ki·ªÉm tra default keys
      try {
        // 1. Ki·ªÉm tra model t·ªìn t·∫°i
        if (!modelId) {
          console.log("‚ùå Kh√¥ng c√≥ modelId ƒë·ªÉ ki·ªÉm tra default keys");
          return false;
        }

        // 2. T√¨m c√°c DefaultKey c√≥ ch·ª©a modelId trong m·∫£ng modelIds
        const defaultKeys = await prisma.defaultKey.findMany({
          where: {
            status: 'ACTIVE',
            modelIds: {
              has: modelId  // Prisma h·ªó tr·ª£ m·∫£ng v·ªõi to√°n t·ª≠ `has`
            }
          }
        });

        if (!defaultKeys || defaultKeys.length === 0) {
          console.log("‚ùå Kh√¥ng c√≥ default key n√†o cho model n√†y:", modelValue);
          return false;
        }

        console.log("üìù S·ªë l∆∞·ª£ng default keys kh·∫£ d·ª•ng:", defaultKeys.length);
        return true;

      } catch (err) {
        console.error("‚ùå L·ªói khi ki·ªÉm tra default keys:", err);
        this.lastError = err.message;
        return false;
      }

    } catch (err) {
      console.error("‚ùå L·ªói khi ki·ªÉm tra keys:", err);
      this.lastError = err.message;
      return false;
    }
  }

  // L·∫•y danh s√°ch models c·ªßa provider t·ª´ database
  async getProviderModels(key) {
    try {
      if (!this.providerModels) {
        // X√°c ƒë·ªãnh provider t·ª´ format key
        const isOpenAI = key.startsWith('sk-');
        
        // T√¨m provider d·ª±a v√†o format key
        const provider = await prisma.provider.findFirst({
          where: {
            models: {
              some: {
                value: {
                  contains: isOpenAI ? 'gpt' : 'gemini'
                }
              }
            }
          },
          include: {
            models: {
              select: {
                id: true,
                value: true,
                label: true,
                description: true
              }
            }
          }
        });

        if (!provider) {
          throw new Error(`Kh√¥ng t√¨m th·∫•y provider cho key ${key.substring(0, 10)}...`);
        }

        this.providerModels = provider.models;
        console.log(`\n‚úÖ ƒê√£ l·∫•y ${this.providerModels.length} models c·ªßa provider ${provider.name}:`);
        this.providerModels.forEach(model => {
          console.log(`  ‚Ä¢ ${model.label} (${model.value})`);
        });
      }
      return this.providerModels;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi l·∫•y danh s√°ch models: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  // X√°c ƒë·ªãnh provider v√† model t·ª´ key
  async determineProviderAndModel(key, userId = null) {
    try {
      console.log(`\nüîç ƒêang x√°c ƒë·ªãnh provider v√† model cho key ${key.substring(0, 10)}...`);

      // X√°c ƒë·ªãnh provider t·ª´ format key
      let provider;
      if (key.startsWith('AI')) {
        provider = 'Google';
      } else if (key.startsWith('sk-')) {
        provider = 'OpenAI';
      } else {
        throw new Error('Key kh√¥ng h·ª£p l·ªá, kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c provider');
      }

      // L·∫•y provider t·ª´ database
      const providerRecord = await prisma.provider.findFirst({
        where: { name: provider }
      });

      if (!providerRecord) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y provider ${provider}`);
      }

      // L·∫•y t·∫•t c·∫£ models c·ªßa provider
      const allProviderModels = await prisma.model.findMany({
        where: {
          providerId: providerRecord.id
        }
      });

      if (!allProviderModels || allProviderModels.length === 0) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y models c·ªßa provider ${provider}`);
      }

      let modelIds = [];

      // N·∫øu c√≥ userId, th·ª≠ l·∫•y modelIds t·ª´ c√°c key kh√°c c·ªßa user
      if (userId) {
        console.log(`\nüîç ƒêang t√¨m c√°c key kh√°c c·ªßa user ${userId}...`);
        
        // L·∫•y t·∫•t c·∫£ key kh√°c c·ªßa user (tr·ª´ key hi·ªán t·∫°i)
        const userKeys = await prisma.userApiKey.findMany({
          where: {
            userId: toObjectId(userId),
            key: { not: key },
            status: 'ACTIVE'
          }
        });

        console.log(`üìä T√¨m th·∫•y ${userKeys.length} key kh√°c c·ªßa user`);

        if (userKeys && userKeys.length > 0) {
          // G·ªôp t·∫•t c·∫£ modelIds t·ª´ c√°c key kh√°c
          modelIds = [...new Set(userKeys.flatMap(k => k.modelIds))];
          console.log(`‚úÖ T√¨m th·∫•y ${modelIds.length} models t·ª´ c√°c key kh√°c c·ªßa user`);
        } else {
          console.log('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y key kh√°c c·ªßa user, th·ª≠ t√¨m t·ª´ default keys...');
          
          // N·∫øu kh√¥ng c√≥ key kh√°c, l·∫•y t·ª´ default keys
          const defaultKeys = await prisma.defaultKey.findMany({
            where: {
              status: 'ACTIVE'
            }
          });

          if (defaultKeys && defaultKeys.length > 0) {
            // G·ªôp t·∫•t c·∫£ modelIds t·ª´ default keys
            modelIds = [...new Set(defaultKeys.flatMap(k => k.modelIds))];
            console.log(`‚úÖ T√¨m th·∫•y ${modelIds.length} models t·ª´ default keys`);
          }
        }
      }

      // N·∫øu v·∫´n kh√¥ng c√≥ modelIds, l·∫•y t·∫•t c·∫£ model c·ªßa provider
      if (modelIds.length === 0) {
        console.log('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y modelIds t·ª´ key kh√°c, s·ª≠ d·ª•ng t·∫•t c·∫£ model c·ªßa provider');
        modelIds = allProviderModels.map(m => m.id);
      }

      // L·ªçc c√°c modelIds ƒë·ªÉ ch·ªâ l·∫•y model c·ªßa provider hi·ªán t·∫°i
      const validModelIds = modelIds.filter(id => 
        allProviderModels.some(m => m.id === id)
      );

      // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa c√°c model ƒë∆∞·ª£c ch·ªçn
      const selectedModels = allProviderModels.filter(m => validModelIds.includes(m.id));

      console.log("\nüìã K·∫øt qu·∫£ x√°c ƒë·ªãnh provider v√† model:", {
        provider: provider,
        totalModels: allProviderModels.length,
        selectedModels: selectedModels.length,
        modelValues: selectedModels.map(m => m.value)
      });

      return {
        provider: provider,
        modelIds: validModelIds,
        models: selectedModels
      };
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi x√°c ƒë·ªãnh provider v√† model: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  // Ki·ªÉm tra key c√≥ h·ª£p l·ªá kh√¥ng
  async validateKey(key) {
    try {
      console.log(`\nüîç ƒêang ki·ªÉm tra key ${key.substring(0, 10)}...`);
      
      // X√°c ƒë·ªãnh provider v√† model t·ª´ key
      const { provider, model } = await this.determineProviderAndModel(key);
      
      if (provider === 'google') {
        try {
          // Kh·ªüi t·∫°o model Gemini v·ªõi model value t·ª´ database
          const genAI = new GoogleGenerativeAI(key);
          const geminiModel = genAI.getGenerativeModel({ model: model.value });

          // Th·ª≠ m·ªôt request ƒë∆°n gi·∫£n
          const prompt = "Test connection";
          const result = await geminiModel.generateContent(prompt);
          const response = await result.response;
          
          console.log(`‚úÖ Key Google h·ª£p l·ªá v√† c√≥ th·ªÉ s·ª≠ d·ª•ng v·ªõi model ${model.label}`);
          return true;
        } catch (error) {
          console.error(`‚ùå Key Google kh√¥ng h·ª£p l·ªá v·ªõi model ${model.label}:`, error.message);
          return false;
        }
      } else {
        // TODO: Th√™m validation cho OpenAI key
        console.log("‚ö†Ô∏è Ch∆∞a h·ªó tr·ª£ validate OpenAI key");
        return true; // T·∫°m th·ªùi cho ph√©p lu√¥n
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi validate key:", error.message);
      return false;
    }
  }

  // L·∫•y th√¥ng b√°o l·ªói cu·ªëi c√πng
  getLastError() {
    return this.lastError;
  }

  // L·∫•y t·∫•t c·∫£ API keys c·ªßa user
  async getUserKeys(userId) {
    try {
      console.log(`\nüîç ƒêang l·∫•y danh s√°ch API keys c·ªßa user ${userId}...`);
      
      const keys = await prisma.userApiKey.findMany({
        where: { userId },
        select: {
          id: true,
          key: true,
          label: true,
          status: true,
          modelIds: true,
          usageCount: true,
          lastUsedAt: true,
          createdAt: true,
          updatedAt: true
        }
      });

      // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ models cho m·ªói key
      const keysWithModels = await Promise.all(keys.map(async (key) => {
        const models = await prisma.model.findMany({
          where: { id: { in: key.modelIds } },
          select: {
            id: true,
            value: true,
            label: true,
            description: true
          }
        });
        return { ...key, models };
      }));

      console.log(`‚úÖ ƒê√£ l·∫•y ${keysWithModels.length} keys c·ªßa user`);
      return keysWithModels;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi l·∫•y danh s√°ch keys: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  // T·∫°o API key m·ªõi cho user
  async createUserKey(userId, key, label = null) {
    try {
      console.log(`\nüîë ƒêang t·∫°o API key m·ªõi cho user ${userId}...`);
      
      // Ki·ªÉm tra key ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingKey = await prisma.userApiKey.findFirst({
        where: { 
          key: key,
          OR: [
            { userId: userId },
            { userId: { not: userId } }
          ]
        }
      });

      if (existingKey) {
        if (existingKey.userId === userId) {
          throw new Error('B·∫°n ƒë√£ th√™m key n√†y tr∆∞·ªõc ƒë√≥');
        } else {
          throw new Error('Key n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi d√πng kh√°c');
        }
      }

      // X√°c ƒë·ªãnh provider v√† models t·ª´ key
      const { provider, models } = await this.determineProviderAndModel(key);
      
      // Ki·ªÉm tra key c√≥ h·ª£p l·ªá kh√¥ng
      const isValid = await this.validateKey(key);
      if (!isValid) {
        throw new Error('Key kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p model n√†y');
      }

      console.log(`\nüìù ƒêang t·∫°o key m·ªõi cho provider ${provider}:`);
      console.log(`- S·ªë l∆∞·ª£ng models s·∫Ω k·∫øt n·ªëi: ${models.length}`);
      console.log("- Danh s√°ch models:");
      models.forEach(model => {
        console.log(`  ‚Ä¢ ${model.label} (${model.value})`);
      });

      // T·∫°o key m·ªõi v·ªõi t·∫•t c·∫£ models c·ªßa provider
      const newKey = await prisma.userApiKey.create({
        data: {
          userId,
          key,
          label: label || `${provider.toUpperCase()} Key`,
          status: 'ACTIVE',
          modelIds: models.map(model => model.id),
          usageCount: 0
        }
      });

      console.log(`\n‚úÖ ƒê√£ t·∫°o key m·ªõi th√†nh c√¥ng:`);
      console.log(`- Key: ${newKey.key.substring(0, 10)}...`);
      console.log(`- Provider: ${provider}`);
      console.log(`- S·ªë l∆∞·ª£ng models: ${newKey.modelIds.length}`);

      return { ...newKey, models };
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi t·∫°o key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  // X√≥a API key c·ªßa user
  async deleteUserKey(userId, keyId) {
    try {
      if (!keyId) {
        throw new Error('ID c·ªßa key kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      console.log(`\nüóëÔ∏è ƒêang x√≥a API key ${keyId} c·ªßa user ${userId}...`);
      
      // Ki·ªÉm tra key c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user kh√¥ng
      const key = await prisma.userApiKey.findUnique({
        where: {
          id: keyId
        }
      });

      if (!key) {
        throw new Error('Kh√¥ng t√¨m th·∫•y key');
      }

      if (key.userId !== userId) {
        throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a key n√†y');
      }

      // X√≥a key
      await prisma.userApiKey.delete({
        where: {
          id: keyId
        }
      });

      console.log(`‚úÖ ƒê√£ x√≥a key th√†nh c√¥ng`);
      return true;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi x√≥a key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i API key
  async updateKeyStatus(userId, keyId, status) {
    try {
      console.log(`\nüîÑ ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i key ${keyId} th√†nh ${status}...`);
      
      const key = await prisma.userApiKey.findFirst({
        where: {
          id: keyId,
          userId: userId
        }
      });

      if (!key) {
        throw new Error('Kh√¥ng t√¨m th·∫•y key ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t key n√†y');
      }

      const updatedKey = await prisma.userApiKey.update({
        where: { id: keyId },
        data: { status }
      });

      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i key th√†nh c√¥ng`);
      return updatedKey;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  async getAroundKeyFrom(userId, currentKey, modelValue) {
    try {
      // L·∫•y model ID
      const model = await prisma.model.findFirst({
        where: { value: modelValue }
      });
      if (!model) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y model:", modelValue);
        return null;
      }

      // T√¨m key kh√°c c·ªßa user c√≥ c√πng model
      const nextKey = await prisma.userApiKey.findFirst({
        where: {
          userId: toObjectId(userId),
          key: { not: currentKey },
          status: "ACTIVE",
          modelIds: { has: model.id }
        },
        orderBy: { lastUsedAt: 'asc' } // ∆Øu ti√™n key √≠t d√πng nh·∫•t
      });

      if (nextKey) {
        console.log("‚úÖ T√¨m th·∫•y key kh√°c:", nextKey.key.substring(0, 10) + "...");
        return nextKey.key;
      }

      console.log("‚ùå Kh√¥ng t√¨m th·∫•y key kh√°c c·ªßa user");
      return null;
    } catch (err) {
      console.error("‚ùå L·ªói khi t√¨m key kh√°c:", err);
      return null;
    }
  }
}

module.exports = ApiKeyManager;