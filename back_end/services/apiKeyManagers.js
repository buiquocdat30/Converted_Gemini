const prisma = require("../config/prismaConfig");

class ApiKeyManager {
  constructor(modelValue) {
    this.modelValue = modelValue;
    this.defaultKeys = [];
  }

  // L·∫•y default keys t·ª´ database
  async loadDefaultKeys() {
    try {
      // T√¨m model ID d·ª±a tr√™n modelValue
      const model = await prisma.model.findFirst({
        where: { value: this.modelValue }
      });

      if (!model) {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y model trong database");
        return;
      }

      // L·∫•y t·∫•t c·∫£ default keys c·ªßa model
      const defaultKeys = await prisma.defaultKey.findMany({
        where: { modelId: model.id }
      });

      this.defaultKeys = defaultKeys.map(k => k.key);
      console.log(`üì• ƒê√£ t·∫£i ${this.defaultKeys.length} default keys`);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i default keys:", error);
    }
  }

  // L·∫•y key ƒë·ªÉ s·ª≠ d·ª•ng
  async getKeyToUse(userId, userKey = null) {
    try {
      // N·∫øu c√≥ userKey, ki·ªÉm tra xem key c√≥ h·ª£p l·ªá kh√¥ng
      if (userKey) {
        const userKeyRecord = await prisma.userApiKey.findFirst({
          where: {
            userId,
            key: userKey,
            status: "ACTIVE",
            model: {
              value: this.modelValue
            }
          }
        });

        if (userKeyRecord) {
          console.log("üîë S·ª≠ d·ª•ng key c·ªßa user");
          return userKey;
        }
      }

      // N·∫øu kh√¥ng c√≥ userKey ho·∫∑c key kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng default key
      if (this.defaultKeys.length === 0) {
        await this.loadDefaultKeys();
      }

      if (this.defaultKeys.length === 0) {
        throw new Error("Kh√¥ng c√≥ key n√†o kh·∫£ d·ª•ng");
      }

      // L·∫•y m·ªôt key ng·∫´u nhi√™n t·ª´ danh s√°ch default keys
      const key = this.defaultKeys[Math.floor(Math.random() * this.defaultKeys.length)];
      console.log("üîë S·ª≠ d·ª•ng default key");
      return key;
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y key:", error);
      throw error;
    }
  }

  // X·ª≠ l√Ω l·ªói 429 (Too Many Requests)
  async handle429Error(userId, key) {
    try {
      // Ki·ªÉm tra xem key c√≥ ph·∫£i l√† key c·ªßa user kh√¥ng
      const userKeyRecord = await prisma.userApiKey.findFirst({
        where: {
          userId,
          key,
          model: {
            value: this.modelValue
          }
        }
      });

      if (userKeyRecord) {
        // N·∫øu l√† key c·ªßa user, c·∫≠p nh·∫≠t tr·∫°ng th√°i
        await prisma.userApiKey.updateMany({
          where: {
            userId,
            key,
            model: {
              value: this.modelValue
            }
          },
          data: {
            status: "COOLDOWN"
          }
        });
      } else {
        // N·∫øu l√† default key, x√≥a kh·ªèi danh s√°ch
        const index = this.defaultKeys.indexOf(key);
        if (index !== -1) {
          this.defaultKeys.splice(index, 1);
        }
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi x·ª≠ l√Ω l·ªói 429:", error);
    }
  }

  // ƒê√°nh d·∫•u key ƒë√£ h·∫øt quota
  async exhaustKey(userId, key) {
    try {
      // Ki·ªÉm tra xem key c√≥ ph·∫£i l√† key c·ªßa user kh√¥ng
      const userKeyRecord = await prisma.userApiKey.findFirst({
        where: {
          userId,
          key,
          model: {
            value: this.modelValue
          }
        }
      });

      if (userKeyRecord) {
        // N·∫øu l√† key c·ªßa user, c·∫≠p nh·∫≠t tr·∫°ng th√°i
        await prisma.userApiKey.updateMany({
          where: {
            userId,
            key,
            model: {
              value: this.modelValue
            }
          },
          data: {
            status: "EXHAUSTED"
          }
        });
      } else {
        // N·∫øu l√† default key, x√≥a kh·ªèi danh s√°ch
        const index = this.defaultKeys.indexOf(key);
        if (index !== -1) {
          this.defaultKeys.splice(index, 1);
        }
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë√°nh d·∫•u key h·∫øt quota:", error);
    }
  }
}

module.exports = ApiKeyManager;
