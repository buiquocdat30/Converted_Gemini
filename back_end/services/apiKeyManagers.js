const prisma = require("../config/prismaConfig");

class ApiKeyManager {
  constructor(modelValue) {
    this.modelValue = modelValue;
    this.defaultKeys = [];
    this.lastError = null;
    this.modelInfo = null;
  }

  // L·∫•y th√¥ng tin model v√† ki·ªÉm tra default keys
  async loadModelInfo() {
    try {
      console.log(`\nüîç ƒêang ki·ªÉm tra th√¥ng tin model "${this.modelValue}"...`);
      const model = await prisma.model.findFirst({
        where: { value: this.modelValue },
        include: {
          provider: true,
          defaultKeys: {
            where: { status: "ACTIVE" },
          },
        },
      });

      if (!model) {
        this.lastError = `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y model "${this.modelValue}" trong database`;
        console.log(this.lastError);
        return false;
      }

      this.modelInfo = model;
      console.log(`\nüìä Th√¥ng tin model:`);
      console.log(`- T√™n: ${model.label}`);
      console.log(`- Provider: ${model.provider.name}`);
      console.log(`- S·ªë l∆∞·ª£ng default keys: ${model.defaultKeys.length}`);
      console.log(`- Gi·ªõi h·∫°n RPM: ${model.rpm}`);
      console.log(`- Gi·ªõi h·∫°n TPM: ${model.tpm}`);
      console.log(`- Gi·ªõi h·∫°n RPD: ${model.rpd}`);

      if (model.defaultKeys.length === 0) {
        this.lastError = `‚ö†Ô∏è Kh√¥ng c√≥ default key n√†o cho model "${this.modelValue}". Vui l√≤ng th√™m key m·ªõi ho·∫∑c li√™n h·ªá admin.`;
        console.log(this.lastError);
        return false;
      }

      return true;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi t·∫£i th√¥ng tin model: ${error.message}`;
      console.error(this.lastError);
      return false;
    }
  }

  // L·∫•y default keys t·ª´ database
  async loadDefaultKeys() {
    try {
      // Ki·ªÉm tra th√¥ng tin model tr∆∞·ªõc
      const modelLoaded = await this.loadModelInfo();
      if (!modelLoaded) {
        return false;
      }

      console.log(
        "\nüîç Ki·ªÉm tra chi ti·∫øt default keys cho model:",
        this.modelValue
      );

      // L·∫•y t·∫•t c·∫£ default keys c·ªßa model th√¥ng qua b·∫£ng trung gian DefaultKeyToModel
      const defaultKeys = await prisma.defaultKey.findMany({
        where: {
          models: {
            some: {
              model: {
                value: this.modelValue,
              },
              status: "ACTIVE", // Ch·ªâ l·∫•y c√°c key c√≥ tr·∫°ng th√°i ACTIVE cho model n√†y
            },
          },
        },
        include: {
          models: {
            where: {
              model: {
                value: this.modelValue,
              },
            },
            include: {
              model: true,
            },
          },
        },
      });

      console.log("\nüìä Th·ªëng k√™ default keys:");
      console.log(`- T·ªïng s·ªë keys t√¨m th·∫•y: ${defaultKeys.length}`);

      if (defaultKeys.length === 0) {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y default key n√†o cho model n√†y!");
        return false;
      }

      console.log("\nüìã Chi ti·∫øt t·ª´ng key:");
      defaultKeys.forEach((key, index) => {
        const modelStatus = key.models.find(
          (m) => m.model.value === this.modelValue
        );
        console.log(`\nüîë Key ${index + 1}: ${key.key.substring(0, 10)}...`);
        console.log(
          `- Tr·∫°ng th√°i cho model ${this.modelValue}: ${
            modelStatus?.status || "UNKNOWN"
          }`
        );
        console.log(
          `- S·ªë l·∫ßn s·ª≠ d·ª•ng cho model n√†y: ${modelStatus?.usageCount || 0}`
        );
        console.log(
          `- L·∫ßn s·ª≠ d·ª•ng cu·ªëi cho model n√†y: ${
            modelStatus?.lastUsedAt
              ? new Date(modelStatus.lastUsedAt).toLocaleString()
              : "Ch∆∞a s·ª≠ d·ª•ng"
          }`
        );
        console.log(`- T·ªïng s·ªë models c√≥ th·ªÉ d√πng: ${key.models.length}`);
      });

      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ l∆∞u v√†o this.defaultKeys
      this.defaultKeys = defaultKeys.map((k) => {
        const modelStatus = k.models.find(
          (m) => m.model.value === this.modelValue
        );
        return {
          key: k.key,
          lastUsed: modelStatus?.lastUsedAt || null,
          requestCount: modelStatus?.usageCount || 0,
          modelStatus: modelStatus?.status || "UNKNOWN",
        };
      });

      return true;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi t·∫£i default keys: ${error.message}`;
      console.error(this.lastError);
      return false;
    }
  }

  // L·∫•y key ƒë·ªÉ s·ª≠ d·ª•ng
  async getKeyToUse(userId, userKey = null) {
    try {
      console.log("\nüîë B·∫Øt ƒë·∫ßu qu√° tr√¨nh l·∫•y key ƒë·ªÉ s·ª≠ d·ª•ng...");
      this.lastError = null;

      // N·∫øu c√≥ userKey, ki·ªÉm tra xem key c√≥ h·ª£p l·ªá kh√¥ng
      if (userKey) {
        console.log("üîç Ki·ªÉm tra user key...");
        const userKeyRecord = await prisma.userApiKey.findFirst({
          where: {
            userId,
            key: userKey,
            models: {
              some: {
                model: {
                  value: this.modelValue,
                },
                status: "ACTIVE",
              },
            },
          },
          include: {
            models: {
              where: {
                model: {
                  value: this.modelValue,
                },
              },
              include: {
                model: true,
              },
            },
            usageStats: {
              orderBy: {
                lastUsedAt: "desc",
              },
              take: 1,
            },
          },
        });

        if (userKeyRecord) {
          const modelStatus = userKeyRecord.models.find(
            (m) => m.model.value === this.modelValue
          );
          if (modelStatus && modelStatus.status === "ACTIVE") {
            console.log("‚úÖ User key h·ª£p l·ªá v√† ƒëang ho·∫°t ƒë·ªông cho model n√†y");
            console.log(`- Label: ${userKeyRecord.label || "Kh√¥ng c√≥ nh√£n"}`);
            console.log(`- Model: ${this.modelValue}`);
            console.log(`- Tr·∫°ng th√°i: ${modelStatus.status}`);
            console.log(
              `- L·∫ßn s·ª≠ d·ª•ng cu·ªëi: ${
                userKeyRecord.usageStats[0]?.lastUsedAt
                  ? new Date(
                      userKeyRecord.usageStats[0].lastUsedAt
                    ).toLocaleString()
                  : "Ch∆∞a s·ª≠ d·ª•ng"
              }`
            );
            console.log(
              `- S·ªë request: ${userKeyRecord.usageStats[0]?.requestCount || 0}`
            );
            return userKey;
          } else {
            this.lastError = `‚ö†Ô∏è Key c·ªßa user kh√¥ng kh·∫£ d·ª•ng cho model ${
              this.modelValue
            } (Tr·∫°ng th√°i: ${modelStatus?.status || "Kh√¥ng t√¨m th·∫•y"})`;
            console.log(this.lastError);
          }
        } else {
          this.lastError = `‚ö†Ô∏è Key c·ªßa user kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒë∆∞·ª£c li√™n k·∫øt v·ªõi model ${this.modelValue}`;
          console.log(this.lastError);
        }
      }

      // N·∫øu kh√¥ng c√≥ userKey ho·∫∑c key kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng default key
      console.log("üì• ƒêang t√¨m default key...");
      const defaultKeyRecord = await prisma.defaultKeyToModel.findFirst({
        where: {
          model: {
            value: this.modelValue,
          },
          status: "ACTIVE",
        },
        include: {
          defaultKey: true,
          model: true,
        },
        orderBy: {
          updatedAt: "asc",
        },
      });

      if (defaultKeyRecord) {
        console.log("\n‚úÖ ƒê√£ t√¨m th·∫•y default key kh·∫£ d·ª•ng:");
        console.log(
          `- Key: ${defaultKeyRecord.defaultKey.key.substring(0, 10)}...`
        );
        console.log(`- Model: ${defaultKeyRecord.model.value}`);
        console.log(`- Tr·∫°ng th√°i: ${defaultKeyRecord.status}`);
        return defaultKeyRecord.defaultKey.key;
      }

      this.lastError = `‚ö†Ô∏è Kh√¥ng c√≥ key n√†o kh·∫£ d·ª•ng cho model "${this.modelValue}". Vui l√≤ng th√™m key m·ªõi ho·∫∑c li√™n h·ªá admin.`;
      throw new Error(this.lastError);
    } catch (error) {
      this.lastError = error.message;
      console.error("‚ùå L·ªói khi l·∫•y key:", error);
      throw error;
    }
  }

  // X·ª≠ l√Ω l·ªói 429 (Too Many Requests)
  async handle429Error(userId, key) {
    try {
      console.log(
        `\n‚ö†Ô∏è Ph√°t hi·ªán l·ªói 429 (Too Many Requests) cho key ${key.substring(
          0,
          10
        )}... v·ªõi model ${this.modelValue}`
      );

      // Ki·ªÉm tra xem key c√≥ ph·∫£i l√† key c·ªßa user kh√¥ng
      const userKeyRecord = await prisma.userApiKey.findFirst({
        where: {
          userId,
          key,
          models: {
            some: {
              model: {
                value: this.modelValue,
              },
            },
          },
        },
        include: {
          models: {
            where: {
              model: {
                value: this.modelValue,
              },
            },
          },
        },
      });

      if (userKeyRecord) {
        console.log(
          "üîí ƒê√¢y l√† key c·ªßa user, chuy·ªÉn sang tr·∫°ng th√°i COOLDOWN cho model n√†y"
        );
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.userApiKeyToModel.updateMany({
          where: {
            userApiKeyId: userKeyRecord.id,
            model: {
              value: this.modelValue,
            },
          },
          data: {
            status: "COOLDOWN",
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i key c·ªßa user cho model ${this.modelValue}`
        );
      } else {
        console.log("üîë ƒê√¢y l√† default key, c·∫≠p nh·∫≠t tr·∫°ng th√°i cho model n√†y");
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.defaultKeyToModel.updateMany({
          where: {
            defaultKey: {
              key: key,
            },
            model: {
              value: this.modelValue,
            },
          },
          data: {
            status: "COOLDOWN",
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i default key cho model ${this.modelValue}`
        );
      }

      // Ki·ªÉm tra s·ªë l∆∞·ª£ng keys c√≤n l·∫°i cho model n√†y
      const remainingKeys = await prisma.defaultKeyToModel.count({
        where: {
          model: {
            value: this.modelValue,
          },
          status: "ACTIVE",
        },
      });
      console.log(
        `üìä C√≤n ${remainingKeys} keys ƒëang ho·∫°t ƒë·ªông cho model ${this.modelValue}`
      );
    } catch (error) {
      console.error("‚ùå L·ªói khi x·ª≠ l√Ω l·ªói 429:", error);
    }
  }

  // ƒê√°nh d·∫•u key ƒë√£ h·∫øt quota
  async exhaustKey(userId, key) {
    try {
      console.log(
        `\n‚ö†Ô∏è Ph√°t hi·ªán key ${key.substring(0, 10)}... ƒë√£ h·∫øt quota cho model ${
          this.modelValue
        }`
      );

      // Ki·ªÉm tra xem key c√≥ ph·∫£i l√† key c·ªßa user kh√¥ng
      const userKeyRecord = await prisma.userApiKey.findFirst({
        where: {
          userId,
          key,
          models: {
            some: {
              model: {
                value: this.modelValue,
              },
            },
          },
        },
        include: {
          models: {
            where: {
              model: {
                value: this.modelValue,
              },
            },
          },
        },
      });

      if (userKeyRecord) {
        console.log(
          "üîí ƒê√¢y l√† key c·ªßa user, ƒë√°nh d·∫•u l√† EXHAUSTED cho model n√†y"
        );
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.userApiKeyToModel.updateMany({
          where: {
            userApiKeyId: userKeyRecord.id,
            model: {
              value: this.modelValue,
            },
          },
          data: {
            status: "EXHAUSTED",
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i key c·ªßa user cho model ${this.modelValue}`
        );
      } else {
        console.log("üîë ƒê√¢y l√† default key, c·∫≠p nh·∫≠t tr·∫°ng th√°i cho model n√†y");
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.defaultKeyToModel.updateMany({
          where: {
            defaultKey: {
              key: key,
            },
            model: {
              value: this.modelValue,
            },
          },
          data: {
            status: "EXHAUSTED",
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i default key cho model ${this.modelValue}`
        );
      }

      // Ki·ªÉm tra s·ªë l∆∞·ª£ng keys c√≤n l·∫°i cho model n√†y
      const remainingKeys = await prisma.defaultKeyToModel.count({
        where: {
          model: {
            value: this.modelValue,
          },
          status: "ACTIVE",
        },
      });
      console.log(
        `üìä C√≤n ${remainingKeys} keys ƒëang ho·∫°t ƒë·ªông cho model ${this.modelValue}`
      );

      if (remainingKeys === 0) {
        console.log(
          `‚ö†Ô∏è Kh√¥ng c√≤n key n√†o kh·∫£ d·ª•ng cho model ${this.modelValue}!`
        );
        throw new Error(
          `Key ${key.substring(0, 10)}... ƒë√£ kh√¥ng c√≤n s·ª≠ d·ª•ng ƒë∆∞·ª£c cho model ${
            this.modelValue
          }. Vui l√≤ng th·ª≠ model kh√°c ho·∫∑c th√™m key m·ªõi.`
        );
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë√°nh d·∫•u key h·∫øt quota:", error);
      throw error;
    }
  }

  // Ki·ªÉm tra xem c√≥ key n√†o kh·∫£ d·ª•ng kh√¥ng
  async hasAvailableKeys(userId, userKey = null) {
    try {
      console.log(
        `\nüîç Ki·ªÉm tra keys kh·∫£ d·ª•ng cho model ${this.modelValue}...`
      );

      // Ki·ªÉm tra userKey n·∫øu c√≥
      if (userKey) {
        console.log("üîë Ki·ªÉm tra user key...");
        const userKeyRecord = await prisma.userApiKey.findFirst({
          where: {
            userId,
            key: userKey,
            models: {
              some: {
                model: {
                  value: this.modelValue,
                },
                status: "ACTIVE",
              },
            },
          },
        });
        if (userKeyRecord) {
          console.log("‚úÖ User key kh·∫£ d·ª•ng cho model n√†y");
          return true;
        }
        console.log("‚ùå User key kh√¥ng kh·∫£ d·ª•ng cho model n√†y");
      }

      // Ki·ªÉm tra default keys
      const availableKeys = await prisma.defaultKeyToModel.count({
        where: {
          model: {
            value: this.modelValue,
          },
          status: "ACTIVE",
        },
      });

      console.log(
        `üìä S·ªë l∆∞·ª£ng default keys kh·∫£ d·ª•ng cho model ${this.modelValue}: ${availableKeys}`
      );
      return availableKeys > 0;
    } catch (error) {
      console.error("‚ùå L·ªói khi ki·ªÉm tra key kh·∫£ d·ª•ng:", error);
      return false;
    }
  }

  // L·∫•y th√¥ng b√°o l·ªói cu·ªëi c√πng
  getLastError() {
    return this.lastError;
  }
}

module.exports = ApiKeyManager;
