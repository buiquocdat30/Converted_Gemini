const prisma = require("../config/prismaConfig");

class ApiKeyManager {
  constructor(modelValue) {
    this.modelValue = modelValue;
    this.defaultKeys = [];
    this.lastError = null;
    this.modelInfo = null;
  }

  // L·∫•y th√¥ng tin model v√† ki·ªÉm tra default keys
  async loadModelInfo() {
    try {
      console.log(`\nüîç ƒêang ki·ªÉm tra th√¥ng tin model "${this.modelValue}"...`);
      const model = await prisma.model.findFirst({
        where: { value: this.modelValue },
        include: {
          provider: true,
          defaultKeys: {
            where: { status: "ACTIVE" }
          }
        }
      });

      if (!model) {
        this.lastError = `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y model "${this.modelValue}" trong database`;
        console.log(this.lastError);
        return false;
      }

      this.modelInfo = model;
      console.log(`\nüìä Th√¥ng tin model:`);
      console.log(`- T√™n: ${model.label}`);
      console.log(`- Provider: ${model.provider.name}`);
      console.log(`- S·ªë l∆∞·ª£ng default keys: ${model.defaultKeys.length}`);
      console.log(`- Gi·ªõi h·∫°n RPM: ${model.rpm}`);
      console.log(`- Gi·ªõi h·∫°n TPM: ${model.tpm}`);
      console.log(`- Gi·ªõi h·∫°n RPD: ${model.rpd}`);

      if (model.defaultKeys.length === 0) {
        this.lastError = `‚ö†Ô∏è Kh√¥ng c√≥ default key n√†o cho model "${this.modelValue}". Vui l√≤ng th√™m key m·ªõi ho·∫∑c li√™n h·ªá admin.`;
        console.log(this.lastError);
        return false;
      }

      return true;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi t·∫£i th√¥ng tin model: ${error.message}`;
      console.error(this.lastError);
      return false;
    }
  }

  // L·∫•y default keys t·ª´ database
  async loadDefaultKeys() {
    try {
      // Ki·ªÉm tra th√¥ng tin model tr∆∞·ªõc
      const modelLoaded = await this.loadModelInfo();
      if (!modelLoaded) {
        return false;
      }

      // L·∫•y t·∫•t c·∫£ default keys c·ªßa model
      const defaultKeys = await prisma.defaultKey.findMany({
        where: { 
          modelId: this.modelInfo.id,
          status: "ACTIVE"
        },
        include: {
          usageStats: {
            orderBy: {
              lastUsedAt: 'desc'
            },
            take: 1
          }
        }
      });

      this.defaultKeys = defaultKeys.map(k => ({
        key: k.key,
        lastUsed: k.usageStats[0]?.lastUsedAt || null,
        requestCount: k.usageStats[0]?.requestCount || 0
      }));
      
      console.log(`\nüì• ƒê√£ t·∫£i ${this.defaultKeys.length} default keys cho model "${this.modelValue}"`);
      console.log("üìã Chi ti·∫øt keys:");
      this.defaultKeys.forEach((k, index) => {
        console.log(`\nüîë Key ${index + 1}: ${k.key.substring(0, 10)}...`);
        console.log(`- L·∫ßn s·ª≠ d·ª•ng cu·ªëi: ${k.lastUsed ? new Date(k.lastUsed).toLocaleString() : 'Ch∆∞a s·ª≠ d·ª•ng'}`);
        console.log(`- S·ªë request: ${k.requestCount}`);
      });

      return true;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi t·∫£i default keys: ${error.message}`;
      console.error(this.lastError);
      return false;
    }
  }

  // L·∫•y key ƒë·ªÉ s·ª≠ d·ª•ng
  async getKeyToUse(userId, userKey = null) {
    try {
      console.log("\nüîë B·∫Øt ƒë·∫ßu qu√° tr√¨nh l·∫•y key ƒë·ªÉ s·ª≠ d·ª•ng...");
      this.lastError = null;

      // N·∫øu c√≥ userKey, ki·ªÉm tra xem key c√≥ h·ª£p l·ªá kh√¥ng
      if (userKey) {
        console.log("üîç Ki·ªÉm tra user key...");
        const userKeyRecord = await prisma.userApiKey.findFirst({
          where: {
            userId,
            key: userKey,
            status: "ACTIVE",
            model: {
              value: this.modelValue
            }
          },
          include: {
            usageStats: {
              orderBy: {
                lastUsedAt: 'desc'
              },
              take: 1
            }
          }
        });

        if (userKeyRecord) {
          console.log("‚úÖ User key h·ª£p l·ªá");
          console.log(`- Label: ${userKeyRecord.label || 'Kh√¥ng c√≥ nh√£n'}`);
          console.log(`- L·∫ßn s·ª≠ d·ª•ng cu·ªëi: ${userKeyRecord.usageStats[0]?.lastUsedAt ? new Date(userKeyRecord.usageStats[0].lastUsedAt).toLocaleString() : 'Ch∆∞a s·ª≠ d·ª•ng'}`);
          console.log(`- S·ªë request: ${userKeyRecord.usageStats[0]?.requestCount || 0}`);
          return userKey;
        } else {
          this.lastError = "‚ö†Ô∏è Key c·ªßa user kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a";
          console.log(this.lastError);
        }
      }

      // N·∫øu kh√¥ng c√≥ userKey ho·∫∑c key kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng default key
      if (this.defaultKeys.length === 0) {
        console.log("üì• ƒêang t·∫£i default keys...");
        const loaded = await this.loadDefaultKeys();
        if (!loaded) {
          throw new Error(this.lastError || "Kh√¥ng th·ªÉ t·∫£i default keys");
        }
      }

      if (this.defaultKeys.length === 0) {
        this.lastError = `‚ö†Ô∏è Kh√¥ng c√≥ key n√†o kh·∫£ d·ª•ng cho model "${this.modelValue}". Vui l√≤ng th√™m key m·ªõi ho·∫∑c li√™n h·ªá admin.`;
        throw new Error(this.lastError);
      }

      // S·∫Øp x·∫øp keys theo th·ªùi gian s·ª≠ d·ª•ng cu·ªëi (key ch∆∞a d√πng s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n)
      this.defaultKeys.sort((a, b) => {
        if (!a.lastUsed) return -1;
        if (!b.lastUsed) return 1;
        return new Date(a.lastUsed) - new Date(b.lastUsed);
      });

      // L·∫•y key ƒë·∫ßu ti√™n (√≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng nh·∫•t)
      const selectedKey = this.defaultKeys[0];
      console.log("\n‚úÖ ƒê√£ ch·ªçn default key ƒë·ªÉ s·ª≠ d·ª•ng:");
      console.log(`- Key: ${selectedKey.key.substring(0, 10)}...`);
      console.log(`- L·∫ßn s·ª≠ d·ª•ng cu·ªëi: ${selectedKey.lastUsed ? new Date(selectedKey.lastUsed).toLocaleString() : 'Ch∆∞a s·ª≠ d·ª•ng'}`);
      console.log(`- S·ªë request: ${selectedKey.requestCount}`);

      return selectedKey.key;
    } catch (error) {
      this.lastError = error.message;
      console.error("‚ùå L·ªói khi l·∫•y key:", error);
      throw error;
    }
  }

  // X·ª≠ l√Ω l·ªói 429 (Too Many Requests)
  async handle429Error(userId, key) {
    try {
      console.log(`\n‚ö†Ô∏è Ph√°t hi·ªán l·ªói 429 (Too Many Requests) cho key ${key.substring(0, 10)}... v·ªõi model ${this.modelValue}`);
      
      // Ki·ªÉm tra xem key c√≥ ph·∫£i l√† key c·ªßa user kh√¥ng
      const userKeyRecord = await prisma.userApiKey.findFirst({
        where: {
          userId,
          key,
          models: {
            some: {
              model: {
                value: this.modelValue
              }
            }
          }
        },
        include: {
          models: {
            where: {
              model: {
                value: this.modelValue
              }
            }
          }
        }
      });

      if (userKeyRecord) {
        console.log("üîí ƒê√¢y l√† key c·ªßa user, chuy·ªÉn sang tr·∫°ng th√°i COOLDOWN cho model n√†y");
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.userApiKeyToModel.updateMany({
          where: {
            userApiKeyId: userKeyRecord.id,
            model: {
              value: this.modelValue
            }
          },
          data: {
            status: "COOLDOWN",
            updatedAt: new Date()
          }
        });
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i key c·ªßa user cho model ${this.modelValue}`);
      } else {
        console.log("üîë ƒê√¢y l√† default key, c·∫≠p nh·∫≠t tr·∫°ng th√°i cho model n√†y");
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.defaultKeyToModel.updateMany({
          where: {
            defaultKey: {
              key: key
            },
            model: {
              value: this.modelValue
            }
          },
          data: {
            status: "COOLDOWN",
            updatedAt: new Date()
          }
        });
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i default key cho model ${this.modelValue}`);
      }

      // Ki·ªÉm tra s·ªë l∆∞·ª£ng keys c√≤n l·∫°i cho model n√†y
      const remainingKeys = await prisma.defaultKeyToModel.count({
        where: {
          model: {
            value: this.modelValue
          },
          status: "ACTIVE"
        }
      });
      console.log(`üìä C√≤n ${remainingKeys} keys ƒëang ho·∫°t ƒë·ªông cho model ${this.modelValue}`);
    } catch (error) {
      console.error("‚ùå L·ªói khi x·ª≠ l√Ω l·ªói 429:", error);
    }
  }

  // ƒê√°nh d·∫•u key ƒë√£ h·∫øt quota
  async exhaustKey(userId, key) {
    try {
      console.log(`\n‚ö†Ô∏è Ph√°t hi·ªán key ${key.substring(0, 10)}... ƒë√£ h·∫øt quota cho model ${this.modelValue}`);
      
      // Ki·ªÉm tra xem key c√≥ ph·∫£i l√† key c·ªßa user kh√¥ng
      const userKeyRecord = await prisma.userApiKey.findFirst({
        where: {
          userId,
          key,
          models: {
            some: {
              model: {
                value: this.modelValue
              }
            }
          }
        },
        include: {
          models: {
            where: {
              model: {
                value: this.modelValue
              }
            }
          }
        }
      });

      if (userKeyRecord) {
        console.log("üîí ƒê√¢y l√† key c·ªßa user, ƒë√°nh d·∫•u l√† EXHAUSTED cho model n√†y");
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.userApiKeyToModel.updateMany({
          where: {
            userApiKeyId: userKeyRecord.id,
            model: {
              value: this.modelValue
            }
          },
          data: {
            status: "EXHAUSTED",
            updatedAt: new Date()
          }
        });
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i key c·ªßa user cho model ${this.modelValue}`);
      } else {
        console.log("üîë ƒê√¢y l√† default key, c·∫≠p nh·∫≠t tr·∫°ng th√°i cho model n√†y");
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho model c·ª• th·ªÉ
        await prisma.defaultKeyToModel.updateMany({
          where: {
            defaultKey: {
              key: key
            },
            model: {
              value: this.modelValue
            }
          },
          data: {
            status: "EXHAUSTED",
            updatedAt: new Date()
          }
        });
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i default key cho model ${this.modelValue}`);
      }

      // Ki·ªÉm tra s·ªë l∆∞·ª£ng keys c√≤n l·∫°i cho model n√†y
      const remainingKeys = await prisma.defaultKeyToModel.count({
        where: {
          model: {
            value: this.modelValue
          },
          status: "ACTIVE"
        }
      });
      console.log(`üìä C√≤n ${remainingKeys} keys ƒëang ho·∫°t ƒë·ªông cho model ${this.modelValue}`);

      if (remainingKeys === 0) {
        console.log(`‚ö†Ô∏è Kh√¥ng c√≤n key n√†o kh·∫£ d·ª•ng cho model ${this.modelValue}!`);
        throw new Error(`Key ${key.substring(0, 10)}... ƒë√£ kh√¥ng c√≤n s·ª≠ d·ª•ng ƒë∆∞·ª£c cho model ${this.modelValue}. Vui l√≤ng th·ª≠ model kh√°c ho·∫∑c th√™m key m·ªõi.`);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë√°nh d·∫•u key h·∫øt quota:", error);
      throw error;
    }
  }

  // Ki·ªÉm tra xem c√≥ key n√†o kh·∫£ d·ª•ng kh√¥ng
  async hasAvailableKeys(userId, userKey = null) {
    try {
      console.log(`\nüîç Ki·ªÉm tra keys kh·∫£ d·ª•ng cho model ${this.modelValue}...`);
      
      // Ki·ªÉm tra userKey n·∫øu c√≥
      if (userKey) {
        console.log("üîë Ki·ªÉm tra user key...");
        const userKeyRecord = await prisma.userApiKey.findFirst({
          where: {
            userId,
            key: userKey,
            models: {
              some: {
                model: {
                  value: this.modelValue
                },
                status: "ACTIVE"
              }
            }
          }
        });
        if (userKeyRecord) {
          console.log("‚úÖ User key kh·∫£ d·ª•ng cho model n√†y");
          return true;
        }
        console.log("‚ùå User key kh√¥ng kh·∫£ d·ª•ng cho model n√†y");
      }

      // Ki·ªÉm tra default keys
      const availableKeys = await prisma.defaultKeyToModel.count({
        where: {
          model: {
            value: this.modelValue
          },
          status: "ACTIVE"
        }
      });

      console.log(`üìä S·ªë l∆∞·ª£ng default keys kh·∫£ d·ª•ng cho model ${this.modelValue}: ${availableKeys}`);
      return availableKeys > 0;
    } catch (error) {
      console.error("‚ùå L·ªói khi ki·ªÉm tra key kh·∫£ d·ª•ng:", error);
      return false;
    }
  }

  // L·∫•y th√¥ng b√°o l·ªói cu·ªëi c√πng
  getLastError() {
    return this.lastError;
  }
}

module.exports = ApiKeyManager;
