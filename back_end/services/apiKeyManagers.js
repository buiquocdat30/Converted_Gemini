const prisma = require("../config/prismaConfig");
const { getModelInfo } = require("./modelAIManagers");

const DEFAULT_KEYS = process.env.DEFAULT_GEMINI_API_KEYS
  ? process.env.DEFAULT_GEMINI_API_KEYS.split(",")
  : [];

class ApiKeyManager {
  constructor(modelValue) {
    this.modelValue = modelValue;
    this.aliveKeys = [...DEFAULT_KEYS];
  }

  // L·∫•y keys c·ªßa user t·ª´ database
  async loadUserKeys(userId) {
    try {
      const userKeys = await prisma.userApiKey.findMany({
        where: {
          userId,
          status: "ACTIVE",
          model: {
            value: this.modelValue
          }
        },
        select: {
          key: true
        }
      });

      // Th√™m keys c·ªßa user v√†o danh s√°ch aliveKeys
      const userKeyValues = userKeys.map(k => k.key);
      this.aliveKeys = [...new Set([...this.aliveKeys, ...userKeyValues])];
      
      console.log(`üì• ƒê√£ t·∫£i ${userKeyValues.length} keys c·ªßa user`);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i keys c·ªßa user:", error);
    }
  }

  // L∆∞u key m·ªõi c·ªßa user v√†o database
  async saveUserKey(userId, key) {
    try {
      // T√¨m model ID d·ª±a tr√™n modelValue
      const model = await prisma.model.findFirst({
        where: { value: this.modelValue }
      });

      if (!model) {
        throw new Error("Kh√¥ng t√¨m th·∫•y model");
      }

      // L∆∞u key v√†o database
      await prisma.userApiKey.create({
        data: {
          key,
          userId,
          modelId: model.id,
          status: "ACTIVE"
        }
      });

      // Th√™m v√†o danh s√°ch aliveKeys n·∫øu ch∆∞a c√≥
      if (!this.aliveKeys.includes(key)) {
        this.aliveKeys.push(key);
      }

      console.log("‚úÖ ƒê√£ l∆∞u key m·ªõi c·ªßa user");
    } catch (error) {
      console.error("‚ùå L·ªói khi l∆∞u key c·ªßa user:", error);
      throw error;
    }
  }

  // X·ª≠ l√Ω l·ªói 429 (Too Many Requests)
  async handle429Error(userId, key) {
    try {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i key trong database
      await prisma.userApiKey.updateMany({
        where: {
          userId,
          key,
          model: {
            value: this.modelValue
          }
        },
        data: {
          status: "COOLDOWN"
        }
      });

      // X√≥a kh·ªèi danh s√°ch aliveKeys
      const index = this.aliveKeys.indexOf(key);
      if (index !== -1) {
        this.aliveKeys.splice(index, 1);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi x·ª≠ l√Ω l·ªói 429:", error);
    }
  }

  // ƒê√°nh d·∫•u key ƒë√£ h·∫øt quota
  async exhaustKey(userId, key) {
    try {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i key trong database
      await prisma.userApiKey.updateMany({
        where: {
          userId,
          key,
          model: {
            value: this.modelValue
          }
        },
        data: {
          status: "EXHAUSTED"
        }
      });

      // X√≥a kh·ªèi danh s√°ch aliveKeys
      const index = this.aliveKeys.indexOf(key);
      if (index !== -1) {
        this.aliveKeys.splice(index, 1);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë√°nh d·∫•u key h·∫øt quota:", error);
    }
  }

  // L·∫•y key theo v√≤ng tr√≤n
  getAroundKeyFrom(keys, type = "default") {
    if (!keys || keys.length === 0) return null;
    const key = keys[Math.floor(Math.random() * keys.length)];
    return key;
  }
}

module.exports = ApiKeyManager;
