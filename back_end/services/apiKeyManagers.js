const { prisma, toObjectId } = require("../config/prismaConfig");
const { GoogleGenerativeAI } = require("@google/generative-ai");

class ApiKeyManager {
  constructor(modelValue) {
    this.modelValue = modelValue;
    this.defaultKeys = [];
    this.lastError = null;
    this.modelInfo = null;
    this.providerModels = null; // Cache danh s√°ch models c·ªßa provider
  }

  // ================= USER KEY =================
  // Qu·∫£n l√Ω, t·∫°o, c·∫≠p nh·∫≠t, x√≥a, l·∫•y usage cho User Key

  /**
   * T·∫°o user key m·ªõi v√† usage record cho t·ª´ng model
   * @param {string} userId
   * @param {string} key
   * @param {string|null} label
   */
  async createUserKey(userId, key, label = null) {
    if (!userId || !key) throw new Error("Thi·∫øu userId ho·∫∑c key");
    try {
      console.log(`\nüîë ƒêang t·∫°o API key m·ªõi cho user ${userId}...`);
      // Ki·ªÉm tra key ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingKey = await prisma.userApiKey.findFirst({
        where: { 
          key: key,
          userId: userId
        }
      });
      if (existingKey) {
        throw new Error('B·∫°n ƒë√£ th√™m key n√†y tr∆∞·ªõc ƒë√≥');
      }
      // X√°c ƒë·ªãnh provider v√† models t·ª´ key
      const { provider, models } = await this.determineProviderAndModel(key);
      // Ki·ªÉm tra key c√≥ h·ª£p l·ªá kh√¥ng
      const isValid = await this.validateKey(key);
      if (!isValid) {
        throw new Error('Key kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p model n√†y');
      }
      console.log(`\nüìù ƒêang t·∫°o key m·ªõi cho provider ${provider}:`);
      console.log(`- S·ªë l∆∞·ª£ng models s·∫Ω k·∫øt n·ªëi: ${models.length}`);
      console.log("- Danh s√°ch models:");
      models.forEach(model => {
        console.log(`  ‚Ä¢ ${model.label} (${model.value})`);
      });
      // T·∫°o key m·ªõi
      const newKey = await prisma.userApiKey.create({
        data: {
          userId,
          key,
          label: label || `${provider.toUpperCase()} Key`,
          createdAt: new Date(),
          updatedAt: new Date(),
        }
      });
      // T·∫°o usage record cho t·ª´ng model
      for (const model of models) {
        await prisma.userApiKeyUsage.create({
          data: {
            userApiKeyId: newKey.id,
            modelId: model.id,
            status: "ACTIVE",
            usageCount: 0,
            promptTokens: 0,
            completionTokens: 0,
            totalTokens: 0,
            lastUsedAt: null,
          }
        });
      }
      console.log(`\n‚úÖ ƒê√£ t·∫°o key m·ªõi th√†nh c√¥ng v√† usage cho t·ª´ng model!`);
      return { ...newKey, models };
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi t·∫°o key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t usage record cho user key (theo usageId)
   * @param {string} usageId
   * @param {object} usage
   * @param {boolean} isUserKey
   */
  async updateUsageStats(usageId, usage, isUserKey = true) {
    if (!usageId || !usage) {
      console.error("‚ùå usageId ho·∫∑c d·ªØ li·ªáu s·ª≠ d·ª•ng b·ªã thi·∫øu ƒë·ªÉ c·∫≠p nh·∫≠t th·ªëng k√™.");
      return;
    }
    const { promptTokenCount, candidatesTokenCount, totalTokenCount } = usage;
    try {
      if (isUserKey) {
        await prisma.userApiKeyUsage.update({
          where: { id: usageId },
          data: {
            usageCount: { increment: 1 },
            promptTokens: { increment: promptTokenCount || 0 },
            completionTokens: { increment: candidatesTokenCount || 0 },
            totalTokens: { increment: totalTokenCount || 0 },
            lastUsedAt: new Date(),
          },
        });
        console.log(`üìä ƒê√£ c·∫≠p nh·∫≠t usage cho user key usageId: ${usageId}`);
      } else {
        await prisma.defaultKeyUsage.update({
          where: { id: usageId },
          data: {
            usageCount: { increment: 1 },
            promptTokens: { increment: promptTokenCount || 0 },
            completionTokens: { increment: candidatesTokenCount || 0 },
            totalTokens: { increment: totalTokenCount || 0 },
            lastUsedAt: new Date(),
          },
        });
        console.log(`üìä ƒê√£ c·∫≠p nh·∫≠t usage cho default key usageId: ${usageId}`);
      }
    } catch (error) {
      console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t usage cho usageId ${usageId}:`, error);
    }
  }

  /**
   * ƒê√°nh d·∫•u usage record h·∫øt quota ho·∫∑c cooldown
   * @param {string} usageId
   * @param {string} status
   * @param {boolean} isUserKey
   */
  async exhaustKey(usageId, status = "EXHAUSTED", isUserKey = true) {
    try {
      if (!usageId) throw new Error("Thi·∫øu usageId");
      if (status !== "EXHAUSTED" && status !== "COOLDOWN") throw new Error("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá");
      if (isUserKey) {
        await prisma.userApiKeyUsage.update({
          where: { id: usageId },
          data: {
            status: status,
            lastUsedAt: new Date(),
          },
        });
        console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ${status} cho user key usageId: ${usageId}`);
      } else {
        await prisma.defaultKeyUsage.update({
          where: { id: usageId },
          data: {
            status: status,
            lastUsedAt: new Date(),
          },
        });
        console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ${status} cho default key usageId: ${usageId}`);
      }
    } catch (error) {
      console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ${status} cho usageId ${usageId}:`, error);
      throw error;
    }
  }

  /**
   * L·∫•y key kh·∫£ d·ª•ng cho user ho·∫∑c default key cho 1 model
   * @param {string} userId
   * @param {string|array|null} userKeys
   * @param {string} modelValue
   * @returns { key, usageId }
   */
  async getKeyToUse(userId, userKeys = null, modelValue = null) {
    try {
      // L·∫•y modelId t·ª´ modelValue
      let model = null;
      if (!modelValue) throw new Error("Thi·∫øu th√¥ng tin model");
      model = await prisma.model.findFirst({ where: { value: modelValue } });
      if (!model) throw new Error("Kh√¥ng t√¨m th·∫•y model");

      // ∆Øu ti√™n key c·ªßa user
      if (userId) {
        // L·∫•y t·∫•t c·∫£ key c·ªßa user (n·∫øu userKeys truy·ªÅn v√†o th√¨ ch·ªâ l·∫•y c√°c key ƒë√≥)
        let userKeyFilter = { userId: toObjectId(userId) };
        if (userKeys) {
          userKeyFilter.key = Array.isArray(userKeys) ? { in: userKeys } : userKeys;
        }
        const userApiKeys = await prisma.userApiKey.findMany({ where: userKeyFilter });
        if (userApiKeys.length > 0) {
          // T√¨m usage record ACTIVE cho ƒë√∫ng model
          for (const userKey of userApiKeys) {
            const usage = await prisma.userApiKeyUsage.findFirst({
              where: {
                userApiKeyId: userKey.id,
                modelId: model.id,
                status: "ACTIVE"
              },
              orderBy: [
                { usageCount: "asc" },
                { lastUsedAt: "asc" }
              ]
            });
            if (usage) {
              console.log(`‚úÖ T√¨m th·∫•y user key kh·∫£ d·ª•ng: ${userKey.key.substring(0, 10)}... cho model ${modelValue}`);
              return { key: userKey.key, usageId: usage.id };
            }
          }
        }
      }

      // N·∫øu kh√¥ng c√≥ user key kh·∫£ d·ª•ng, t√¨m default key
      const defaultKeys = await prisma.defaultKey.findMany();
      console.log(`üîç T√¨m th·∫•y ${defaultKeys.length} default keys`);
      
      for (const defaultKey of defaultKeys) {
        // Ki·ªÉm tra xem c√≥ usage record cho model n√†y kh√¥ng
        let usage = await prisma.defaultKeyUsage.findFirst({
          where: {
            defaultKeyId: defaultKey.id,
            modelId: model.id,
            status: "ACTIVE"
          },
          orderBy: [
            { usageCount: "asc" },
            { lastUsedAt: "asc" }
          ]
        });

        // N·∫øu kh√¥ng c√≥ usage record, t·∫°o m·ªõi
        if (!usage) {
          console.log(`üìù T·∫°o usage record m·ªõi cho default key ${defaultKey.key.substring(0, 10)}... v√† model ${modelValue}`);
          try {
            usage = await prisma.defaultKeyUsage.create({
              data: {
                defaultKeyId: defaultKey.id,
                modelId: model.id,
                status: "ACTIVE",
                usageCount: 0,
                promptTokens: 0,
                completionTokens: 0,
                totalTokens: 0,
                lastUsedAt: null,
              }
            });
            console.log(`‚úÖ ƒê√£ t·∫°o usage record cho default key`);
          } catch (error) {
            console.error(`‚ùå L·ªói khi t·∫°o usage record:`, error);
            continue; // Th·ª≠ key ti·∫øp theo
          }
        }

        if (usage) {
          console.log(`‚úÖ T√¨m th·∫•y default key kh·∫£ d·ª•ng: ${defaultKey.key.substring(0, 10)}... cho model ${modelValue}`);
          return { key: defaultKey.key, usageId: usage.id };
        }
      }

      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y key kh·∫£ d·ª•ng cho model ${modelValue}`);
      throw new Error("Kh√¥ng t√¨m th·∫•y key kh·∫£ d·ª•ng cho model n√†y");
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y key kh·∫£ d·ª•ng:", err);
      throw err;
    }
  }

  // ================= DEFAULT KEY =================
  // Qu·∫£n l√Ω, t·∫°o, c·∫≠p nh·∫≠t, x√≥a, l·∫•y usage cho Default Key

  /**
   * T·∫°o default key m·ªõi v√† usage record cho t·ª´ng model
   * @param {string} key
   * @param {array} modelValues
   * @param {string|null} label
   */
  async createDefaultKey(key, modelValues = [], label = null) {
    if (!key || !Array.isArray(modelValues) || modelValues.length === 0) throw new Error("Thi·∫øu key ho·∫∑c danh s√°ch model");
    try {
      console.log(`\nüîë ƒêang t·∫°o default key m·ªõi...`);
      // Ki·ªÉm tra key ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingKey = await prisma.defaultKey.findFirst({ where: { key } });
      if (existingKey) {
        throw new Error('Key n√†y ƒë√£ t·ªìn t·∫°i');
      }
      // L·∫•y danh s√°ch model theo value
      const models = await prisma.model.findMany({ where: { value: { in: modelValues } } });
      if (models.length === 0) throw new Error('Kh√¥ng t√¨m th·∫•y model n√†o ph√π h·ª£p');
      // T·∫°o default key m·ªõi
      const newKey = await prisma.defaultKey.create({
        data: {
          key,
          createdAt: new Date(),
          updatedAt: new Date(),
        }
      });
      // T·∫°o usage record cho t·ª´ng model
      for (const model of models) {
        await prisma.defaultKeyUsage.create({
          data: {
            defaultKeyId: newKey.id,
            modelId: model.id,
            status: "ACTIVE",
            usageCount: 0,
            promptTokens: 0,
            completionTokens: 0,
            totalTokens: 0,
            lastUsedAt: null,
          }
        });
      }
      console.log(`\n‚úÖ ƒê√£ t·∫°o default key m·ªõi th√†nh c√¥ng v√† usage cho t·ª´ng model!`);
      return { ...newKey, models };
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi t·∫°o default key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  /**
   * X√≥a default key v√† to√†n b·ªô usage li√™n quan
   * @param {string} defaultKeyId
   */
  async deleteDefaultKey(defaultKeyId) {
    try {
      if (!defaultKeyId) throw new Error('Thi·∫øu id c·ªßa default key');
      // X√≥a to√†n b·ªô usage tr∆∞·ªõc
      await prisma.defaultKeyUsage.deleteMany({ where: { defaultKeyId } });
      // X√≥a default key
      await prisma.defaultKey.delete({ where: { id: defaultKeyId } });
      console.log(`‚úÖ ƒê√£ x√≥a default key v√† to√†n b·ªô usage li√™n quan!`);
      return true;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi x√≥a default key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i usage c·ªßa default key cho 1 model
   * @param {string} defaultKeyId
   * @param {string} modelId
   * @param {string} status
   */
  async updateDefaultKeyUsageStatus(defaultKeyId, modelId, status) {
    try {
      if (!defaultKeyId || !modelId) throw new Error('Thi·∫øu id');
      if (!["ACTIVE", "EXHAUSTED", "COOLDOWN"].includes(status)) throw new Error('Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá');
      await prisma.defaultKeyUsage.updateMany({
        where: { defaultKeyId, modelId },
        data: { status, lastUsedAt: new Date() }
      });
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i usage c·ªßa default key ${defaultKeyId} cho model ${modelId} th√†nh ${status}`);
      return true;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i usage default key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch default key v√† usage theo model
   * @param {string|null} modelValue
   */
  async getDefaultKeysWithUsage(modelValue = null) {
    try {
      let model = null;
      if (modelValue) {
        model = await prisma.model.findFirst({ where: { value: modelValue } });
        if (!model) throw new Error('Kh√¥ng t√¨m th·∫•y model');
      }
      const defaultKeys = await prisma.defaultKey.findMany({
        include: {
          usage: model ? {
            where: { modelId: model.id },
          } : true
        }
      });
      return defaultKeys;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi l·∫•y danh s√°ch default key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  // ================= HELPER =================
  // (N·∫øu c·∫ßn, ch·ªâ gi·ªØ l·∫°i c√°c h√†m helper thao t√°c v·ªõi usage record)

  // L·∫•y danh s√°ch models c·ªßa provider t·ª´ database
  async getProviderModels(key) {
    try {
      if (!this.providerModels) {
        // X√°c ƒë·ªãnh provider t·ª´ format key
        const isOpenAI = key.startsWith('sk-');
        
        // T√¨m provider d·ª±a v√†o format key
        const provider = await prisma.provider.findFirst({
          where: {
            models: {
              some: {
                value: {
                  contains: isOpenAI ? 'gpt' : 'gemini'
                }
              }
            }
          },
          include: {
            models: {
              select: {
                id: true,
                value: true,
                label: true,
                description: true
              }
            }
          }
        });

        if (!provider) {
          throw new Error(`Kh√¥ng t√¨m th·∫•y provider cho key ${key.substring(0, 10)}...`);
        }

        this.providerModels = provider.models;
        console.log(`\n‚úÖ ƒê√£ l·∫•y ${this.providerModels.length} models c·ªßa provider ${provider.name}:`);
        this.providerModels.forEach(model => {
          console.log(`  ‚Ä¢ ${model.label} (${model.value})`);
        });
      }
      return this.providerModels;
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi l·∫•y danh s√°ch models: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  // X√°c ƒë·ªãnh provider v√† model t·ª´ key
  async determineProviderAndModel(key, userId = null) {
    try {
      console.log(`\nüîç ƒêang x√°c ƒë·ªãnh provider v√† model cho key ${key.substring(0, 10)}...`);

      // X√°c ƒë·ªãnh provider t·ª´ format key
      let provider;
      if (key.startsWith('AI')) {
        provider = 'Google';
      } else if (key.startsWith('sk-')) {
        provider = 'OpenAI';
      } else {
        throw new Error('Key kh√¥ng h·ª£p l·ªá, kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c provider');
      }

      // L·∫•y provider t·ª´ database
      const providerRecord = await prisma.provider.findFirst({
        where: { name: provider }
      });

      if (!providerRecord) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y provider ${provider}`);
      }

      // L·∫•y t·∫•t c·∫£ models c·ªßa provider
      const allProviderModels = await prisma.model.findMany({
        where: {
          providerId: providerRecord.id
        }
      });

      if (!allProviderModels || allProviderModels.length === 0) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y models c·ªßa provider ${provider}`);
      }

      // S·ª≠ d·ª•ng t·∫•t c·∫£ models c·ªßa provider cho key m·ªõi
      const selectedModels = allProviderModels;
      const validModelIds = selectedModels.map(m => m.id);

      console.log("\nüìã K·∫øt qu·∫£ x√°c ƒë·ªãnh provider v√† model:", {
        provider: provider,
        totalModels: allProviderModels.length,
        selectedModels: selectedModels.length,
        modelValues: selectedModels.map(m => m.value)
      });

      return {
        provider: provider,
        modelIds: validModelIds,
        models: selectedModels
      };
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi x√°c ƒë·ªãnh provider v√† model: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  // Ki·ªÉm tra key c√≥ h·ª£p l·ªá kh√¥ng
  async validateKey(key) {
    try {
      console.log(`\nüîç ƒêang ki·ªÉm tra key ${key.substring(0, 10)}...`);
      
      // X√°c ƒë·ªãnh provider v√† models t·ª´ key
      const { provider, models } = await this.determineProviderAndModel(key);
      
      if (provider === 'Google') {
        try {
          // Th·ª≠ v·ªõi model ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra key
          const genAI = new GoogleGenerativeAI(key);
          const testModel = models[0]; // L·∫•y model ƒë·∫ßu ti√™n ƒë·ªÉ test
          const geminiModel = genAI.getGenerativeModel({ model: testModel.value });

          // Th·ª≠ m·ªôt request ƒë∆°n gi·∫£n
          const prompt = "Test connection";
          const result = await geminiModel.generateContent(prompt);
          const response = await result.response;
          
          console.log(`‚úÖ Key Google h·ª£p l·ªá v√† c√≥ th·ªÉ s·ª≠ d·ª•ng v·ªõi ${models.length} models`);
          return true;
        } catch (error) {
          console.error(`‚ùå Key Google kh√¥ng h·ª£p l·ªá:`, error.message);
          return false;
        }
      } else {
        // TODO: Th√™m validation cho OpenAI key
        console.log("‚ö†Ô∏è Ch∆∞a h·ªó tr·ª£ validate OpenAI key");
        return true; // T·∫°m th·ªùi cho ph√©p lu√¥n
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi validate key:", error.message);
      return false;
    }
  }

  // L·∫•y th√¥ng b√°o l·ªói cu·ªëi c√πng
  getLastError() {
    return this.lastError;
  }

  /**
   * X·ª≠ l√Ω l·ªói 429 (Too Many Requests) - ƒë√°nh d·∫•u key v√†o cooldown
   * @param {string} userId
   * @param {string} key
   */
  async handle429Error(userId, key) {
    try {
      console.log(`\nüîÑ ƒêang x·ª≠ l√Ω l·ªói 429 cho key ${key.substring(0, 10)}...`);
      
      // T√¨m usage record c·ªßa key n√†y
      const userKey = await prisma.userApiKey.findFirst({
        where: {
          key: key,
          userId: toObjectId(userId)
        }
      });

      if (userKey) {
        // ƒê√°nh d·∫•u t·∫•t c·∫£ usage records c·ªßa key n√†y v√†o cooldown
        await prisma.userApiKeyUsage.updateMany({
          where: {
            userApiKeyId: userKey.id
          },
          data: {
            status: "COOLDOWN"
          }
        });
        console.log(`‚úÖ ƒê√£ ƒë√°nh d·∫•u key ${key.substring(0, 10)}... v√†o cooldown`);
      }
    } catch (error) {
      console.error(`‚ùå L·ªói khi x·ª≠ l√Ω 429 error:`, error);
    }
  }

  /**
   * Ki·ªÉm tra xem c√≤n key kh·∫£ d·ª•ng kh√¥ng
   * @param {array} keysToUse
   * @param {string} userId
   * @param {string} modelValue
   * @returns {boolean}
   */
  async hasAvailableKeys(keysToUse, userId, modelValue) {
    try {
      // L·∫•y modelId t·ª´ modelValue
      const model = await prisma.model.findFirst({ where: { value: modelValue } });
      if (!model) return false;

      // Ki·ªÉm tra user keys
      if (userId) {
        let userKeyFilter = { userId: toObjectId(userId) };
        if (keysToUse && keysToUse.length > 0) {
          userKeyFilter.key = { in: keysToUse };
        }
        
        const userApiKeys = await prisma.userApiKey.findMany({ where: userKeyFilter });
        for (const userKey of userApiKeys) {
          const usage = await prisma.userApiKeyUsage.findFirst({
            where: {
              userApiKeyId: userKey.id,
              modelId: model.id,
              status: "ACTIVE"
            }
          });
          if (usage) return true;
        }
      }

      // Ki·ªÉm tra default keys
      const defaultKeys = await prisma.defaultKey.findMany();
      for (const defaultKey of defaultKeys) {
        const usage = await prisma.defaultKeyUsage.findFirst({
          where: {
            defaultKeyId: defaultKey.id,
            modelId: model.id,
            status: "ACTIVE"
          }
        });
        if (usage) return true;
      }

      return false;
    } catch (error) {
      console.error("‚ùå L·ªói khi ki·ªÉm tra key kh·∫£ d·ª•ng:", error);
      return false;
    }
  }

  // L·∫•y danh s√°ch user keys
  async getUserKeys(userId) {
    if (!userId) return [];
    try {
      const keys = await prisma.userApiKey.findMany({
        where: { userId: toObjectId(userId) },
        include: {
          usage: {
            include: {
              model: {
                include: {
                  provider: true
                }
              }
            }
          }
        },
        orderBy: {
          createdAt: "desc",
        },
      });

      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng
      const formattedKeys = keys.map(key => ({
        ...key,
        models: key.usage.map(usage => ({
          id: usage.model.id,
          value: usage.model.value,
          label: usage.model.label,
          description: usage.model.description,
          rpm: usage.model.rpm,
          tpm: usage.model.tpm,
          rpd: usage.model.rpd,
          providerId: usage.model.providerId,
          provider: usage.model.provider,
          status: usage.status,
          usageCount: usage.usageCount,
          promptTokens: usage.promptTokens,
          completionTokens: usage.completionTokens,
          totalTokens: usage.totalTokens,
          lastUsedAt: usage.lastUsedAt
        }))
      }));

      return formattedKeys;
    } catch (error) {
      console.error("L·ªói khi l·∫•y user keys:", error);
      return [];
    }
  }

  /**
   * X√≥a user key v√† t·∫•t c·∫£ usage records li√™n quan
   * @param {string} userId
   * @param {string} keyId
   */
  async deleteUserKey(userId, keyId) {
    if (!userId || !keyId) throw new Error("Thi·∫øu userId ho·∫∑c keyId");
    try {
      console.log(`\nüóëÔ∏è ƒêang x√≥a key ${keyId} c·ªßa user ${userId}...`);
      
      // Ki·ªÉm tra key c√≥ thu·ªôc v·ªÅ user kh√¥ng
      const existingKey = await prisma.userApiKey.findFirst({
        where: { 
          id: keyId,
          userId: toObjectId(userId)
        }
      });
      
      if (!existingKey) {
        throw new Error('Kh√¥ng t√¨m th·∫•y key ho·∫∑c key kh√¥ng thu·ªôc v·ªÅ user n√†y');
      }

      // X√≥a t·∫•t c·∫£ usage records tr∆∞·ªõc
      await prisma.userApiKeyUsage.deleteMany({
        where: {
          userApiKeyId: keyId
        }
      });

      // X√≥a key
      await prisma.userApiKey.delete({
        where: {
          id: keyId
        }
      });

      console.log(`‚úÖ ƒê√£ x√≥a key ${keyId} v√† t·∫•t c·∫£ usage records th√†nh c√¥ng!`);
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi x√≥a key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa user key cho t·∫•t c·∫£ models
   * @param {string} userId
   * @param {string} keyId
   * @param {string} status
   */
  async updateKeyStatus(userId, keyId, status) {
    if (!userId || !keyId || !status) throw new Error("Thi·∫øu userId, keyId ho·∫∑c status");
    if (!['ACTIVE', 'COOLDOWN', 'EXHAUSTED'].includes(status)) {
      throw new Error("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá");
    }
    
    try {
      console.log(`\nüîÑ ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i ${status} cho key ${keyId} c·ªßa user ${userId}...`);
      
      // Ki·ªÉm tra key c√≥ thu·ªôc v·ªÅ user kh√¥ng
      const existingKey = await prisma.userApiKey.findFirst({
        where: { 
          id: keyId,
          userId: toObjectId(userId)
        }
      });
      
      if (!existingKey) {
        throw new Error('Kh√¥ng t√¨m th·∫•y key ho·∫∑c key kh√¥ng thu·ªôc v·ªÅ user n√†y');
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho t·∫•t c·∫£ usage records
      await prisma.userApiKeyUsage.updateMany({
        where: {
          userApiKeyId: keyId
        },
        data: {
          status: status
        }
      });

      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ${status} cho key ${keyId} th√†nh c√¥ng!`);
      
      // Tr·∫£ v·ªÅ key ƒë√£ c·∫≠p nh·∫≠t
      return await this.getUserKeys(userId).then(keys => 
        keys.find(key => key.id === keyId)
      );
    } catch (error) {
      this.lastError = `‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i key: ${error.message}`;
      console.error(this.lastError);
      throw error;
    }
  }
}

module.exports = ApiKeyManager;