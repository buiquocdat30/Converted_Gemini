const { Worker, connection } = require('./queue');
const { myQueue } = require('./queue');
const { io } = require('socket.io-client');
const { translateText } = require("../services/translateService");

const SOCKET_PORT = 8001; // Socket.io server port

// H√†m t·∫°o socket connection v·ªõi retry
function createSocketConnection() {
  return new Promise((resolve, reject) => {
    console.log(`[WORKER] üîå ƒêang k·∫øt n·ªëi ƒë·∫øn Socket.io server http://localhost:${SOCKET_PORT}...`);
    
    const socket = io(`http://localhost:${SOCKET_PORT}`, {
      transports: ['websocket', 'polling'],
      reconnection: true,
      reconnectionAttempts: 10,
      reconnectionDelay: 2000,
      timeout: 10000
    });

    const timeout = setTimeout(() => {
      console.error('[WORKER] ‚ùå Timeout k·∫øt n·ªëi Socket.io server');
      socket.disconnect();
      reject(new Error('Socket.io connection timeout'));
    }, 15000);

    socket.on('connect', () => {
      console.log('[WORKER] ‚úÖ ƒê√£ k·∫øt n·ªëi Socket.io server th√†nh c√¥ng');
      clearTimeout(timeout);
      resolve(socket);
    });

    socket.on('connect_error', (error) => {
      console.error('[WORKER] ‚ùå L·ªói k·∫øt n·ªëi Socket.io:', error.message);
      clearTimeout(timeout);
      reject(error);
    });

    socket.on('disconnect', () => {
      console.log('[WORKER] üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi Socket.io server');
    });
  });
}

// H√†m d·ªãch ch∆∞∆°ng (t√πy ch·ªânh l·∫°i theo lu·ªìng c·ªßa b·∫°n)
async function callTranslateAPI(chapter, model, apiKey, storyId) {
  console.log(`[WORKER] B·∫Øt ƒë·∫ßu d·ªãch ch∆∞∆°ng ${chapter.chapterNumber}`);
  
  // T·∫°o keyInfo object theo format m√† translateText c·∫ßn
  const keyInfo = {
    key: apiKey,
    usageId: null, // C√≥ th·ªÉ th√™m usageId n·∫øu c·∫ßn
    isUserKey: true
  };

  try {
    // G·ªçi h√†m d·ªãch ti√™u ƒë·ªÅ v√† n·ªôi dung
    const titleResult = chapter.title
      ? await translateText(chapter.title, keyInfo, model, 'title', storyId)
      : { translated: chapter.title };
    
    const contentResult = chapter.content
      ? await translateText(chapter.content, keyInfo, model, 'content', storyId)
      : { translated: chapter.content };

    console.log(`[WORKER] D·ªãch xong - Title: ${titleResult.translated?.substring(0, 50)}...`);
    console.log(`[WORKER] D·ªãch xong - Content: ${contentResult.translated?.substring(0, 50)}...`);

    return {
      translatedTitle: titleResult.translated,
      translatedContent: contentResult.translated,
      duration: (titleResult.duration || 0) + (contentResult.duration || 0),
      hasError: titleResult.hasError || contentResult.hasError,
      error: titleResult.error || contentResult.error
    };
  } catch (error) {
    console.error(`[WORKER] L·ªói trong callTranslateAPI:`, error);
    throw error;
  }
}

console.log(`[WORKER] Worker process started at ${new Date().toLocaleString()} | PID: ${process.pid}`);

// Kh·ªüi t·∫°o socket connection
let socket = null;

// üöÄ Th√™m semaphore ƒë·ªÉ ki·ªÉm so√°t s·ªë l∆∞·ª£ng request ƒë·ªìng th·ªùi
let activeJobs = 0;
const MAX_CONCURRENT_JOBS = 3; // Gi·ªõi h·∫°n 3 job ƒë·ªìng th·ªùi

// üöÄ Th√™m semaphore ƒë·ªÉ ki·ªÉm so√°t API calls theo RPM
let lastApiCall = 0; // Timestamp c·ªßa l·∫ßn g·ªçi API cu·ªëi c√πng
const apiCallSemaphore = {
  lastCall: 0,
  minInterval: 0,
  setMinInterval: function(rpm) {
    this.minInterval = (60 / rpm) * 1000; // Chuy·ªÉn RPM th√†nh milliseconds
  },
  waitForNextCall: async function() {
    const now = Date.now();
    const timeSinceLastCall = now - this.lastCall;
    
    if (timeSinceLastCall < this.minInterval) {
      const waitTime = this.minInterval - timeSinceLastCall;
      console.log(`[WORKER] ‚è≥ Semaphore: Ch·ªù ${waitTime}ms ƒë·ªÉ tu√¢n th·ªß RPM limit`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
    
    this.lastCall = Date.now();
    console.log(`[WORKER] ‚úÖ Semaphore: Cho ph√©p g·ªçi API t·∫°i ${new Date().toLocaleTimeString()}`);
  }
};

// üöÄ Th√™m semaphore ƒë·ªÉ ki·ªÉm so√°t th·ªùi gian b·∫Øt ƒë·∫ßu gi·ªØa c√°c ch∆∞∆°ng
const chapterSemaphore = {
  lastChapterStart: 0,
  minInterval: 2000, // Default 2s, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo RPM
  setMinInterval: function(rpm) {
    // T√≠nh to√°n interval d·ª±a tr√™n RPM: 60/rpm gi√¢y
    this.minInterval = (60 / rpm) * 1000; // Chuy·ªÉn th√†nh milliseconds
    console.log(`[WORKER] ‚è±Ô∏è Chapter Semaphore: Thi·∫øt l·∫≠p interval ${this.minInterval}ms (60/${rpm}s) gi·ªØa c√°c ch∆∞∆°ng`);
  },
  waitForNextChapter: async function() {
    const now = Date.now();
    const timeSinceLastChapter = now - this.lastChapterStart;
    
    if (timeSinceLastChapter < this.minInterval) {
      const waitTime = this.minInterval - timeSinceLastChapter;
      console.log(`[WORKER] ‚è≥ Chapter Semaphore: Ch·ªù ${waitTime}ms tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ch∆∞∆°ng ti·∫øp theo`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
    
    this.lastChapterStart = Date.now();
    console.log(`[WORKER] ‚úÖ Chapter Semaphore: Cho ph√©p b·∫Øt ƒë·∫ßu ch∆∞∆°ng m·ªõi t·∫°i ${new Date().toLocaleTimeString()}`);
  }
};

// H√†m kh·ªüi t·∫°o socket v·ªõi retry
async function initializeSocket() {
  let retries = 0;
  const maxRetries = 5;
  
  while (retries < maxRetries) {
    try {
      console.log(`[WORKER] üîÑ Th·ª≠ k·∫øt n·ªëi Socket.io l·∫ßn ${retries + 1}/${maxRetries}...`);
      socket = await createSocketConnection();
      console.log('[WORKER] ‚úÖ Socket.io connection th√†nh c√¥ng');
      return socket;
    } catch (error) {
      retries++;
      console.error(`[WORKER] ‚ùå L·∫ßn ${retries} th·∫•t b·∫°i:`, error.message);
      
      if (retries < maxRetries) {
        const delay = retries * 2000; // TƒÉng delay theo s·ªë l·∫ßn retry
        console.log(`[WORKER] ‚è≥ Ch·ªù ${delay}ms tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        console.error('[WORKER] ‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Socket.io sau nhi·ªÅu l·∫ßn th·ª≠');
        throw error;
      }
    }
  }
}

const worker = new Worker('my-queue', async job => {
  console.log("üîÑ [WORKER] ===== B·∫ÆT ƒê·∫¶U X·ª¨ L√ù JOB =====");
  console.log(`[WORKER] üì• Nh·∫≠n job d·ªãch ch∆∞∆°ng: ${job.data.chapter?.chapterNumber}`);
  
  // üöÄ Ki·ªÉm tra job c√≥ ph·∫£i l√† job c≈© kh√¥ng
  const jobTimestamp = job.data.timestamp || 0;
  const jobServerId = job.data.serverId || 0;
  const currentTime = Date.now();
  const currentServerId = process.pid;
  
  // N·∫øu job qu√° c≈© (h∆°n 5 ph√∫t) th√¨ b·ªè qua
  if (currentTime - jobTimestamp > 300000) { // 5 ph√∫t = 300000ms thay v√¨ 30 ph√∫t
    console.log(`[WORKER] üö´ B·ªè qua job c≈©: timestamp ${jobTimestamp}, hi·ªán t·∫°i ${currentTime}, ch√™nh l·ªách ${currentTime - jobTimestamp}ms`);
    return { hasError: true, error: 'Job qu√° c≈©, ƒë√£ b·ªè qua' };
  }
  
  // Ch·ªâ b·ªè qua job t·ª´ server kh√°c n·∫øu job qu√° c≈© (h∆°n 2 ph√∫t)
  if (jobServerId !== 0 && jobServerId !== currentServerId && (currentTime - jobTimestamp > 120000)) {
    console.log(`[WORKER] üö´ B·ªè qua job t·ª´ server kh√°c: jobServerId ${jobServerId}, currentServerId ${currentServerId}, job c≈© ${currentTime - jobTimestamp}ms`);
    return { hasError: true, error: 'Job t·ª´ server kh√°c v√† qu√° c≈©, ƒë√£ b·ªè qua' };
  }
  
  console.log(`[WORKER] ‚úÖ Job h·ª£p l·ªá: timestamp ${jobTimestamp}, serverId ${jobServerId}, tu·ªïi ${currentTime - jobTimestamp}ms`);
  
  // üöÄ Th√™m timeout cho job ƒë·ªÉ tr√°nh ch·∫°y qu√° l√¢u
  const jobTimeout = setTimeout(() => {
    console.log(`[WORKER] ‚è∞ Job ${job.id} timeout sau 5 ph√∫t`);
    job.moveToFailed(new Error('Job timeout'), '0', true);
  }, 300000); // 5 ph√∫t
  
  console.log("[WORKER] üìã Job data:", {
    chapterNumber: job.data.chapter?.chapterNumber,
    model: job.data.model?.label || job.data.model?.name || job.data.model,
    modelValue: job.data.model?.value,
    modelRpm: job.data.model?.rpm,
    modelTpm: job.data.model?.tpm,
    modelRpd: job.data.model?.rpd,
    storyId: job.data.storyId,
    userId: job.data.userId,
    jobIndex: job.data.jobIndex,
    totalJobs: job.data.totalJobs,
    titleLength: job.data.chapter?.title?.length || 0,
    contentLength: job.data.chapter?.content?.length || 0,
    timestamp: job.data.timestamp,
    serverId: job.data.serverId
  });
  
  // üöÄ Ki·ªÉm so√°t concurrency ƒë·ªÉ tr√°nh qu√° t·∫£i API
  activeJobs++;
  console.log(`[WORKER] üö¶ Active jobs: ${activeJobs}/${MAX_CONCURRENT_JOBS}`);
  
  try {
    // ƒê·∫£m b·∫£o socket ƒë√£ k·∫øt n·ªëi
    if (!socket || !socket.connected) {
      console.log('[WORKER] üîå Socket ch∆∞a k·∫øt n·ªëi, th·ª≠ k·∫øt n·ªëi l·∫°i...');
      try {
        socket = await initializeSocket();
      } catch (error) {
        console.error('[WORKER] ‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Socket.io, b·ªè qua emit k·∫øt qu·∫£');
      }
    }

    // üöÄ Emit ngay khi b·∫Øt ƒë·∫ßu x·ª≠ l√Ω job ƒë·ªÉ FE bi·∫øt ch∆∞∆°ng ƒë√£ b·∫Øt ƒë·∫ßu
    if (socket && socket.connected) {
      const room = job.data.userId ? `user:${job.data.userId}` : `story:${job.data.storyId}`;
      console.log(`[WORKER] üöÄ Emit chapterStarted v·ªÅ room: ${room}`);
      socket.emit('chapterStarted', {
        chapterNumber: job.data.chapter.chapterNumber,
        jobIndex: job.data.jobIndex,
        totalJobs: job.data.totalJobs,
        room: room,
        startTime: Date.now(),
        modelRpm: job.data.model?.rpm
      });
    }

    // üöÄ S·ª≠ d·ª•ng chapterSemaphore ƒë·ªÉ ki·ªÉm so√°t th·ªùi gian b·∫Øt ƒë·∫ßu gi·ªØa c√°c ch∆∞∆°ng
    if (job.data.model && job.data.model.rpm) {
      // Thi·∫øt l·∫≠p interval cho chapterSemaphore d·ª±a tr√™n RPM
      chapterSemaphore.setMinInterval(job.data.model.rpm);
      
      // Ch·ªù semaphore cho ph√©p b·∫Øt ƒë·∫ßu ch∆∞∆°ng m·ªõi
      await chapterSemaphore.waitForNextChapter();
    }

    // (ƒê√É B·ªé) Kh√¥ng emit progress b·∫Øt ƒë·∫ßu n·ªØa

    console.log("[WORKER] üîÑ B·∫Øt ƒë·∫ßu d·ªãch ch∆∞∆°ng...");
    
    // L∆∞u th·ªùi gian b·∫Øt ƒë·∫ßu d·ªãch
    const translationStartTime = Date.now();
    
    // üöÄ S·ª≠ d·ª•ng semaphore thay v√¨ delay c·ªë ƒë·ªãnh
    if (job.data.model && job.data.model.rpm) {
      // Thi·∫øt l·∫≠p RPM limit cho semaphore
      apiCallSemaphore.setMinInterval(job.data.model.rpm);
      console.log(`[WORKER] ‚è±Ô∏è Semaphore: Thi·∫øt l·∫≠p RPM limit ${job.data.model.rpm} (${apiCallSemaphore.minInterval}ms gi·ªØa c√°c l·∫ßn g·ªçi)`);
      
      // Ch·ªù semaphore cho ph√©p g·ªçi API
      await apiCallSemaphore.waitForNextCall();
    }
    
    // üöÄ Th√™m delay b·ªï sung n·∫øu c√≥ l·ªói 503 g·∫ßn ƒë√¢y
    const recent503Errors = job.data.recent503Errors || 0;
    if (recent503Errors > 0) {
      const additionalDelay = recent503Errors * 5000; // 5s cho m·ªói l·ªói 503
      console.log(`[WORKER] ‚è±Ô∏è Th√™m delay ${additionalDelay}ms do c√≥ ${recent503Errors} l·ªói 503 g·∫ßn ƒë√¢y`);
      await new Promise(resolve => setTimeout(resolve, additionalDelay));
    }
    
    // (ƒê√É B·ªé) Kh√¥ng g·ª≠i progress t·ª´ng b∆∞·ªõc n·ªØa
    
    const result = await callTranslateAPI(job.data.chapter, job.data.model, job.data.apiKey, job.data.storyId);
    
    // (ƒê√É B·ªé) Kh√¥ng clear/emit progress 100% n·ªØa
    
    // T√≠nh th·ªùi gian th·ª±c t·∫ø ƒë√£ d·ªãch
    const actualDuration = (Date.now() - translationStartTime) / 1000;
    
    console.log(`[WORKER] ‚úÖ D·ªãch xong ch∆∞∆°ng ${job.data.chapter?.chapterNumber} trong ${actualDuration.toFixed(1)}s`);
    console.log("[WORKER] üìä K·∫øt qu·∫£ d·ªãch:", {
      chapterNumber: job.data.chapter.chapterNumber,
      hasTranslatedTitle: !!result.translatedTitle,
      hasTranslatedContent: !!result.translatedContent,
      titleLength: result.translatedTitle?.length || 0,
      contentLength: result.translatedContent?.length || 0,
      duration: result.duration,
      actualDuration: actualDuration,
      hasError: result.hasError
    });
    // üîé Th√™m preview r√µ r√†ng ƒë·ªÉ debug: t√™n ch∆∞∆°ng v√† 250 k√Ω t·ª± ƒë·∫ßu n·ªôi dung
    const titlePreview = (result.translatedTitle || '').replace(/\s+/g, ' ').slice(0, 120);
    const contentPreview = (result.translatedContent || '').replace(/\s+/g, ' ').slice(0, 250);
    console.log(`[WORKER] üß© Preview ch∆∞∆°ng ${job.data.chapter?.chapterNumber}:`);
    console.log(`        ‚Ä¢ Ti√™u ƒë·ªÅ: "${titlePreview}"`);
    console.log(`        ‚Ä¢ N·ªôi dung[0..250]: "${contentPreview}"`);

    // Emit k·∫øt qu·∫£ v·ªÅ FE qua socket v·ªõi format room r√µ r√†ng
    if (socket && socket.connected) {
      const room = job.data.userId ? `user:${job.data.userId}` : `story:${job.data.storyId}`;
      console.log(`[WORKER] üì§ Emit k·∫øt qu·∫£ v·ªÅ room: ${room}`);
      console.log(`[WORKER] üìã D·ªØ li·ªáu emit:`, {
        chapterNumber: job.data.chapter.chapterNumber,
        hasTranslatedTitle: !!result.translatedTitle,
        hasTranslatedContent: !!result.translatedContent,
        titleLength: result.translatedTitle?.length || 0,
        contentLength: result.translatedContent?.length || 0,
        duration: result.duration,
        actualDuration: actualDuration,
        hasError: result.hasError,
        jobIndex: job.data.jobIndex,
        totalJobs: job.data.totalJobs,
        room: room
      });
      console.log(`[WORKER] üß© Emit preview: title="${titlePreview}", content[0..250]="${contentPreview}"`);
      
      socket.emit('chapterTranslated', {
        chapterNumber: job.data.chapter.chapterNumber,
        translatedContent: result.translatedContent,
        translatedTitle: result.translatedTitle,
        duration: result.duration,
        actualDuration: actualDuration,
        hasError: result.hasError,
        error: result.error,
        jobIndex: job.data.jobIndex,
        totalJobs: job.data.totalJobs,
        room: room
      });
    } else {
      console.warn('[WORKER] ‚ö†Ô∏è Socket kh√¥ng k·∫øt n·ªëi, kh√¥ng th·ªÉ emit k·∫øt qu·∫£');
    }
    
    console.log("üîÑ [WORKER] ===== HO√ÄN TH√ÄNH JOB =====");
    return result;
  } catch (err) {
    
    console.error(`[WORKER] ‚ùå L·ªói d·ªãch ch∆∞∆°ng ${job.data.chapter?.chapterNumber}:`, err);
    
    // ƒê·∫£m b·∫£o clear timeout cho job
    if (typeof jobTimeout !== 'undefined') {
      clearTimeout(jobTimeout);
    }

    // üöÄ Ki·ªÉm tra n·∫øu l√† l·ªói 503, kh√¥ng retry
    if (err.message && err.message.includes('503')) {
      console.log(`[WORKER] üö´ L·ªói 503 - Service Unavailable, b·ªè qua retry cho ch∆∞∆°ng ${job.data.chapter?.chapterNumber}`);
      
      // Emit l·ªói v·ªÅ FE qua socket v·ªõi format room r√µ r√†ng
      if (socket && socket.connected) {
        const room = job.data.userId ? `user:${job.data.userId}` : `story:${job.data.storyId}`;
        console.log(`[WORKER] üì§ Emit l·ªói 503 v·ªÅ room: ${room}`);
        
        socket.emit('chapterTranslated', {
          chapterNumber: job.data.chapter.chapterNumber,
          error: 'Service Unavailable - API qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau',
          hasError: true,
          jobIndex: job.data.jobIndex,
          totalJobs: job.data.totalJobs,
          room: room
        });

        // (ƒê√É B·ªé) Kh√¥ng emit progress l·ªói
      }
      
      console.log("üîÑ [WORKER] ===== JOB 503 TH·∫§T B·∫†I =====");
      // Kh√¥ng throw error ƒë·ªÉ tr√°nh retry
      return { hasError: true, error: 'Service Unavailable' };
    }
    
    // Emit l·ªói v·ªÅ FE qua socket v·ªõi format room r√µ r√†ng
    if (socket && socket.connected) {
      const room = job.data.userId ? `user:${job.data.userId}` : `story:${job.data.storyId}`;
      console.log(`[WORKER] üì§ Emit l·ªói v·ªÅ room: ${room}`);
      
      socket.emit('chapterTranslated', {
        chapterNumber: job.data.chapter.chapterNumber,
        error: err.message,
        hasError: true,
        jobIndex: job.data.jobIndex,
        totalJobs: job.data.totalJobs,
        room: room
      });
      // (ƒê√É B·ªé) Kh√¥ng emit progress l·ªói
    }
    
    console.log("üîÑ [WORKER] ===== JOB TH·∫§T B·∫†I =====");
    throw err;
  } finally {
    // üöÄ Gi·∫£m s·ªë l∆∞·ª£ng active jobs khi job ho√†n th√†nh (th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i)
    activeJobs--;
    console.log(`[WORKER] üö¶ Active jobs sau khi ho√†n th√†nh: ${activeJobs}/${MAX_CONCURRENT_JOBS}`);
    
    // üöÄ Clear timeout cho job
    if (typeof jobTimeout !== 'undefined') {
      clearTimeout(jobTimeout);
    }
  }
}, { 
  connection,
  concurrency: 3 // üöÄ X·ª≠ l√Ω 3 job song song thay v√¨ 1 job tu·∫ßn t·ª±
});

worker.on('completed', job => {
  console.log(`[WORKER] Job ${job.id} ƒë√£ ho√†n th√†nh!`);
});

worker.on('failed', (job, err) => {
  console.error(`[WORKER] Job ${job.id} th·∫•t b·∫°i:`, err);
  
  // üöÄ Ki·ªÉm tra n·∫øu l√† l·ªói 503 (Service Unavailable), kh√¥ng retry
  if (err.message && err.message.includes('503')) {
    console.log(`[WORKER] üö´ Job ${job.id} b·ªã l·ªói 503, b·ªè qua retry`);
    return;
  }
  
  // üöÄ Ki·ªÉm tra s·ªë l·∫ßn retry ƒë√£ th·ª±c hi·ªán
  const attemptsMade = job.attemptsMade;
  const maxAttempts = job.opts.attempts || 3;
  
  if (attemptsMade >= maxAttempts) {
    console.log(`[WORKER] üö´ Job ${job.id} ƒë√£ retry ${attemptsMade}/${maxAttempts} l·∫ßn, b·ªè qua`);
    return;
  }
  
  console.log(`[WORKER] üîÑ Job ${job.id} s·∫Ω retry l·∫ßn ${attemptsMade + 1}/${maxAttempts}`);
});

// Kh·ªüi t·∫°o socket khi worker start
initializeSocket().then(() => {
  console.log('[WORKER] ‚úÖ Worker ƒë√£ s·∫µn s√†ng v·ªõi Socket.io connection');
  
  // üöÄ Clear queue c≈© khi worker start
  clearOldJobs();
}).catch(error => {
  console.error('[WORKER] ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Socket.io connection:', error);
});

// üöÄ H√†m clear job c≈©
const clearOldJobs = async () => {
  try {
    console.log('[WORKER] üßπ ƒêang clear job c≈©...');
    
    const waitingJobs = await myQueue.getWaiting();
    const queueActiveJobs = await myQueue.getActive();
    const delayedJobs = await myQueue.getDelayed();
    const failedJobs = await myQueue.getFailed();
    
    console.log(`[WORKER] üìä T√¨m th·∫•y jobs:`, {
      waiting: waitingJobs.length,
      active: queueActiveJobs.length,
      delayed: delayedJobs.length,
      failed: failedJobs.length
    });
    
    // X√≥a t·∫•t c·∫£ jobs c≈©
    let clearedCount = 0;
    
    for (const job of [...waitingJobs, ...queueActiveJobs, ...delayedJobs, ...failedJobs]) {
      try {
        await job.remove();
        clearedCount++;
      } catch (error) {
        console.log(`[WORKER] ‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a job ${job.id}:`, error.message);
      }
    }
    
    console.log(`[WORKER] ‚úÖ ƒê√£ clear ${clearedCount} jobs c≈©`);
  } catch (error) {
    console.error('[WORKER] ‚ùå L·ªói khi clear job c≈©:', error);
  }
};

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('[WORKER] üõë ƒêang ƒë√≥ng worker gracefully...');
  try {
    // üöÄ D·ª´ng nh·∫≠n job m·ªõi
    await worker.pause();
    console.log('[WORKER] ‚úÖ ƒê√£ pause worker');
    
    // üöÄ ƒê·ª£i c√°c job ƒëang ch·∫°y ho√†n th√†nh (t·ªëi ƒëa 30 gi√¢y)
    let waitTime = 0;
    const maxWaitTime = 30000; // 30 gi√¢y
    const checkInterval = 1000; // 1 gi√¢y
    
    while (activeJobs > 0 && waitTime < maxWaitTime) {
      console.log(`[WORKER] ‚è≥ ƒê·ª£i ${activeJobs} job ho√†n th√†nh... (${waitTime}ms/${maxWaitTime}ms)`);
      await new Promise(resolve => setTimeout(resolve, checkInterval));
      waitTime += checkInterval;
    }
    
    if (activeJobs > 0) {
      console.log(`[WORKER] ‚ö†Ô∏è V·∫´n c√≤n ${activeJobs} job ch∆∞a ho√†n th√†nh, force close`);
    } else {
      console.log('[WORKER] ‚úÖ T·∫•t c·∫£ job ƒë√£ ho√†n th√†nh');
    }
    
    // üöÄ ƒê√≥ng worker
    await worker.close();
    console.log('[WORKER] ‚úÖ ƒê√£ ƒë√≥ng worker');
    
    // üöÄ ƒê√≥ng queue
    await myQueue.close();
    console.log('[WORKER] ‚úÖ ƒê√£ ƒë√≥ng queue');
    
    // üöÄ ƒê√≥ng socket
    if (socket) {
      socket.disconnect();
      console.log('[WORKER] ‚úÖ ƒê√£ ƒë√≥ng socket');
    }
    
    console.log('[WORKER] ‚úÖ Graceful shutdown ho√†n th√†nh');
  } catch (error) {
    console.error('[WORKER] ‚ùå L·ªói khi ƒë√≥ng worker:', error);
  }
  process.exit(0);
});

// üöÄ Th√™m handler cho SIGTERM
process.on('SIGTERM', async () => {
  console.log('[WORKER] üõë Nh·∫≠n SIGTERM, ƒëang ƒë√≥ng worker...');
  try {
    await worker.close();
    await myQueue.close();
    if (socket) {
      socket.disconnect();
    }
    console.log('[WORKER] ‚úÖ ƒê√£ ƒë√≥ng worker v·ªõi SIGTERM');
  } catch (error) {
    console.error('[WORKER] ‚ùå L·ªói khi ƒë√≥ng worker v·ªõi SIGTERM:', error);
  }
  process.exit(0);
}); 