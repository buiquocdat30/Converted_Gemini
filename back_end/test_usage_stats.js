const { prisma, toObjectId } = require("./config/prismaConfig");

async function testUsageStats() {
  try {
    console.log("üîç B·∫Øt ƒë·∫ßu test usage stats...\n");

    // Test 1: L·∫•y t·∫•t c·∫£ user keys v√† usage
    console.log("üìä Test 1: L·∫•y t·∫•t c·∫£ user keys v√† usage");
    const allKeys = await prisma.userApiKey.findMany({
      include: {
        usage: {
          include: {
            model: true
          }
        }
      }
    });

    console.log(`T√¨m th·∫•y ${allKeys.length} user keys`);
    allKeys.forEach((key, index) => {
      console.log(`\nKey ${index + 1}: ${key.key.substring(0, 10)}...`);
      console.log(`- Label: ${key.label}`);
      console.log(`- Usage records: ${key.usage.length}`);
      key.usage.forEach((usage, uIndex) => {
        console.log(`  Usage ${uIndex + 1}:`);
        console.log(`    - Model: ${usage.model.label} (${usage.model.value})`);
        console.log(`    - Status: ${usage.status}`);
        console.log(`    - Usage Count: ${usage.usageCount}`);
        console.log(`    - Total Tokens: ${usage.totalTokens}`);
        console.log(`    - Last Used At: ${usage.lastUsedAt}`);
      });
    });

    // Test 2: L·∫•y th·ªëng k√™ theo ng√†y h√¥m nay (logic hi·ªán t·∫°i)
    console.log("\nüìä Test 2: Th·ªëng k√™ theo ng√†y h√¥m nay (logic hi·ªán t·∫°i)");
    const now = new Date();
    const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);
    const endOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);

    console.log(`Th·ªùi gian filter: ${startOfDay.toISOString()} - ${endOfDay.toISOString()}`);

    const todayKeys = await prisma.userApiKey.findMany({
      where: {
        usage: {
          some: {
            lastUsedAt: {
              gte: startOfDay,
              lte: endOfDay
            }
          }
        }
      },
      include: {
        usage: {
          where: {
            lastUsedAt: {
              gte: startOfDay,
              lte: endOfDay
            }
          },
          include: {
            model: true
          }
        }
      }
    });

    console.log(`T√¨m th·∫•y ${todayKeys.length} keys c√≥ s·ª≠ d·ª•ng h√¥m nay`);
    todayKeys.forEach((key, index) => {
      console.log(`\nKey ${index + 1}: ${key.key.substring(0, 10)}...`);
      console.log(`- Usage records h√¥m nay: ${key.usage.length}`);
      key.usage.forEach((usage, uIndex) => {
        console.log(`  Usage ${uIndex + 1}:`);
        console.log(`    - Model: ${usage.model.label}`);
        console.log(`    - Usage Count: ${usage.usageCount}`);
        console.log(`    - Last Used At: ${usage.lastUsedAt}`);
      });
    });

    // Test 3: L·∫•y t·∫•t c·∫£ usage records c√≥ lastUsedAt trong ng√†y h√¥m nay
    console.log("\nüìä Test 3: T·∫•t c·∫£ usage records c√≥ lastUsedAt h√¥m nay");
    const todayUsages = await prisma.userApiKeyUsage.findMany({
      where: {
        lastUsedAt: {
          gte: startOfDay,
          lte: endOfDay
        }
      },
      include: {
        userApiKey: true,
        model: true
      }
    });

    console.log(`T√¨m th·∫•y ${todayUsages.length} usage records c√≥ lastUsedAt h√¥m nay`);
    todayUsages.forEach((usage, index) => {
      console.log(`\nUsage ${index + 1}:`);
      console.log(`- Key: ${usage.userApiKey.key.substring(0, 10)}...`);
      console.log(`- Model: ${usage.model.label}`);
      console.log(`- Usage Count: ${usage.usageCount}`);
      console.log(`- Last Used At: ${usage.lastUsedAt}`);
    });

    // Test 4: Ki·ªÉm tra logic t√≠nh to√°n th·ªëng k√™ theo ng√†y
    console.log("\nüìä Test 4: Logic t√≠nh to√°n th·ªëng k√™ theo ng√†y");
    const allUsages = await prisma.userApiKeyUsage.findMany({
      include: {
        userApiKey: true,
        model: true
      }
    });

    console.log(`T·ªïng s·ªë usage records: ${allUsages.length}`);
    
    // Ph√¢n t√≠ch t·ª´ng usage record
    allUsages.forEach((usage, index) => {
      const lastUsedAt = usage.lastUsedAt;
      const isUsedToday = lastUsedAt && lastUsedAt >= startOfDay && lastUsedAt <= endOfDay;
      const isUsedYesterday = lastUsedAt && lastUsedAt >= new Date(startOfDay.getTime() - 24*60*60*1000) && lastUsedAt < startOfDay;
      
      console.log(`\nUsage ${index + 1}:`);
      console.log(`- Key: ${usage.userApiKey.key.substring(0, 10)}...`);
      console.log(`- Model: ${usage.model.label}`);
      console.log(`- Usage Count: ${usage.usageCount}`);
      console.log(`- Last Used At: ${lastUsedAt}`);
      console.log(`- Is Used Today: ${isUsedToday}`);
      console.log(`- Is Used Yesterday: ${isUsedYesterday}`);
      
      if (isUsedToday) {
        console.log(`  ‚úÖ ƒê∆∞·ª£c t√≠nh l√† s·ª≠ d·ª•ng h√¥m nay`);
      }
    });

    // Test 5: T·∫°o d·ªØ li·ªáu test m·ªõi
    console.log("\nüìä Test 5: T·∫°o d·ªØ li·ªáu test m·ªõi");
    
    // T√¨m m·ªôt user key ƒë·ªÉ test
    const testKey = await prisma.userApiKey.findFirst({
      include: {
        usage: {
          include: {
            model: true
          }
        }
      }
    });

    if (testKey && testKey.usage.length > 0) {
      const testUsage = testKey.usage[0];
      console.log(`Test v·ªõi key: ${testKey.key.substring(0, 10)}...`);
      console.log(`Model: ${testUsage.model.label}`);
      console.log(`Usage Count hi·ªán t·∫°i: ${testUsage.usageCount}`);
      
      // C·∫≠p nh·∫≠t lastUsedAt th√†nh h√¥m nay
      const updatedUsage = await prisma.userApiKeyUsage.update({
        where: { id: testUsage.id },
        data: {
          lastUsedAt: new Date(),
          usageCount: { increment: 5 }
        }
      });
      
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t usage record:`);
      console.log(`- Usage Count m·ªõi: ${updatedUsage.usageCount}`);
      console.log(`- Last Used At m·ªõi: ${updatedUsage.lastUsedAt}`);
    }

    console.log("\n‚úÖ Test ho√†n th√†nh!");

  } catch (error) {
    console.error("‚ùå L·ªói trong test:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y test
testUsageStats();
