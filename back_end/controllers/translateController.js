const { translateText } = require("../services/translateService");
const ApiKeyManager = require("../services/apiKeyManagers");
const { prisma } = require("../config/prismaConfig");
const { toObjectId } = require("../config/prismaConfig");

exports.translateText = async (req, res) => {
  const { chapters, userKey, userKeys, model } = req.body;
  const userId = req.user?.id; // L·∫•y userId t·ª´ token n·∫øu c√≥
  
  console.log("üìå Y√™u c·∫ßu d·ªãch nh·∫≠n ƒë∆∞·ª£c:", {
    chapters: chapters,
    totalChapters: chapters?.length,
    hasUserKey: !!userKey,
    hasUserKeys: !!userKeys,
    userKeysCount: userKeys?.length || 0,
    modelAI: model,
    userId: userId || 'anonymous'
  });

  // Validate input
  if (!chapters || !Array.isArray(chapters)) {
    return res.status(400).json({ error: "Thi·∫øu danh s√°ch ch∆∞∆°ng c·∫ßn d·ªãch." });
  }

  if (!model) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin model." });
  }

  // Validate t·ª´ng ch∆∞∆°ng
  const validChapters = chapters.filter(ch => {
    if (!ch || typeof ch !== 'object') {
      console.log("‚ö†Ô∏è B·ªè qua ch∆∞∆°ng kh√¥ng h·ª£p l·ªá:", ch);
      return false;
    }
    if (!ch.content && !ch.title) {
      console.log("‚ö†Ô∏è B·ªè qua ch∆∞∆°ng kh√¥ng c√≥ n·ªôi dung v√† ti√™u ƒë·ªÅ:", ch);
      return false;
    }
    
    return true;
  });
  console.log("validChapters n·ªôi dung c·ªßa n√≥", validChapters)
  if (validChapters.length === 0) {
    return res.status(400).json({ error: "Kh√¥ng c√≥ ch∆∞∆°ng n√†o h·ª£p l·ªá ƒë·ªÉ d·ªãch." });
  }

  console.log(`üìö S·ªë ch∆∞∆°ng h·ª£p l·ªá c·∫ßn d·ªãch: ${validChapters.length}`);

  try {
    // Kh·ªüi t·∫°o key manager
    const keyManager = new ApiKeyManager();
    
    // X·ª≠ l√Ω keys - ∆∞u ti√™n userKeys n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng userKey
    let keysToUse = [];
    if (userKeys && Array.isArray(userKeys) && userKeys.length > 0) {
      keysToUse = userKeys;
      console.log(`üîë S·ª≠ d·ª•ng ${userKeys.length} keys t·ª´ danh s√°ch ƒë√£ ch·ªçn`);
    } else if (userKey) {
      keysToUse = [userKey];
      console.log("üîë S·ª≠ d·ª•ng 1 key t·ª´ userKey");
    } else {
      console.log("üîë Kh√¥ng c√≥ key n√†o ƒë∆∞·ª£c cung c·∫•p, s·∫Ω d√πng key m·∫∑c ƒë·ªãnh");
    }

    // Ki·ªÉm tra xem c√≥ key kh·∫£ d·ª•ng kh√¥ng
    const hasAvailableKeys = await keyManager.hasAvailableKeys(keysToUse, userId, model);
    if (!hasAvailableKeys) {
      return res.status(400).json({ 
        error: "Kh√¥ng c√≥ key kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra l·∫°i API key ho·∫∑c th·ª≠ l·∫°i sau." 
      });
    }

    const translationPromises = validChapters.map(async (ch, index) => {
      const startTime = Date.now();
      try {
        // Log th√¥ng tin ch∆∞∆°ng ƒë·ªÉ ki·ªÉm tra
        console.log(`üìñ Th√¥ng tin ch∆∞∆°ng ${index + 1}:`, {
          chapterNumber: ch.chapterNumber,
          chapterName: ch.title,
          content: ch.content ? ch.content.substring(0, 100) + '...' : 'Kh√¥ng c√≥ n·ªôi dung',
          hasChapterName: !!ch.chapterName,
          chapterKeys: Object.keys(ch)
        });

        // L·∫•y key ƒë·ªÉ s·ª≠ d·ª•ng t·ª´ danh s√°ch keys
        const keyToUse = await keyManager.getKeyToUse(userId, keysToUse, model);
        if (!keyToUse) {
          throw new Error("Kh√¥ng t√¨m th·∫•y key kh·∫£ d·ª•ng");
        }
        console.log(`üîë S·ª≠ d·ª•ng key cho ch∆∞∆°ng ${ch.chapterNumber}`);

        // X·ª≠ l√Ω n·ªôi dung
        let translatedTitle = "";
        let translatedContent = "";
        if (ch.content && typeof ch.content === 'string') {
          try {
            // D·ªãch ti√™u ƒë·ªÅ ch∆∞∆°ng
            translatedTitle = await translateText(ch.title, keyToUse, model);
            console.log("translatedTitle translationPromises", translatedTitle)
            // D·ªãch n·ªôi dung ch∆∞∆°ng
            translatedContent = await translateText(ch.content, keyToUse, model);
            console.log("translatedContent translationPromises", translatedContent)
            
          } catch (err) {
            const errorMessage = err.message || err.toString();
            console.error(`‚ùå L·ªói d·ªãch ch∆∞∆°ng ${index + 1}:`, errorMessage);

            // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
            if (errorMessage.includes("Too Many Requests") || errorMessage.includes("quotaMetric")) {
              if (userId && keyToUse) {
                await keyManager.handle429Error(userId, keyToUse);
              }
              throw new Error("ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.");
            }

            if (errorMessage.includes("API key") || errorMessage.includes("permission") || errorMessage.includes("quota")) {
              if (userId && keyToUse) {
                await keyManager.exhaustKey(userId, keyToUse);
              }
              throw new Error("API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt quota.");
            }

            throw err;
          }
        }

        const endTime = Date.now();
        const translationTime = (endTime - startTime) / 1000; // Th·ªùi gian d·ªãch t√≠nh b·∫±ng gi√¢y

        console.log(
          `‚úÖ D·ªãch xong ch∆∞∆°ng ${index + 1}/${validChapters.length} | Th·ªùi gian: ${translationTime}s`
        );

        // Log d·ªØ li·ªáu tr∆∞·ªõc khi return
        console.log(`üì§ D·ªØ li·ªáu ch∆∞∆°ng ${index + 1} tr∆∞·ªõc khi return:`, {
          originalTitle: ch.title,
          translatedTitle,
          hasTranslatedTitle: !!translatedTitle,
          originalContent: ch.content ? ch.content.substring(0, 100) + '...' : 'Kh√¥ng c√≥ n·ªôi dung',
          translatedContent: translatedContent ? translatedContent.substring(0, 100) + '...' : 'Kh√¥ng c√≥ n·ªôi dung',
          hasTranslatedContent: !!translatedContent,
          translationTime: translationTime
        });

        return {
          ...ch,
          translatedTitle: translatedTitle || ch.title,
          translatedContent: translatedContent || ch.content,
          timeTranslation: translationTime, // üëâ Th√™m th·ªùi gian d·ªãch
          status: "TRANSLATED"
        };
      } catch (err) {
        console.error(`‚ùå L·ªói d·ªãch ch∆∞∆°ng ${index + 1}:`, err.message);
        // Tr·∫£ v·ªÅ ch∆∞∆°ng g·ªëc n·∫øu d·ªãch th·∫•t b·∫°i
        return {
          ...ch,
          translatedTitle: ch.title,
          translated: ch.content,
          translationError: err.message
        };
      }
    });

    const translatedChapters = await Promise.all(translationPromises);
    
    // Log k·∫øt qu·∫£ sau khi d·ªãch xong t·∫•t c·∫£ c√°c ch∆∞∆°ng
    console.log("üìö K·∫øt qu·∫£ d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng:", {
      totalChapters: translatedChapters.length,
      chapters: translatedChapters.map((ch, index) => ({
        chapterNumber: ch.chapterNumber,
        originalTitle: ch.title,
        translatedTitle: ch.translatedTitle,
        hasTranslatedTitle: !!ch.translatedTitle,
        originalContent: ch.content ? ch.content.substring(0, 100) + '...' : 'Kh√¥ng c√≥ n·ªôi dung',
        translatedContent: ch.translatedContent ? ch.translatedContent.substring(0, 100) + '...' : 'Kh√¥ng c√≥ n·ªôi dung',
        hasTranslatedContent: !!ch.translatedContent,
        status: ch.status
      }))
    });

    // L·ªçc c√°c ch∆∞∆°ng c√≥ l·ªói d·ªãch (bao g·ªìm c·∫£ l·ªói translationError v√† l·ªói thi·∫øu n·ªôi dung)
    const failedChapters = translatedChapters.filter(ch => 
      ch.translationError || !ch.translatedTitle || !ch.translatedContent
    );
    const successfulChapters = translatedChapters.filter(ch => 
      !ch.translationError && ch.translatedTitle && ch.translatedContent
    );

    if (failedChapters.length > 0) {
      console.warn("‚ö†Ô∏è C√≥ ch∆∞∆°ng d·ªãch kh√¥ng th√†nh c√¥ng:", 
        failedChapters.map(ch => ({
          chapterNumber: ch.chapterNumber,
          error: ch.translationError || 'Thi·∫øu n·ªôi dung d·ªãch'
        }))
      );
    }

    // Ki·ªÉm tra xem c√≤n key kh·∫£ d·ª•ng kh√¥ng sau khi d·ªãch
    const stillHasKeys = await keyManager.hasAvailableKeys(keysToUse, userId, model);
    if (!stillHasKeys) {
      console.warn("‚ö†Ô∏è ƒê√£ h·∫øt key kh·∫£ d·ª•ng sau khi d·ªãch");
    }

    res.json({ 
      chapters: translatedChapters,
      stats: {
        total: validChapters.length,
        success: successfulChapters.length,
        failed: failedChapters.length
      },
      keyStatus: {
        hasAvailableKeys: stillHasKeys,
        lastError: keyManager.getLastError()
      }
    });
  } catch (err) {
    console.error("‚ùå L·ªói d·ªãch ch∆∞∆°ng:", err.message);
    res.status(500).json({
      error: "D·ªãch th·∫•t b·∫°i. Ki·ªÉm tra l·∫°i API key ho·∫∑c n·ªôi dung.",
      details: err.message
    });
  }
};
