const { myQueue } = require('../utils/queue');
const ApiKeyManager = require("../services/apiKeyManagers");
const { translateText } = require("../services/translateService");

// Endpoint d·ªãch tr·ª±c ti·∫øp (gi·ªØ nguy√™n)
exports.translateText = async (req, res) => {
  const { chapters, userKey, userKeys, model, storyId } = req.body;
  const userId = req.user?.id || "anonymous";
  
  console.log("üöÄ [API] ===== B·∫ÆT ƒê·∫¶U NH·∫¨N Y√äU C·∫¶U D·ªäCH =====");
  console.log("[API] üì• D·ªØ li·ªáu nh·∫≠n t·ª´ FE:", {
    storyId,
    userId,
    model: model?.label || model?.name || model,
    modelValue: model?.value,
    modelRpm: model?.rpm,
    modelTpm: model?.tpm,
    modelRpd: model?.rpd,
    chaptersCount: chapters?.length || 0,
    hasUserKey: !!userKey,
    hasUserKeys: !!userKeys,
    userKeysCount: userKeys?.length || 0
  });

  // Validate input
  if (!chapters || !Array.isArray(chapters) || chapters.length === 0) {
    console.log("[API] ‚ùå L·ªói: Thi·∫øu danh s√°ch ch∆∞∆°ng c·∫ßn d·ªãch");
    return res.status(400).json({ error: "Thi·∫øu danh s√°ch ch∆∞∆°ng c·∫ßn d·ªãch." });
  }
  if (!model) {
    console.log("[API] ‚ùå L·ªói: Thi·∫øu th√¥ng tin model");
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin model." });
  }

  console.log("[API] ‚úÖ Validation th√†nh c√¥ng");

  // L·∫•y key kh·∫£ d·ª•ng v·ªõi timeout
  console.log("[API] üîë ƒêang t√¨m key kh·∫£ d·ª•ng...");
  let keyToUse = null;
  
  try {
    const keyManager = new ApiKeyManager();
    let keysToUse = [];
    if (userKeys && Array.isArray(userKeys) && userKeys.length > 0) {
      keysToUse = userKeys;
      console.log(`[API] üìã S·ª≠ d·ª•ng ${userKeys.length} user keys`);
    } else if (userKey) {
      keysToUse = [userKey];
      console.log("[API] üìã S·ª≠ d·ª•ng 1 user key");
    }

    // Th√™m timeout cho vi·ªác t√¨m key
    const modelValueForKey = model?.value || model;
    const keyPromise = keyManager.getKeyToUse(userId, keysToUse, modelValueForKey);
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout khi t√¨m key kh·∫£ d·ª•ng')), 10000)
    );
    
    const keyResult = await Promise.race([keyPromise, timeoutPromise]);
    keyToUse = keyResult.key;
    
    console.log(`[API] ‚úÖ ƒê√£ t√¨m ƒë∆∞·ª£c key: ${keyToUse.substring(0, 8)}...`);
  } catch (error) {
    console.error("[API] ‚ùå L·ªói khi t√¨m key kh·∫£ d·ª•ng:", error.message);
    return res.status(500).json({ 
      error: `L·ªói khi t√¨m key kh·∫£ d·ª•ng: ${error.message}` 
    });
  }
  
  if (!keyToUse) {
    console.log("[API] ‚ùå L·ªói: Kh√¥ng c√≥ key kh·∫£ d·ª•ng");
    return res.status(400).json({ error: "Kh√¥ng c√≥ key kh·∫£ d·ª•ng." });
  }

  // D·ªãch tr·ª±c ti·∫øp t·ª´ng ch∆∞∆°ng v·ªõi timeout
  console.log("[API] üîÑ B·∫Øt ƒë·∫ßu d·ªãch tr·ª±c ti·∫øp...");
  const results = [];
  
  for (let i = 0; i < chapters.length; i++) {
    const ch = chapters[i];
    console.log(`[API] üìù ƒêang d·ªãch ch∆∞∆°ng ${ch.chapterNumber || i + 1}:`, {
          chapterNumber: ch.chapterNumber,
      titleLength: ch.title?.length || 0,
      contentLength: ch.content?.length || 0,
      model: model?.name || model
    });

    try {
      // T·∫°o keyInfo object theo format m√† translateText c·∫ßn
      const keyInfo = {
        key: keyToUse,
        usageId: null,
        isUserKey: true
      };

      // D·ªãch ti√™u ƒë·ªÅ v√† n·ªôi dung v·ªõi timeout
        const titlePromise = ch.title
        ? translateText(ch.title, keyInfo, model, 'title', storyId)
        : Promise.resolve({ translated: ch.title });

        const contentPromise = ch.content
        ? translateText(ch.content, keyInfo, model, 'content', storyId)
        : Promise.resolve({ translated: ch.content });

      // Timeout cho m·ªói ch∆∞∆°ng: 60 gi√¢y
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout d·ªãch ch∆∞∆°ng')), 60000)
      );

      const [titleResult, contentResult] = await Promise.race([
        Promise.all([titlePromise, contentPromise]),
        timeoutPromise
      ]);

      const duration = (titleResult.duration || 0) + (contentResult.duration || 0);
      
      console.log(`[API] ‚úÖ D·ªãch xong ch∆∞∆°ng ${ch.chapterNumber || i + 1}:`, {
        hasTranslatedTitle: !!titleResult.translated,
        hasTranslatedContent: !!contentResult.translated,
        titleLength: titleResult.translated?.length || 0,
        contentLength: contentResult.translated?.length || 0,
        duration: duration,
        titleDuration: titleResult.duration || 0,
        contentDuration: contentResult.duration || 0
      });

      results.push({
        chapterNumber: ch.chapterNumber || i + 1,
        translatedTitle: titleResult.translated,
        translatedContent: contentResult.translated,
        timeTranslation: duration,
        hasError: titleResult.hasError || contentResult.hasError,
        error: titleResult.error || contentResult.error
      });

    } catch (error) {
      console.error(`[API] ‚ùå L·ªói d·ªãch ch∆∞∆°ng ${ch.chapterNumber || i + 1}:`, error.message);
      results.push({
        chapterNumber: ch.chapterNumber || i + 1,
        translatedTitle: ch.title,
        translatedContent: ch.content,
        timeTranslation: 0,
        hasError: true,
        error: error.message
      });
    }
  }

  console.log(`[API] ‚úÖ ƒê√£ d·ªãch xong ${results.length} ch∆∞∆°ng`);
  console.log("[API] üì§ Tr·∫£ v·ªÅ response cho FE");
  console.log("üöÄ [API] ===== HO√ÄN TH√ÄNH D·ªäCH =====");

  // Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·ªãch
  res.json({ 
    success: true, 
    message: `ƒê√£ d·ªãch xong ${results.length} ch∆∞∆°ng`,
    chapters: results
  });
};

// Endpoint m·ªõi: Th√™m jobs v√†o queue
exports.translateTextQueue = async (req, res) => {
  console.log("üöÄ [QUEUE-API] ===== B·∫ÆT ƒê·∫¶U TH√äM JOBS V√ÄO QUEUE =====");
  
  const { chapters, userKeys, model, storyId, userId, isBatchTranslation } = req.body;
  
  console.log("[QUEUE-API] üìã Th√¥ng tin request:", {
    chaptersCount: chapters?.length || 0,
    hasUserKeys: !!userKeys,
    userKeysCount: userKeys?.length || 0,
    model: model?.label || model?.name || model,
    modelValue: model?.value,
    modelRpm: model?.rpm,
    modelTpm: model?.tpm,
    modelRpd: model?.rpd,
    storyId: storyId,
    userId: userId,
    isBatchTranslation: isBatchTranslation
  });

  if (!chapters || chapters.length === 0) {
    return res.status(400).json({ error: "Kh√¥ng c√≥ ch∆∞∆°ng n√†o ƒë·ªÉ d·ªãch." });
  }

  try {
    // L·∫•y key kh·∫£ d·ª•ng
    const keyManager = new ApiKeyManager();
    const keysToUse = userKeys || [];
    const userIdFromToken = req.user?.id || userId || 'anonymous';
    
    console.log("[QUEUE-API] üîë T√¨m key kh·∫£ d·ª•ng...");
    // Truy·ªÅn model.value thay v√¨ to√†n b·ªô model object
    const modelValueForKey = model?.value || model;
    const keyResult = await keyManager.getKeyToUse(userIdFromToken, keysToUse, modelValueForKey);
    const keyToUse = keyResult.key;
    
    console.log(`[QUEUE-API] ‚úÖ ƒê√£ t√¨m th·∫•y key: ${typeof keyToUse === 'string' ? keyToUse.substring(0, 8) + '...' : 'unknown'}`);

    // L·∫•y th√¥ng tin model ƒë·∫ßy ƒë·ªß t·ª´ database n·∫øu c·∫ßn
    let fullModelInfo = model;
    if (model && model.value && (!model.rpm || !model.tpm || !model.rpd)) {
      console.log("[QUEUE-API] üîç T√¨m th√¥ng tin model ƒë·∫ßy ƒë·ªß t·ª´ database...");
      try {
        const { prisma } = require("../config/prismaConfig");
        const dbModel = await prisma.model.findFirst({
          where: { value: model.value },
          select: { value: true, label: true, rpm: true, tpm: true, rpd: true }
        });
        if (dbModel) {
          fullModelInfo = { ...model, ...dbModel };
          console.log(`[QUEUE-API] ‚úÖ ƒê√£ l·∫•y th√¥ng tin model t·ª´ DB:`, {
            value: fullModelInfo.value,
            label: fullModelInfo.label,
            rpm: fullModelInfo.rpm,
            tpm: fullModelInfo.tpm,
            rpd: fullModelInfo.rpd
          });
        }
      } catch (error) {
        console.error("[QUEUE-API] ‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin model t·ª´ DB:", error.message);
      }
    }

    // Th√™m t·ª´ng ch∆∞∆°ng v√†o queue
    const jobs = [];
    for (let i = 0; i < chapters.length; i++) {
      const chapter = chapters[i];
      
      const jobData = {
        chapter: {
          title: chapter.title,
          content: chapter.content,
          chapterNumber: chapter.chapterNumber
        },
        model: fullModelInfo, // S·ª≠ d·ª•ng fullModelInfo ·ªü ƒë√¢y
        apiKey: keyToUse,
        storyId: storyId,
        userId: userIdFromToken,
        jobIndex: i, // Index ƒë·ªÉ track th·ª© t·ª±
        totalJobs: chapters.length // T·ªïng s·ªë jobs
      };

      console.log(`[QUEUE-API] üìù Th√™m job ${i + 1}/${chapters.length}:`, {
        chapterNumber: chapter.chapterNumber,
        titleLength: chapter.title?.length || 0,
        contentLength: chapter.content?.length || 0
      });

      // T√≠nh delay d·ª±a tr√™n RPM c·ªßa model - ƒë·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° RPM
      let delayPerJob = 2000; // Default 2s gi·ªØa c√°c job
      if (fullModelInfo && fullModelInfo.rpm) {
        // ƒê·∫£m b·∫£o delay >= 60/rpm ƒë·ªÉ kh√¥ng v∆∞·ª£t qu√° RPM
        delayPerJob = Math.max((60 / fullModelInfo.rpm) * 1000, 1000); // T·ªëi thi·ªÉu 1s
        console.log(`[QUEUE-API] ‚è±Ô∏è Model ${fullModelInfo.label || fullModelInfo.name} c√≥ RPM ${fullModelInfo.rpm}, delay t·ªëi thi·ªÉu: ${delayPerJob}ms (60/${fullModelInfo.rpm}s)`);
      } else {
        console.log(`[QUEUE-API] ‚è±Ô∏è Kh√¥ng c√≥ th√¥ng tin RPM, d√πng delay m·∫∑c ƒë·ªãnh: ${delayPerJob}ms`);
      }

      const job = await myQueue.add('translate-chapter', jobData, {
        delay: i * delayPerJob, // Delay gi·ªØa c√°c job theo RPM, job ƒë·∫ßu ti√™n ch·∫°y ngay
        attempts: 3, // Retry 3 l·∫ßn n·∫øu fail
        backoff: {
          type: 'exponential',
          delay: 2000
        }
      });

      jobs.push(job);
      console.log(`[QUEUE-API] ‚úÖ ƒê√£ th√™m job ${job.id} v√†o queue`);
    }

    console.log(`[QUEUE-API] ‚úÖ ƒê√£ th√™m ${jobs.length} jobs v√†o queue th√†nh c√¥ng`);
    console.log("üöÄ [QUEUE-API] ===== HO√ÄN TH√ÄNH TH√äM JOBS =====");

    res.json({
      success: true,
      message: `ƒê√£ th√™m ${jobs.length} ch∆∞∆°ng v√†o h√†ng ƒë·ª£i d·ªãch`,
      jobCount: jobs.length,
      jobIds: jobs.map(job => job.id)
    });

  } catch (error) {
    console.error("[QUEUE-API] ‚ùå L·ªói khi th√™m jobs v√†o queue:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi th√™m jobs v√†o queue",
      error: error.message
    });
  }
};

// Th√™m job v√†o h√†ng ƒë·ª£i BullMQ (gi·ªØ nguy√™n cho compatibility)
exports.addJobToQueue = async (req, res) => {
  try {
    const { storyId, chapterNumber, content } = req.body;
    await myQueue.add('translate-chapter', { storyId, chapterNumber, content });
    res.json({ success: true, message: 'ƒê√£ th√™m job d·ªãch ch∆∞∆°ng v√†o h√†ng ƒë·ª£i!' });
  } catch (err) {
    res.status(500).json({ success: false, message: 'L·ªói khi th√™m job v√†o queue', error: err.message });
  }
};
