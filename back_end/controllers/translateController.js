const {
  translateText: performTranslation,
} = require("../services/translateService");

exports.translateText = async (req, res) => {
  const { chapters, key, model } = req.body;
  console.log(req.body.chapters);
  console.log("üìå Y√™u c·∫ßu d·ªãch nh·∫≠n ƒë∆∞·ª£c:", {
    totalChapters: chapters?.length,
    hasKey: !!key,
    modelAI: model,
  });

  if (!chapters || !Array.isArray(chapters)) {
    return res.status(400).json({ error: "Thi·∫øu danh s√°ch ch∆∞∆°ng c·∫ßn d·ªãch." });
  }

  //D√πng th∆∞·ªùng
  try {
    const translationPromises = chapters.map(async (ch, index) => {
      const startTime = Date.now(); // ‚è≥ B·∫Øt ƒë·∫ßu t√≠nh gi·ªù
      try {
        // ‚ö°Ô∏è L·∫•y key ri√™ng cho m·ªói ch∆∞∆°ng
        const customKey = key || null; // ho·∫∑c null => translateText t·ª± ch·ªçn random key

        const translatedContent = await performTranslation(
          ch.content || "",
          customKey,
          model
        );
        const translatedTitle = ch.title
          ? await performTranslation(ch.title, customKey, model)
          : "";

        const endTime = Date.now(); // ‚è≥ K·∫øt th√∫c d·ªãch ch∆∞∆°ng

        console.log(
          `‚úÖ D·ªãch xong ch∆∞∆°ng ${index + 1}/${chapters.length} | Th·ªùi gian: ${
            (endTime - startTime) / 1000
          }s`
        );

        return {
          ...ch,
          translatedTitle,
          translated: translatedContent,
        };
      } catch (err) {
        console.error(`‚ùå L·ªói d·ªãch ch∆∞∆°ng ${index + 1}:`, err.message);
        return null; // n·∫øu fail ch∆∞∆°ng n√†o th√¨ tr·∫£ null
      }
    });

    const translatedChapters = await Promise.all(translationPromises);

    const successfulChapters = translatedChapters.filter((ch) => ch !== null);

    console.log("üì¶ T·ªïng ch∆∞∆°ng d·ªãch th√†nh c√¥ng:", successfulChapters.length);

    res.json({ chapters: successfulChapters });
  } catch (err) {
    console.error("‚ùå L·ªói d·ªãch ch∆∞∆°ng:", err.message);
    res.status(500).json({
      error: "D·ªãch th·∫•t b·∫°i. Ki·ªÉm tra l·∫°i API key ho·∫∑c n·ªôi dung.",
    });
  }
};
