const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const ApiKeyManager = require('../services/apiKeyManagers');

const userApiKeyController = {
    // L·∫•y t·∫•t c·∫£ API keys c·ªßa user
    getAllKeys: async (req, res) => {
        try {
            const userId = req.user.id;
            const keyManager = new ApiKeyManager();
            const keys = await keyManager.getUserKeys(userId);
            res.json(keys);
        } catch (error) {
            console.error('Error getting API keys:', error);
            res.status(500).json({ error: error.message });
        }
    },

    // T·∫°o API key m·ªõi
    createKey: async (req, res) => {
        try {
            const userId = req.user.id;
            const { key, label } = req.body;
            
            const keyManager = new ApiKeyManager();
            const newKey = await keyManager.createUserKey(userId, key, label);
            res.status(201).json(newKey);
        } catch (error) {
            console.error('Error creating API key:', error);
            res.status(400).json({ error: error.message });
        }
    },

    // X√≥a API key
    deleteKey: async (req, res) => {
        try {
            const userId = req.user.id;
            const keyId = req.params.id;
            
            if (!keyId) {
                return res.status(400).json({ error: 'Thi·∫øu ID c·ªßa key c·∫ßn x√≥a' });
            }

            console.log(`\nüóëÔ∏è ƒêang x√≥a key ${keyId} c·ªßa user ${userId}...`);
            
            const keyManager = new ApiKeyManager();
            await keyManager.deleteUserKey(userId, keyId);
            res.json({ message: 'Key ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng' });
        } catch (error) {
            console.error('Error deleting API key:', error);
            res.status(400).json({ error: error.message });
        }
    },

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i key
    updateKeyStatus: async (req, res) => {
        try {
            const userId = req.user.id;
            const { keyId } = req.params;
            const { status } = req.body;
            
            const keyManager = new ApiKeyManager();
            const updatedKey = await keyManager.updateKeyStatus(userId, keyId, status);
            res.json(updatedKey);
        } catch (error) {
            console.error('Error updating key status:', error);
            res.status(400).json({ error: error.message });
        }
    },

    // L·∫•y API keys theo model
    getKeysByModel: async (req, res) => {
        try {
            const { modelId } = req.params;
            const userId = req.user.id;

            const keys = await prisma.userApiKey.findMany({
                where: {
                    userId,
                    models: {
                        some: {
                            modelId
                        }
                    }
                },
                include: {
                    models: {
                        where: {
                            modelId
                        },
                        include: {
                            model: true
                        }
                    }
                }
            });

            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i theo model
            const formattedKeys = keys.map(key => ({
                ...key,
                modelStatus: key.models[0] // L·∫•y tr·∫°ng th√°i cho model c·ª• th·ªÉ
            }));

            res.json(formattedKeys);
        } catch (error) {
            console.error('Error getting API keys by model:', error);
            res.status(500).json({ error: 'L·ªói khi l·∫•y API keys theo model' });
        }
    }
};

module.exports = userApiKeyController; 