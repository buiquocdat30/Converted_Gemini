const { 
  getGlossaryByStoryId, 
  deleteGlossaryItem, 
  updateGlossaryItem, 
  searchGlossaryItems 
} = require("../services/glossaryService");

// L·∫•y t·∫•t c·∫£ glossary items c·ªßa m·ªôt truy·ªán
exports.getGlossary = async (req, res) => {
  try {
    const { storyId } = req.params;
    const userId = req.user?.id;

    if (!storyId) {
      return res.status(400).json({ 
        success: false, 
        message: "Thi·∫øu storyId" 
      });
    }

    console.log(`üìö L·∫•y glossary cho truy·ªán ${storyId}`);

    const glossaryItems = await getGlossaryByStoryId(storyId);

    res.json({
      success: true,
      message: "L·∫•y glossary th√†nh c√¥ng",
      data: glossaryItems
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y glossary:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y glossary",
      error: error.message
    });
  }
};

// X√≥a m·ªôt glossary item
exports.deleteGlossaryItem = async (req, res) => {
  try {
    const { itemId } = req.params;
    const userId = req.user?.id;

    if (!itemId) {
      return res.status(400).json({ 
        success: false, 
        message: "Thi·∫øu itemId" 
      });
    }

    console.log(`üóëÔ∏è X√≥a glossary item ${itemId}`);

    const success = await deleteGlossaryItem(itemId);

    if (success) {
      res.json({
        success: true,
        message: "X√≥a glossary item th√†nh c√¥ng"
      });
    } else {
      res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y glossary item"
      });
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a glossary item:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi x√≥a glossary item",
      error: error.message
    });
  }
};

// C·∫≠p nh·∫≠t m·ªôt glossary item
exports.updateGlossaryItem = async (req, res) => {
  try {
    const { itemId } = req.params;
    const { original, translated, type, lang } = req.body;
    const userId = req.user?.id;

    if (!itemId) {
      return res.status(400).json({ 
        success: false, 
        message: "Thi·∫øu itemId" 
      });
    }

    console.log(`‚úèÔ∏è C·∫≠p nh·∫≠t glossary item ${itemId}`);

    const updatedItem = await updateGlossaryItem(itemId, {
      original,
      translated,
      type,
      lang
    });

    if (updatedItem) {
      res.json({
        success: true,
        message: "C·∫≠p nh·∫≠t glossary item th√†nh c√¥ng",
        data: updatedItem
      });
    } else {
      res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y glossary item"
      });
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t glossary item:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi c·∫≠p nh·∫≠t glossary item",
      error: error.message
    });
  }
};

// T√¨m ki·∫øm glossary items
exports.searchGlossaryItems = async (req, res) => {
  try {
    const { storyId } = req.params;
    const { keyword } = req.query;
    const userId = req.user?.id;

    if (!storyId) {
      return res.status(400).json({ 
        success: false, 
        message: "Thi·∫øu storyId" 
      });
    }

    if (!keyword) {
      return res.status(400).json({ 
        success: false, 
        message: "Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm" 
      });
    }

    console.log(`üîç T√¨m ki·∫øm glossary cho truy·ªán ${storyId} v·ªõi t·ª´ kh√≥a: ${keyword}`);

    const items = await searchGlossaryItems(storyId, keyword);

    res.json({
      success: true,
      message: "T√¨m ki·∫øm glossary th√†nh c√¥ng",
      data: items
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi t√¨m ki·∫øm glossary:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi t√¨m ki·∫øm glossary",
      error: error.message
    });
  }
}; 