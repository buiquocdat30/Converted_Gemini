
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  avatar: 'avatar',
  backgroundImage: 'backgroundImage',
  birthdate: 'birthdate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserLibraryStoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  author: 'author',
  storyAvatar: 'storyAvatar',
  userId: 'userId',
  totalChapters: 'totalChapters',
  isHidden: 'isHidden',
  isComplete: 'isComplete',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserLibraryChapterScalarFieldEnum = {
  id: 'id',
  chapterName: 'chapterName',
  storyId: 'storyId',
  isHidden: 'isHidden',
  chapterNumber: 'chapterNumber',
  rawText: 'rawText',
  totalWord: 'totalWord',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTranslatedChapterScalarFieldEnum = {
  id: 'id',
  chapterId: 'chapterId',
  translatedTitle: 'translatedTitle',
  translatedContent: 'translatedContent',
  timeTranslation: 'timeTranslation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTranslationVersionScalarFieldEnum = {
  id: 'id',
  translatedText: 'translatedText',
  chapterId: 'chapterId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserApiKeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  key: 'key',
  label: 'label',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ModelScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  value: 'value',
  rpm: 'rpm',
  tpm: 'tpm',
  rpd: 'rpd',
  label: 'label',
  description: 'description'
};

exports.Prisma.DefaultKeyScalarFieldEnum = {
  id: 'id',
  key: 'key',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DictionaryScalarFieldEnum = {
  id: 'id',
  hanTu: 'hanTu',
  pinyin: 'pinyin',
  nghiaViet: 'nghiaViet'
};

exports.Prisma.UserApiKeyUsageScalarFieldEnum = {
  id: 'id',
  userApiKeyId: 'userApiKeyId',
  modelId: 'modelId',
  status: 'status',
  usageCount: 'usageCount',
  promptTokens: 'promptTokens',
  completionTokens: 'completionTokens',
  totalTokens: 'totalTokens',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.DefaultKeyUsageScalarFieldEnum = {
  id: 'id',
  defaultKeyId: 'defaultKeyId',
  modelId: 'modelId',
  status: 'status',
  usageCount: 'usageCount',
  promptTokens: 'promptTokens',
  completionTokens: 'completionTokens',
  totalTokens: 'totalTokens',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.ChapterStatus = exports.$Enums.ChapterStatus = {
  DRAFT: 'DRAFT',
  TRANSLATING: 'TRANSLATING',
  TRANSLATED: 'TRANSLATED',
  REVIEWING: 'REVIEWING',
  PUBLISHED: 'PUBLISHED'
};

exports.ApiKeyStatus = exports.$Enums.ApiKeyStatus = {
  ACTIVE: 'ACTIVE',
  COOLDOWN: 'COOLDOWN',
  EXHAUSTED: 'EXHAUSTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserLibraryStory: 'UserLibraryStory',
  UserLibraryChapter: 'UserLibraryChapter',
  UserTranslatedChapter: 'UserTranslatedChapter',
  UserTranslationVersion: 'UserTranslationVersion',
  UserApiKey: 'UserApiKey',
  Provider: 'Provider',
  Model: 'Model',
  DefaultKey: 'DefaultKey',
  Dictionary: 'Dictionary',
  UserApiKeyUsage: 'UserApiKeyUsage',
  DefaultKeyUsage: 'DefaultKeyUsage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
