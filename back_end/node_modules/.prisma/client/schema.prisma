generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ApiKeyStatus {
  ACTIVE
  COOLDOWN
  EXHAUSTED
}

enum ChapterStatus {
  DRAFT // Ch∆∞∆°ng m·ªõi t·∫°o
  TRANSLATING // ƒêang d·ªãch
  TRANSLATED // ƒê√£ d·ªãch xong
  REVIEWING // ƒêang review
  PUBLISHED // ƒê√£ xu·∫•t b·∫£n
}

//qu·∫£n l√Ω user
model User {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  email           String             @unique
  username        String             @unique
  password        String
  avatar          String?
  backgroundImage String?
  birthdate       DateTime?
  libraryStories  UserLibraryStory[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  UserApiKey      UserApiKey[]

  @@map("Users")
}

//c√°c truy·ªán c·ªßa user ƒë√£ up
model UserLibraryStory {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  author        String
  storyAvatar   String?
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String               @db.ObjectId
  chapters      UserLibraryChapter[]
  totalChapters Int                  @default(0) //t·ªïng s·ªë ch∆∞∆°ng
  isHidden      Boolean              @default(false) // üëâ Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ ·∫©n 
  isComplete    Boolean              @default(false) // üëâ Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ ki·ªÉm tra xem truy·ªán ƒë√£ ho√†n th√†nh hay ch∆∞a
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@map("User_library_stories")
}

//c√°c ch∆∞∆°ng truy·ªán ƒë√£ up
model UserLibraryChapter {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  story         UserLibraryStory         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterName   String
  storyId       String                   @db.ObjectId
  isHidden      Boolean                  @default(false) // üëâ Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ ·∫©n ch∆∞∆°ng
  chapterNumber Int
  rawText       String
  status        ChapterStatus            @default(DRAFT) //tr·∫°ng th√°i ch∆∞∆°ng
  translation   UserTranslatedChapter? // M·ªôt ch∆∞∆°ng c√≥ th·ªÉ c√≥ ho·∫∑c ch∆∞a c√≥ b·∫£n d·ªãch hi·ªán t·∫°i
  versions      UserTranslationVersion[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  @@unique(fields: [storyId, chapterNumber])
  @@map("User_library_chapters")
}

//c√°c ch∆∞∆°ng ƒë√£ d·ªãch
model UserTranslatedChapter {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  chapter           UserLibraryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId         String             @db.ObjectId
  translatedTitle   String //Ti√™u ƒë·ªÅ ch∆∞∆°ng ƒë√£ d·ªãch hi·ªán t·∫°i
  translatedContent String // N·ªôi dung b·∫£n d·ªãch hi·ªán t·∫°i
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique(fields: [chapterId]) // M·ªói ch∆∞∆°ng ch·ªâ c√≥ m·ªôt b·∫£n d·ªãch hi·ªán t·∫°i
  @@map("User_translated_chapters")
}

//c√°c phi√™n b·∫£n d·ªãch truy·ªán user ƒë√£ up
model UserTranslationVersion {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  translatedText String
  chapter        UserLibraryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId      String             @db.ObjectId
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("User_translation_versions")
}

//qu·∫£n l√Ω key c·ªßa user, ng∆∞·ªùi d√πng s·∫Ω c√≥ th·ªÉ th√™m xo√° s·ª≠a key c·ªßa minh ƒë∆∞·ª£c
model UserApiKey {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  key        String // C√≥ th·ªÉ tr√πng (n·∫øu user d√πng c√πng key nhi·ªÅu l·∫ßn)
  userId     String       @db.ObjectId
  user       User         @relation(fields: [userId], references: [id])
  label      String? // T√™n t√πy ch·ªçn ƒë·ªÉ user d·ªÖ ph√¢n bi·ªát: "Key Gemini ch√≠nh", "D·ª± ph√≤ng", v.v.
  modelId    String       @db.ObjectId
  model      Model        @relation(fields: [modelId], references: [id])
  status     ApiKeyStatus @default(ACTIVE)
  usageCount Int          @default(0)
  lastUsedAt DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([userId, key, modelId])
  @@map("User_api_keys") // T√™n collection trong MongoDB
}

//admin panel

//qu·∫£n l√Ω c√°c nh√† cung c·∫•p v√† m√¥ h√¨nh AI
model Provider {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String  @unique
  models Model[]

  @@map("Provider") // √Ånh x·∫° model Provider t·ªõi collection "Provider" trong MongoDB
}

model Model {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  providerId  String       @db.ObjectId
  provider    Provider     @relation(fields: [providerId], references: [id])
  value       String
  rpm         Int?
  tpm         Int?
  rpd         Int?
  label       String
  description String?
  userApiKeys UserApiKey[]
  defaultKeys DefaultKey[] @relation("ModelToDefaultKey") // üëà th√™m d√≤ng n√†y

  @@unique([providerId, value])
  @@map("Model")
}

model DefaultKey {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  key     String @unique
  value   String
  modelId String @db.ObjectId
  model   Model  @relation("ModelToDefaultKey", fields: [modelId], references: [id])

  @@map("DefaultKey")
}

//t·ª´ ƒëi·ªÉn
model Dictionary {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  hanTu     String  @unique
  pinyin    String?
  nghiaViet String

  @@map("Dictionary")
}
