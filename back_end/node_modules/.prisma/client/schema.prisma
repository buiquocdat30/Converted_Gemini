generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  email          String             @unique
  username       String             @unique // Thêm trường username, đảm bảo là duy nhất
  password       String // Thêm trường password
  avatar         String? // Thêm trường avatar, có thể null (người dùng có thể không có avatar)
  birthdate      DateTime? // Thêm trường birthdate, có thể null
  libraryStories UserLibraryStory[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  UserApiKey     UserApiKey[]

  @@map("Users")
}

model UserLibraryStory {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String               @db.ObjectId
  chapters  UserLibraryChapter[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("User_library_stories")
}

model UserLibraryChapter {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  story         UserLibraryStory         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId       String                   @db.ObjectId
  chapterNumber Int
  rawText       String
  translation   UserTranslatedChapter? // Một chương có thể có hoặc chưa có bản dịch hiện tại
  versions      UserTranslationVersion[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  @@unique(fields: [storyId, chapterNumber])
  @@map("User_library_chapters")
}

model UserTranslatedChapter {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  chapter     UserLibraryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String             @db.ObjectId
  currentText String // Nội dung bản dịch hiện tại
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique(fields: [chapterId]) // Mỗi chương chỉ có một bản dịch hiện tại
  @@map("User_translated_chapters")
}

model UserTranslationVersion {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  translatedText String
  chapter        UserLibraryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId      String             @db.ObjectId
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("User_translation_versions")
}

model UserApiKey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique // Lưu trữ API key, đánh dấu unique
  user      User     @relation(fields: [userId], references: [id]) // Quan hệ với User
  userId    String   @db.ObjectId // ID của User sở hữu key này
  status    String   @default("active") // Trạng thái key: "active" | "cooldown" | "exhausted"
  tokenUsed Int      @default(0) // Số token đã sử dụng (có thể cần hoặc không, tùy mức độ quản lý)
  lastUsed  DateTime @default(now()) // Thời điểm sử dụng gần nhất
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(fields: [userId, key]) // Đảm bảo 1 user không thêm trùng 1 key
  @@map("User_api_keys") // Tên collection trong MongoDB
}
