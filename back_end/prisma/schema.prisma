generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ApiKeyStatus {
  ACTIVE
  COOLDOWN
  EXHAUSTED
}


//quản lý user
model User {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  email          String             @unique
  username       String             @unique // Thêm trường username, đảm bảo là duy nhất
  password       String // Thêm trường password
  avatar         String? // Thêm trường avatar, có thể null (người dùng có thể không có avatar)
  backgroundImage         String? // Thêm trường backgroundImage, có thể null (người dùng có thể không có backgroundImage)
  birthdate      DateTime? // Thêm trường birthdate, có thể null
  libraryStories UserLibraryStory[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  UserApiKey     UserApiKey[]

  @@map("Users")
}

//các truyện của user đã up
model UserLibraryStory {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  author    String
  storyAvatar String?
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String               @db.ObjectId
  chapters  UserLibraryChapter[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("User_library_stories")
}

//các chương truyện đã up
model UserLibraryChapter {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  story         UserLibraryStory         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId       String                   @db.ObjectId
  chapterNumber Int
  rawText       String
  translation   UserTranslatedChapter? // Một chương có thể có hoặc chưa có bản dịch hiện tại
  versions      UserTranslationVersion[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  @@unique(fields: [storyId, chapterNumber])
  @@map("User_library_chapters")
}

//các chương đã dịch
model UserTranslatedChapter {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  chapter     UserLibraryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String             @db.ObjectId
  currentText String // Nội dung bản dịch hiện tại
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique(fields: [chapterId]) // Mỗi chương chỉ có một bản dịch hiện tại
  @@map("User_translated_chapters")
}

//các phiên bản dịch truyện user đã up
model UserTranslationVersion {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  translatedText String
  chapter        UserLibraryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId      String             @db.ObjectId
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("User_translation_versions")
}

//quản lý key của user, người dùng sẽ có thể thêm xoá sửa key của minh được
model UserApiKey {
   id          String        @id @default(auto()) @map("_id") @db.ObjectId
  key         String        // Có thể trùng (nếu user dùng cùng key nhiều lần)
  userId      String        @db.ObjectId
  label       String?       // Tên tùy chọn để user dễ phân biệt: "Key Gemini chính", "Dự phòng", v.v.
  status      ApiKeyStatus  @default(ACTIVE)
  usageCount  Int           @default(0)
  lastUsedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])

  @@unique([userId, key]) // Một user có thể thêm key trùng, nhưng không trùng với cùng model
  @@map("User_api_keys") // Tên collection trong MongoDB
}






//admin panel


//quản lý các nhà cung cấp và mô hình AI
model Provider {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  models Model[]

  @@map("Provider") // Ánh xạ model Provider tới collection "Provider" trong MongoDB
}

model Model {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  providerId  String   @db.ObjectId
  value       String
  rpm         Int?
  tpm         Int?
  rpd         Int?
  label       String
  description String
  provider    Provider @relation(fields: [providerId], references: [id])


  @@unique([providerId, value]) // Đảm bảo mỗi model value là duy nhất trong một provider
  @@map("Model") // Ánh xạ model Model tới collection "Model" trong MongoDB
}

//key mặc định của hệ thống khi user ko nhập key
model DefaultKey {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  key   String  @unique
  value String
  @@map("DefaultKey")
}

//từ điển
model Dictionary {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  hanTu      String   @unique
  pinyin     String?
  nghiaViet  String
  @@map("Dictionary")
}