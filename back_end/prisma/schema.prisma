generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ApiKeyStatus {
  ACTIVE
  COOLDOWN
  EXHAUSTED
}

enum ChapterStatus {
  DRAFT       // Ch∆∞∆°ng m·ªõi t·∫°o
  TRANSLATING // ƒêang d·ªãch
  TRANSLATED  // ƒê√£ d·ªãch xong
  REVIEWING   // ƒêang review
  PUBLISHED   // ƒê√£ xu·∫•t b·∫£n
}

//qu·∫£n l√Ω user
model User {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  email          String             @unique
  username       String             @unique
  password       String
  avatar         String?
  backgroundImage String?
  birthdate      DateTime?
  libraryStories UserLibraryStory[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  UserApiKey     UserApiKey[]

  @@map("Users")
}

//c√°c truy·ªán c·ªßa user ƒë√£ up
model UserLibraryStory {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  author    String
  storyAvatar String?
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String               @db.ObjectId
  chapters  UserLibraryChapter[]
  totalChapters Int @default(0) //t·ªïng s·ªë ch∆∞∆°ng
  isHidden  Boolean               @default(false) // üëâ Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ ·∫©n 
  isComplete Boolean              @default(false) // üëâ Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ ki·ªÉm tra xem truy·ªán ƒë√£ ho√†n th√†nh hay ch∆∞a
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("User_library_stories")
}

//c√°c ch∆∞∆°ng truy·ªán ƒë√£ up
model UserLibraryChapter {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  story         UserLibraryStory         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterName  String
  storyId       String                   @db.ObjectId
  isHidden  Boolean               @default(false) // üëâ Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ ·∫©n ch∆∞∆°ng
  chapterNumber Int
  rawText       String
  totalWord     Int                      @default(0) // üëâ Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ l∆∞u s·ªë t·ª´ c·ªßa ch∆∞∆°ng
  status        ChapterStatus @default(DRAFT) //tr·∫°ng th√°i ch∆∞∆°ng
  translation   UserTranslatedChapter? // M·ªôt ch∆∞∆°ng c√≥ th·ªÉ c√≥ ho·∫∑c ch∆∞a c√≥ b·∫£n d·ªãch hi·ªán t·∫°i
  versions      UserTranslationVersion[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  @@unique(fields: [storyId, chapterNumber])
  @@map("User_library_chapters")
}

//c√°c ch∆∞∆°ng ƒë√£ d·ªãch
model UserTranslatedChapter {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  chapter     UserLibraryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String             @db.ObjectId
  translatedTitle String    //Ti√™u ƒë·ªÅ ch∆∞∆°ng ƒë√£ d·ªãch hi·ªán t·∫°i
  translatedContent String // N·ªôi dung b·∫£n d·ªãch hi·ªán t·∫°i
  timeTranslation Float             @default(0) // üëâ Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ l∆∞u th·ªùi gian d·ªãch (gi√¢y)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique(fields: [chapterId]) // M·ªói ch∆∞∆°ng ch·ªâ c√≥ m·ªôt b·∫£n d·ªãch hi·ªán t·∫°i
  @@map("User_translated_chapters")
}

//c√°c phi√™n b·∫£n d·ªãch truy·ªán user ƒë√£ up
model UserTranslationVersion {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  translatedText String
  chapter        UserLibraryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId      String             @db.ObjectId
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("User_translation_versions")
}

//qu·∫£n l√Ω key c·ªßa user, ng∆∞·ªùi d√πng s·∫Ω c√≥ th·ªÉ th√™m xo√° s·ª≠a key c·ªßa minh ƒë∆∞·ª£c
model UserApiKey {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  key         String        // API key
  label       String?       // Nh√£n ƒë·ªÉ ph√¢n bi·ªát c√°c key
  modelIds    String[]      // M·∫£ng ID c·ªßa c√°c model ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng key n√†y
  status      ApiKeyStatus  @default(ACTIVE)
  usageCount  Int           @default(0) // T·ªïng s·ªë l·∫ßn s·ª≠ d·ª•ng key
  lastUsedAt  DateTime?     // Th·ªùi gian s·ª≠ d·ª•ng cu·ªëi
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([userId, key]) // Ch·ªâ unique tr√™n c·∫∑p userId v√† key
  @@map("UserApiKey")
}

//admin panel

//qu·∫£n l√Ω c√°c nh√† cung c·∫•p v√† m√¥ h√¨nh AI
model Provider {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  models Model[]

  @@map("Provider")
}

model Model {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  providerId  String        @db.ObjectId
  provider    Provider      @relation(fields: [providerId], references: [id])
  value       String
  rpm         Int?         // Requests per minute
  tpm         Int?         // Tokens per minute  
  rpd         Int?         // Requests per day
  label       String
  description String?
  // Ch·ªâ gi·ªØ l·∫°i m·∫£ng modelIds trong c√°c model kh√°c, kh√¥ng c·∫ßn quan h·ªá ng∆∞·ª£c l·∫°i
  @@unique([providerId, value])
  @@map("Model")
}

model DefaultKey {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  key         String        // API key
  modelIds    String[]      // M·∫£ng ID c·ªßa c√°c model ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng key n√†y
  status      ApiKeyStatus  @default(ACTIVE)
  usageCount  Int           @default(0) // T·ªïng s·ªë l·∫ßn s·ª≠ d·ª•ng key
  lastUsedAt  DateTime?     // Th·ªùi gian s·ª≠ d·ª•ng cu·ªëi
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([key]) // Ch·ªâ unique tr√™n key
  @@map("DefaultKey")
}

//t·ª´ ƒëi·ªÉn
model Dictionary {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  hanTu      String   @unique
  pinyin     String?
  nghiaViet  String
  @@map("Dictionary")
}
