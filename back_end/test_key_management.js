const { prisma, toObjectId } = require("./config/prismaConfig");

async function testKeyManagement() {
  try {
    console.log("üîç Test Key Management - B·∫Øt ƒë·∫ßu ki·ªÉm tra...\n");

    // 1. Ki·ªÉm tra d·ªØ li·ªáu user keys
    console.log("üìä 1. Ki·ªÉm tra user keys");
    const userKeys = await prisma.userApiKey.findMany({
      include: {
        usage: {
          include: {
            model: true
          }
        }
      }
    });

    console.log(`T√¨m th·∫•y ${userKeys.length} user keys`);

    if (userKeys.length === 0) {
      console.log("‚ùå Kh√¥ng c√≥ user keys n√†o ƒë·ªÉ test");
      return;
    }

    // 2. Ph√¢n t√≠ch t·ª´ng key
    console.log("\nüìä 2. Ph√¢n t√≠ch t·ª´ng key");
    userKeys.forEach((key, index) => {
      console.log(`\nüîë Key ${index + 1}: ${key.key.substring(0, 10)}...`);
      console.log(`- Label: ${key.label}`);
      console.log(`- Usage records: ${key.usage.length}`);
      
      if (key.usage.length > 0) {
        // T√≠nh t·ªïng usage h√¥m nay
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const todayUsage = key.usage.filter(u => {
          if (!u.lastUsedAt) return false;
          const lastUsedAt = new Date(u.lastUsedAt);
          return lastUsedAt >= today;
        });

        console.log(`- Usage h√¥m nay: ${todayUsage.length}/${key.usage.length} models`);
        
        todayUsage.forEach((usage, uIndex) => {
          console.log(`  Model ${uIndex + 1}: ${usage.model?.label || usage.modelId}`);
          console.log(`    - Status: ${usage.status}`);
          console.log(`    - Usage count: ${usage.usageCount}`);
          console.log(`    - Total tokens: ${usage.totalTokens}`);
          console.log(`    - Last used: ${usage.lastUsedAt ? new Date(usage.lastUsedAt).toLocaleString('vi-VN') : 'Ch∆∞a s·ª≠ d·ª•ng'}`);
        });
      }
    });

    // 3. Test API endpoint getTodayUsageStats
    console.log("\nüìä 3. Test API endpoint getTodayUsageStats");
    const userId = userKeys[0].userId; // L·∫•y userId c·ªßa key ƒë·∫ßu ti√™n
    
    // L·∫•y m·ªëc th·ªùi gian ƒë·∫ßu v√† cu·ªëi ng√†y h√¥m nay
    const now = new Date();
    const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);
    const endOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);

    console.log(`Th·ªùi gian h√¥m nay: ${startOfDay.toISOString()} ƒë·∫øn ${endOfDay.toISOString()}`);

    // L·∫•y t·∫•t c·∫£ key c·ªßa user v·ªõi t·∫•t c·∫£ usage records
    const keysWithUsage = await prisma.userApiKey.findMany({
      where: { userId },
      select: {
        id: true,
        key: true,
        label: true,
        createdAt: true,
        updatedAt: true,
        usage: {
          select: {
            id: true,
            modelId: true,
            status: true,
            usageCount: true,
            promptTokens: true,
            completionTokens: true,
            totalTokens: true,
            lastUsedAt: true,
            model: {
              select: {
                id: true,
                value: true,
                label: true
              }
            }
          }
        }
      }
    });

    console.log(`T√¨m th·∫•y ${keysWithUsage.length} keys cho user ${userId}`);

    // Format l·∫°i cho FE: m·ªói key c√≥ m·∫£ng usage theo model trong ng√†y
    const result = keysWithUsage.map(key => {
      // L·ªçc usage records c√≥ lastUsedAt trong ng√†y h√¥m nay
      const todayUsage = key.usage.filter(u => {
        if (!u.lastUsedAt) return false;
        const lastUsedAt = new Date(u.lastUsedAt);
        return lastUsedAt >= startOfDay && lastUsedAt <= endOfDay;
      });

      console.log(`Key ${key.key.substring(0, 10)}... c√≥ ${todayUsage.length}/${key.usage.length} usage records h√¥m nay`);

      return {
        id: key.id,
        key: key.key,
        label: key.label,
        createdAt: key.createdAt,
        updatedAt: key.updatedAt,
        usage: todayUsage.map(u => ({
          id: u.id,
          modelId: u.modelId,
          model: u.model,
          status: u.status,
          usageCount: u.usageCount,
          promptTokens: u.promptTokens,
          completionTokens: u.completionTokens,
          totalTokens: u.totalTokens,
          lastUsedAt: u.lastUsedAt
        }))
      };
    });

    console.log(`‚úÖ Tr·∫£ v·ªÅ ${result.length} keys c√≥ usage h√¥m nay`);
    
    // 4. Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    console.log("\nüìä 4. K·∫øt qu·∫£ cu·ªëi c√πng");
    result.forEach((key, index) => {
      console.log(`\nüîë Key ${index + 1}: ${key.key.substring(0, 10)}...`);
      console.log(`- Label: ${key.label}`);
      console.log(`- Usage records h√¥m nay: ${key.usage.length}`);
      
      if (key.usage.length > 0) {
        const totalUsage = key.usage.reduce((total, u) => total + (u.usageCount || 0), 0);
        const totalTokens = key.usage.reduce((total, u) => total + (u.totalTokens || 0), 0);
        
        console.log(`- T·ªïng usage: ${totalUsage} l·∫ßn`);
        console.log(`- T·ªïng tokens: ${totalTokens}`);
        
        key.usage.forEach((usage, uIndex) => {
          console.log(`  Model ${uIndex + 1}: ${usage.model?.label || usage.modelId}`);
          console.log(`    - Status: ${usage.status}`);
          console.log(`    - Usage: ${usage.usageCount} l·∫ßn, ${usage.totalTokens} tokens`);
        });
      }
    });

    console.log("\n‚úÖ Test ho√†n th√†nh!");

  } catch (error) {
    console.error("‚ùå L·ªói trong test:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testKeyManagement();
