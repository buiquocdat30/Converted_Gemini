const { prisma, toObjectId } = require("./config/prismaConfig");

async function testUpdateUsage() {
  try {
    console.log("üîç Test c·∫≠p nh·∫≠t usage v√† th·ªëng k√™...\n");

    // L·∫•y t·∫•t c·∫£ user keys
    const allKeys = await prisma.userApiKey.findMany({
      include: {
        usage: {
          include: {
            model: true
          }
        }
      }
    });

    console.log(`üìä T√¨m th·∫•y ${allKeys.length} user keys`);

    if (allKeys.length === 0) {
      console.log("‚ùå Kh√¥ng c√≥ user keys n√†o ƒë·ªÉ test");
      return;
    }

    // Ch·ªçn key ƒë·∫ßu ti√™n ƒë·ªÉ test
    const testKey = allKeys[0];
    console.log(`\nüîë Test v·ªõi key: ${testKey.key.substring(0, 10)}...`);

    if (testKey.usage.length === 0) {
      console.log("‚ùå Key n√†y kh√¥ng c√≥ usage records");
      return;
    }

    // C·∫≠p nh·∫≠t usage record ƒë·∫ßu ti√™n
    const testUsage = testKey.usage[0];
    console.log(`üìà C·∫≠p nh·∫≠t usage cho model: ${testUsage.model.label}`);

    // C·∫≠p nh·∫≠t lastUsedAt th√†nh h√¥m nay v√† tƒÉng usage count
    const updatedUsage = await prisma.userApiKeyUsage.update({
      where: { id: testUsage.id },
      data: {
        lastUsedAt: new Date(),
        usageCount: { increment: 10 },
        promptTokens: { increment: 1000 },
        completionTokens: { increment: 500 },
        totalTokens: { increment: 1500 }
      }
    });

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t usage record:`);
    console.log(`- Usage Count: ${testUsage.usageCount} ‚Üí ${updatedUsage.usageCount}`);
    console.log(`- Total Tokens: ${testUsage.totalTokens} ‚Üí ${updatedUsage.totalTokens}`);
    console.log(`- Last Used At: ${testUsage.lastUsedAt} ‚Üí ${updatedUsage.lastUsedAt}`);

    // Test l·∫°i th·ªëng k√™
    console.log("\nüìä Test l·∫°i th·ªëng k√™ sau khi c·∫≠p nh·∫≠t...");
    
    const now = new Date();
    const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);
    const endOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);

    // L·∫•y l·∫°i key ƒë√£ c·∫≠p nh·∫≠t
    const updatedKey = await prisma.userApiKey.findFirst({
      where: { id: testKey.id },
      include: {
        usage: {
          include: {
            model: true
          }
        }
      }
    });

    console.log(`\nüîç Ki·ªÉm tra key sau khi c·∫≠p nh·∫≠t:`);
    updatedKey.usage.forEach((usage, index) => {
      console.log(`\nUsage ${index + 1}:`);
      console.log(`- Model: ${usage.model.label}`);
      console.log(`- Status: ${usage.status}`);
      console.log(`- Usage Count: ${usage.usageCount}`);
      console.log(`- Total Tokens: ${usage.totalTokens}`);
      console.log(`- Last Used At: ${usage.lastUsedAt}`);
      
      if (usage.lastUsedAt) {
        const lastUsedAt = new Date(usage.lastUsedAt);
        const isUsedToday = lastUsedAt >= startOfDay && lastUsedAt <= endOfDay;
        console.log(`- S·ª≠ d·ª•ng h√¥m nay: ${isUsedToday ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}`);
      }
    });

    // Test API endpoint logic
    console.log("\nüåê Test logic API endpoint:");
    const todayUsage = updatedKey.usage.filter(u => {
      if (!u.lastUsedAt) return false;
      const lastUsedAt = new Date(u.lastUsedAt);
      return lastUsedAt >= startOfDay && lastUsedAt <= endOfDay;
    });

    console.log(`- T·ªïng usage records: ${updatedKey.usage.length}`);
    console.log(`- Usage records h√¥m nay: ${todayUsage.length}`);
    
    if (todayUsage.length > 0) {
      console.log("\n‚úÖ Usage records h√¥m nay:");
      todayUsage.forEach((usage, index) => {
        console.log(`  ${index + 1}. ${usage.model.label}: ${usage.usageCount} l·∫ßn, ${usage.totalTokens} tokens`);
      });
    } else {
      console.log("\n‚ùå Kh√¥ng c√≥ usage records h√¥m nay");
    }

    console.log("\n‚úÖ Test ho√†n th√†nh!");

  } catch (error) {
    console.error("‚ùå L·ªói:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y test
testUpdateUsage();
