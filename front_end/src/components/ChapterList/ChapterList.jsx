import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSpinner } from "@fortawesome/free-solid-svg-icons";
import { translateAllChapters } from "../../services/translateChapters";
import { translateSingleChapter } from "../../services/translateSingleChapter";
import { toast } from "react-hot-toast";
import useTranslationProgress from "../../hook/useTranslationProgress";
import "./ChapterList.css";

const ChapterList = ({
  chapters,
  apiKey,
  model,
  onTranslationResult,
  onSelectChapter,
  onSelectJumbChapter,
  currentIndex = 0,
  storyId,
  deleteChapter,
  onChapterAdded,
  setChapters,
}) => {
  const [results, setResults] = useState({});
  const [errorMessages, setErrorMessages] = useState({}); // Th√™m tr·∫°ng th√°i l·ªói
  const [translatedCount, setTranslatedCount] = useState(0); //ch∆∞∆°ng ƒë√£ d·ªãch
  const [isTranslateAllDisabled, setIsTranslateAllDisabled] = useState(false); //Disable n√∫t d·ªãch t·ªïng
  const [isTranslatingAll, setIsTranslatingAll] = useState(false); //N√∫t quay quay loading
  const [hasTranslatedAll, setHasTranslatedAll] = useState(false); //ƒë√£ d·ªãch xong
  const isStoppedRef = useRef(false); //d·ª´ng d·ªãch
  const [translationDurations, setTranslationDurations] = useState({}); // Th√™m state l∆∞u th·ªùi gian d·ªãch

  // S·ª≠ d·ª•ng hook cho ti·∫øn ƒë·ªô t·ªïng
  const { 
    progress: totalProgress, 
    isTranslating: isTotalTranslating,
    startProgress: startTotalProgress,
    stopProgress: stopTotalProgress 
  } = useTranslationProgress(30); // 30s cho to√†n b·ªô qu√° tr√¨nh

  // S·ª≠ d·ª•ng hook cho ti·∫øn ƒë·ªô t·ª´ng ch∆∞∆°ng
  const chapterProgressRef = useRef({});

  // H√†m kh·ªüi t·∫°o ti·∫øn ƒë·ªô cho m·ªôt ch∆∞∆°ng
  const initChapterProgress = (index) => {
    if (!chapterProgressRef.current[index]) {
      chapterProgressRef.current[index] = {
        startProgress: () => {},
        stopProgress: () => {},
        progress: 0
      };
    }
  };

  //khu v·ª±c ph√¢n Trang
  const [currentPage, setCurrentPage] = useState(1);
  const chaptersPerPage = 10;

  // S·∫Øp x·∫øp chapters theo chapterNumber tƒÉng d·∫ßn
  const sortedChapters = [...chapters].sort(
    (a, b) => a.chapterNumber - b.chapterNumber
  );
  const totalPages = Math.ceil(sortedChapters.length / chaptersPerPage);

  const startIdx = (currentPage - 1) * chaptersPerPage;
  const endIdx = startIdx + chaptersPerPage;
  const currentChapters = sortedChapters.slice(startIdx, endIdx);

  // T√°ch ri√™ng state cho nh·∫£y trang v√† nh·∫£y ch∆∞∆°ng
  const [jumpToPage, setJumpToPage] = useState("");
  const [jumpToChapter, setJumpToChapter] = useState("");

  // H√†m t√≠nh s·ªë ch∆∞∆°ng d·ª±a tr√™n trang v√† v·ªã tr√≠
  const calculateChapterNumber = (index) => {
    return startIdx + index + 1;
  };

  //ƒë·∫øm ch∆∞∆°ng
  const canTranslate = (index) => {
    if (results[index]) return false; // ƒë√£ d·ªãch r·ªìi
    if (!apiKey && translatedCount >= 2) return false; // v∆∞·ª£t gi·ªõi h·∫°n
    return true;
  };

  useEffect(() => {
    if (apiKey) {
      setIsTranslateAllDisabled(false); // ‚úÖ ƒê√£ c√≥ key th√¨ lu√¥n b·∫≠t n√∫t
    } else {
      setIsTranslateAllDisabled(translatedCount >= 2); // ‚úÖ Ch∆∞a c√≥ key th√¨ gi·ªõi h·∫°n 2 ch∆∞∆°ng
    }
  }, [translatedCount, chapters.length, apiKey]);

  // H√†m d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng
  const translateAll = async () => {
    setIsTranslateAllDisabled(true);
    console.time("‚è±Ô∏è Th·ªùi gian d·ªãch to√†n b·ªô");

    setIsTranslatingAll(true);
    startTotalProgress(); // B·∫Øt ƒë·∫ßu ti·∫øn ƒë·ªô t·ªïng
    const maxChapters = apiKey ? chapters.length : 2;

    if (!apiKey) {
      const remainingFree = 2 - translatedCount;
      if (remainingFree <= 0) {
        toast.error(
          "üîí Ch·ªâ ƒë∆∞·ª£c d·ªãch 2 ch∆∞∆°ng ƒë·∫ßu mi·ªÖn ph√≠. H√£y nh·∫≠p API key ƒë·ªÉ ti·∫øp t·ª•c."
        );
        setIsTranslateAllDisabled(true);
        setIsTranslatingAll(false);
        stopTotalProgress(); // D·ª´ng ti·∫øn ƒë·ªô t·ªïng
        return;
      }
    }

    const chaptersToTranslate = chapters
      .map((chapter, index) => ({ ...chapter, originalIndex: index }))
      .filter((_, index) => !results[index])
      .slice(0, maxChapters - translatedCount);

    if (chaptersToTranslate.length === 0) {
      toast.success("T·∫•t c·∫£ c√°c ch∆∞∆°ng ƒë√£ ƒë∆∞·ª£c d·ªãch.");
      stopTotalProgress(); // D·ª´ng ti·∫øn ƒë·ªô t·ªïng
      setIsTranslateAllDisabled(true);
      setIsTranslatingAll(false);
      return;
    }

    try {
      await translateAllChapters({
        chaptersToTranslate,
        chapters,
        apiKey,
        model,
        setResults,
        setTranslatedCount,
        setErrorMessages,
        onTranslationResult,
        isStopped: isStoppedRef.current,
      });
    } catch (error) {
      console.error("L·ªói khi d·ªãch ch∆∞∆°ng:", error);
      setErrorMessages((prev) => ({
        ...prev,
        general: "‚ùå L·ªói khi d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng.",
      }));
      toast.error("‚ùå L·ªói khi d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng.");
      setIsTranslateAllDisabled(false);
    } finally {
      console.timeEnd("‚è±Ô∏è Th·ªùi gian d·ªãch to√†n b·ªô");
      setIsTranslatingAll(false);
      setHasTranslatedAll(true);
      stopTotalProgress(); // D·ª´ng ti·∫øn ƒë·ªô t·ªïng
    }
  };

  // H√†m d·ªãch t·ª´ng ch∆∞∆°ng
  const translate = (index) => {
    initChapterProgress(index);
    const { startProgress, stopProgress } = chapterProgressRef.current[index];
    startProgress(); // B·∫Øt ƒë·∫ßu ti·∫øn ƒë·ªô cho ch∆∞∆°ng n√†y

    translateSingleChapter({
      index,
      chapters,
      apiKey,
      model,
      setProgress: (progress) => {
        // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô cho ch∆∞∆°ng c·ª• th·ªÉ
        chapterProgressRef.current[index].progress = progress;
        // Force re-render ƒë·ªÉ hi·ªÉn th·ªã ti·∫øn ƒë·ªô m·ªõi
        setResults(prev => ({...prev}));
      },
      setResults,
      setErrorMessages,
      setTranslatedCount,
      setTotalProgress: (progress) => {
        // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô t·ªïng th·ªÉ
        startTotalProgress();
        // Force re-render ƒë·ªÉ hi·ªÉn th·ªã ti·∫øn ƒë·ªô m·ªõi
        setResults(prev => ({...prev}));
      },
      onTranslationResult,
      onSelectChapter,
      isStopped: isStoppedRef.current,
      onComplete: (duration) => {
        stopProgress(); // D·ª´ng ti·∫øn ƒë·ªô khi ho√†n th√†nh
        stopTotalProgress(); // D·ª´ng ti·∫øn ƒë·ªô t·ªïng th·ªÉ
        setTranslationDurations(prev => ({
          ...prev,
          [index]: duration
        }));
      }
    });
  };

  // H√†m nh·∫£y t·ªõi trang
  const handleJumpToPage = () => {
    const num = parseInt(jumpToPage);
    if (isNaN(num)) {
      toast.error("‚ùå Vui l√≤ng nh·∫≠p s·ªë trang h·ª£p l·ªá!");
      return;
    }

    if (num < 1 || num > totalPages) {
      toast.error(`‚ùå S·ªë trang ph·∫£i t·ª´ 1 ƒë·∫øn ${totalPages}!`);
      return;
    }

    setCurrentPage(num);
    setJumpToPage(""); // Reset input sau khi nh·∫£y
  };

  // H√†m nh·∫£y t·ªõi ch∆∞∆°ng
  const handleJumpToChapter = () => {
    const num = parseInt(jumpToChapter);
    if (isNaN(num)) {
      toast.error("‚ùå Vui l√≤ng nh·∫≠p s·ªë ch∆∞∆°ng h·ª£p l·ªá!");
      return;
    }

    if (num < 1 || num > chapters.length) {
      toast.error(`‚ùå S·ªë ch∆∞∆°ng ph·∫£i t·ª´ 1 ƒë·∫øn ${chapters.length}!`);
      return;
    }

    const targetIndex = num - 1;
    const newPage = Math.ceil(num / chaptersPerPage);
    setCurrentPage(newPage);
    onSelectChapter?.(targetIndex);
    setJumpToChapter(""); // Reset input sau khi nh·∫£y
  };

  // H√†m x·ª≠ l√Ω khi nh·∫≠p gi√° tr·ªã v√†o input nh·∫£y trang
  const handlePageInputChange = (e) => {
    const value = e.target.value;
    const num = parseInt(value);

    if (value === "") {
      setJumpToPage("");
      return;
    }

    if (isNaN(num)) {
      return;
    }

    if (num >= 1 && num <= totalPages) {
      setJumpToPage(value);
    }
  };

  // H√†m x·ª≠ l√Ω khi nh·∫≠p gi√° tr·ªã v√†o input nh·∫£y ch∆∞∆°ng
  const handleChapterInputChange = (e) => {
    const value = e.target.value;
    const num = parseInt(value);

    if (value === "") {
      setJumpToChapter("");
      return;
    }

    if (isNaN(num)) {
      return;
    }

    if (num >= 1 && num <= chapters.length) {
      setJumpToChapter(value);
    }
  };

  // H√†m x·ª≠ l√Ω khi ch·ªçn ch∆∞∆°ng
  const handleSelectChapter = (index, page) => {
    // L·∫•y chapterNumber t·ª´ sortedChapters
    const chapterNumber = sortedChapters[index]?.chapterNumber;
    console.log("S·ªë ch∆∞∆°ng ƒë∆∞·ª£c ch·ªçn:", chapterNumber);
    console.log("Index ƒë∆∞·ª£c ch·ªçn:", index);
    console.log("Sorted chapters:", sortedChapters);

    // T√¨m index th·ª±c t·∫ø trong m·∫£ng chapters d·ª±a tr√™n chapterNumber
    const actualIndex = chapters.findIndex(
      (ch) => ch.chapterNumber === chapterNumber
    );
    console.log("Index th·ª±c t·∫ø trong m·∫£ng chapters:", actualIndex);

    if (page) {
      setCurrentPage(page);
    }
    onSelectChapter?.(actualIndex); // Truy·ªÅn index th·ª±c t·∫ø
  };

  // H√†m x·ª≠ l√Ω x√≥a ch∆∞∆°ng
  const handleDeleteChapter = async (chapterNumber) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ch∆∞∆°ng n√†y?")) {
      try {
        await deleteChapter(storyId, chapterNumber);
        // G·ªçi callback ƒë·ªÉ t·∫£i l·∫°i d·ªØ li·ªáu
        if (onChapterAdded) {
          onChapterAdded();
        }
        toast.success("ƒê√£ x√≥a ch∆∞∆°ng th√†nh c√¥ng!");
      } catch (error) {
        console.error("L·ªói khi x√≥a ch∆∞∆°ng:", error);
        toast.error("L·ªói khi x√≥a ch∆∞∆°ng!");
      }
    }
  };

  return (
    <div className="chapter-list">
      <h3>üìö Danh s√°ch ch∆∞∆°ng ({sortedChapters.length})</h3>
      <ul>
        {currentChapters.map((ch, idxOnPage) => {
          const calculatedChapterNumber = calculateChapterNumber(idxOnPage);
          // T√¨m index th·ª±c t·∫ø trong m·∫£ng chapters d·ª±a tr√™n chapterNumber
          const idx = chapters.findIndex(
            (chapter) => chapter.chapterNumber === ch.chapterNumber
          );
          const isTranslated = !!results[idx];
          const chapterProgress = chapterProgressRef.current[idx]?.progress || 0;
          const duration = translationDurations[idx];

          return (
            <li key={ch.chapterNumber}>
              <div
                className={`chapter-item ${
                  idx === currentIndex ? "selected" : ""
                }`}
                onClick={() =>
                  handleSelectChapter(
                    idx,
                    Math.ceil(ch.chapterNumber / chaptersPerPage)
                  )
                }
              >
                <div className="chapter-header">
                  <p>Ch∆∞∆°ng {calculatedChapterNumber}:</p>
                  <strong>
                    {ch.translatedTitle ||
                      ch.title ||
                      ch.chapterName ||
                      `Ch∆∞∆°ng ${calculatedChapterNumber}`}
                  </strong>
                  {isTranslated && (
                    <span className="translated-label">
                      ‚úÖ ƒê√£ d·ªãch {duration ? `(${duration.toFixed(1)}s)` : ''}
                    </span>
                  )}
                  <div className="chapter-actions">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        translate(idx);
                      }}
                      disabled={
                        isTranslated ||
                        (!apiKey && translatedCount >= 2) ||
                        isTranslatingAll
                      }
                      className={`translate-sgn-button ${
                        isTranslated ? "hidden" : ""
                      }`}
                    >
                      üìù D·ªãch
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleDeleteChapter(ch.chapterNumber);
                      }}
                      className="delete-chapter-button"
                      style={
                        isTranslated
                          ? { width: "100%", height: "100%" }
                          : { width: "50%" }
                      }
                    >
                      ‚ùå Xo√°
                    </button>
                  </div>
                </div>
                {chapterProgress > 0 && !isTranslatingAll && (
                  <div className="chapter-progress-bar-container">
                    <div
                      className="chapter-progress-bar"
                      style={{ width: `${chapterProgress}%` }}
                    ></div>
                  </div>
                )}
                {errorMessages[idx] && (
                  <div className="error-message">
                    <p>{errorMessages[idx]}</p>
                  </div>
                )}
              </div>
            </li>
          );
        })}
      </ul>
      {/* trang ch·ª©a c√°c ch∆∞∆°ng khi v∆∞·ª£t qu√° 10 ch∆∞∆°ng */}
      <div className="pagination">
        <button onClick={() => setCurrentPage(1)} disabled={currentPage === 1}>
          ‚èÆÔ∏è Trang ƒë·∫ßu
        </button>

        {/* Hi·ªÉn th·ªã trang ƒë·∫ßu ti√™n */}
        {currentPage > 2 && (
          <button onClick={() => setCurrentPage(1)}>1</button>
        )}

        {/* Hi·ªÉn th·ªã d·∫•u ... khi c·∫ßn */}
        {currentPage > 3 && <span>...</span>}

        {/* Hi·ªÉn th·ªã c√°c trang xung quanh trang hi·ªán t·∫°i */}
        {Array.from({ length: totalPages }, (_, i) => i + 1)
          .filter((pageNum) => {
            // Lu√¥n hi·ªÉn th·ªã trang ƒë·∫ßu v√† trang cu·ªëi
            if (pageNum === 1 || pageNum === totalPages) return true;
            // Hi·ªÉn th·ªã c√°c trang xung quanh trang hi·ªán t·∫°i (tr∆∞·ªõc v√† sau 1 trang)
            return Math.abs(pageNum - currentPage) <= 1;
          })
          .map((pageNum, index, array) => {
            // Th√™m d·∫•u ... gi·ªØa c√°c kho·∫£ng tr·ªëng
            const showEllipsisBefore =
              index > 0 && array[index - 1] !== pageNum - 1;
            const showEllipsisAfter =
              index < array.length - 1 && array[index + 1] !== pageNum + 1;

            return (
              <React.Fragment key={pageNum}>
                {showEllipsisBefore && <span>...</span>}
                <button
                  className={currentPage === pageNum ? "active" : ""}
                  onClick={() => setCurrentPage(pageNum)}
                >
                  {pageNum}
                </button>
                {showEllipsisAfter && <span>...</span>}
              </React.Fragment>
            );
          })}

        {/* Hi·ªÉn th·ªã d·∫•u ... khi c·∫ßn */}
        {currentPage < totalPages - 2 && <span>...</span>}

        {/* Hi·ªÉn th·ªã trang cu·ªëi c√πng */}
        {currentPage < totalPages - 1 && (
          <button onClick={() => setCurrentPage(totalPages)}>
            {totalPages}
          </button>
        )}

        <button
          onClick={() => setCurrentPage(totalPages)}
          disabled={currentPage === totalPages}
        >
          ‚è≠Ô∏è Trang cu·ªëi
        </button>
      </div>

      {/* nh·∫£y t·ªõi trang */}
      <div className="jump-to-page">
        <label>üîç Nh·∫£y t·ªõi trang:</label>
        <input
          type="number"
          min={1}
          max={totalPages}
          placeholder={`Nh·∫≠p (1-${totalPages})`}
          value={jumpToPage}
          onChange={handlePageInputChange}
          onKeyDown={(e) => {
            if (e.key === "Enter") handleJumpToPage();
          }}
        />
        <button onClick={handleJumpToPage}>‚û°Ô∏è ƒêi t·ªõi trang</button>
      </div>

      {/* nh·∫£y t·ªõi ch∆∞∆°ng */}
      <div className="jump-to-chapter">
        <label>üîç Nh·∫£y t·ªõi ch∆∞∆°ng:</label>
        <input
          type="number"
          min={1}
          max={chapters.length}
          placeholder={`Nh·∫≠p (1-${chapters.length})`}
          value={jumpToChapter}
          onChange={handleChapterInputChange}
          onKeyDown={(e) => {
            if (e.key === "Enter") handleJumpToChapter();
          }}
        />
        <button onClick={handleJumpToChapter}>‚û°Ô∏è ƒêi t·ªõi ch∆∞∆°ng</button>
      </div>

      <div className="translate-all-container">
        <button
          className="translate-all-button"
          onClick={() => {
            if (hasTranslatedAll) {
              const confirmRetry = window.confirm(
                "B·∫°n c√≥ mu·ªën d·ªãch l·∫°i to√†n b·ªô ch∆∞∆°ng l·∫ßn n·ªØa kh√¥ng?"
              );
              if (confirmRetry) {
                translateAll();
              }
            } else {
              translateAll();
            }
          }}
          disabled={isTranslateAllDisabled || isTranslatingAll}
        >
          {isTranslatingAll ? (
            <span>
              <FontAwesomeIcon icon={faSpinner} spin /> ƒêang d·ªãch...
            </span>
          ) : hasTranslatedAll ? (
            "üîÅ D·ªãch l·∫°i to√†n b·ªô ch∆∞∆°ng"
          ) : (
            "üìñ D·ªãch to√†n b·ªô ch∆∞∆°ng"
          )}
        </button>
        <button
          className="stop-translate-button"
          onClick={() => (isStoppedRef.current = true)}
          disabled={!isTranslatingAll}
        >
          üõë D·ª´ng d·ªãch
        </button>
      </div>
      {isTranslatingAll && (
        <div className="progress-bar-container">
          <div
            className="progress-bar"
            style={{ width: `${totalProgress}%` }}
          ></div>
          <small className="progress-text">
            ƒêang d·ªãch... {totalProgress.toFixed(0)}%
          </small>
        </div>
      )}
      {errorMessages.general && (
        <div className="general-error">
          <p>{errorMessages.general}</p>
        </div>
      )}
    </div>
  );
};

export default ChapterList;
