import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSpinner } from "@fortawesome/free-solid-svg-icons";
import { translateAllChapters } from "../../services/translateChapters";
import { translateSingleChapter } from "../../services/translateSingleChapter";
import { toast } from "react-hot-toast";
import useTranslationProgress from "../../hook/useTranslationProgress";
import "./ChapterList.css";

const ChapterList = ({
  chapters,
  apiKey,
  model,
  onTranslationResult,
  onSelectChapter,
  onSelectJumbChapter,
  currentIndex = 0,
  storyId,
  deleteChapter,
  onChapterAdded,
  setChapters,
}) => {
  const [results, setResults] = useState({});
  const [errorMessages, setErrorMessages] = useState({});
  const [translatedCount, setTranslatedCount] = useState(0);
  const [isTranslateAllDisabled, setIsTranslateAllDisabled] = useState(false);
  const [isTranslatingAll, setIsTranslatingAll] = useState(false);
  const [hasTranslatedAll, setHasTranslatedAll] = useState(false);
  const isStoppedRef = useRef(false);
  const [translationDurations, setTranslationDurations] = useState({});
  const [chapterProgresses, setChapterProgresses] = useState({});
  const [chapterTranslatingStates, setChapterTranslatingStates] = useState({});

  // S·ª≠ d·ª•ng hook cho ti·∫øn ƒë·ªô t·ªïng
  const {
    progress: totalProgress,
    isTranslating: isTotalTranslating,
    startProgress: startTotalProgress,
    stopProgress: stopTotalProgress,
    averageTimePerWord,
  } = useTranslationProgress(30);
  // console.log("ƒë√¢y l√† th·ªùi gian trung b√¨nh d·ªãch t·ª´:", averageTimePerWord);
  // S·ª≠ d·ª•ng hook cho ti·∫øn ƒë·ªô t·ª´ng ch∆∞∆°ng
  const chapterProgressHooks = useRef({});

  // State cho ti·∫øn ƒë·ªô t·ªïng th·ª±c t·∫ø (b√°m s√°t s·ªë ch∆∞∆°ng ƒë√£ d·ªãch)
  const [manualTotalProgress, setManualTotalProgress] = useState(0);

  // Qu·∫£n l√Ω tr·∫°ng th√°i t·ª´ng ch∆∞∆°ng
  const [chapterStatus, setChapterStatus] = useState({}); // { [index]: 'PENDING' | 'PROCESSING' | 'COMPLETE' | 'CANCELLED' | 'FAILED' }

  // Ref ƒë·ªÉ l∆∞u tr·∫°ng th√°i h·ªßy d·ªãch c·ªßa t·ª´ng ch∆∞∆°ng
  const cancelMapRef = useRef({});

  // H√†m kh·ªüi t·∫°o hook ti·∫øn ƒë·ªô cho m·ªôt ch∆∞∆°ng
  const getChapterProgressHook = (index) => {
    if (!chapterProgressHooks.current[index]) {
      // T·∫°o m·ªôt object gi·∫£ l·∫≠p hook thay v√¨ g·ªçi hook th·∫≠t
      chapterProgressHooks.current[index] = {
        progress: 0,
        isTranslating: false,
        startProgress: () => {
          setChapterTranslatingStates((prev) => ({ ...prev, [index]: true }));
          setChapterProgresses((prev) => ({ ...prev, [index]: 0 }));

          // T·∫°o interval ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
          // M·ªói 150ms tƒÉng 1% (6.6% m·ªói gi√¢y)
          const interval = setInterval(() => {
            setChapterProgresses((prev) => {
              const currentProgress = prev[index] || 0;
              const newProgress = Math.min(currentProgress + 1, 98); // TƒÉng 1% m·ªói l·∫ßn, d·ª´ng ·ªü 98%
              return { ...prev, [index]: newProgress };
            });
          }, 150); // 150ms = 0.15s cho m·ªói 1%

          // L∆∞u interval ƒë·ªÉ c√≥ th·ªÉ clear sau
          chapterProgressHooks.current[index].interval = interval;
        },
        stopProgress: () => {
          setChapterTranslatingStates((prev) => ({ ...prev, [index]: false }));
          setChapterProgresses((prev) => ({ ...prev, [index]: 100 }));

          // Clear interval
          if (chapterProgressHooks.current[index].interval) {
            clearInterval(chapterProgressHooks.current[index].interval);
          }
        },
      };
    }
    return chapterProgressHooks.current[index];
  };

  //khu v·ª±c ph√¢n Trang
  const [currentPage, setCurrentPage] = useState(1);
  const chaptersPerPage = 10;

  // S·∫Øp x·∫øp chapters theo chapterNumber tƒÉng d·∫ßn
  const sortedChapters = [...chapters].sort(
    (a, b) => a.chapterNumber - b.chapterNumber
  );
  const totalPages = Math.ceil(sortedChapters.length / chaptersPerPage);

  const startIdx = (currentPage - 1) * chaptersPerPage;
  const endIdx = startIdx + chaptersPerPage;
  const currentChapters = sortedChapters.slice(startIdx, endIdx);

  // T√°ch ri√™ng state cho nh·∫£y trang v√† nh·∫£y ch∆∞∆°ng
  const [jumpToPage, setJumpToPage] = useState("");
  const [jumpToChapter, setJumpToChapter] = useState("");

  // H√†m t√≠nh s·ªë ch∆∞∆°ng d·ª±a tr√™n trang v√† v·ªã tr√≠
  const calculateChapterNumber = (index) => {
    return startIdx + index + 1;
  };

  const getTranslatedCount = () => {
    // ƒê·∫øm s·ªë ch∆∞∆°ng ƒë√£ d·ªãch th·ª±c t·∫ø (results ho·∫∑c chapters c√≥ translatedContent)
    return chapters.filter(
      (ch, idx) => results[idx] || ch.translatedContent || ch.translated
    ).length;
  };

  const canTranslate = (index) => {
    if (results[index]) return false; // ƒë√£ d·ªãch r·ªìi
    const translatedSoFar = getTranslatedCount();
    if (!apiKey && translatedSoFar >= 2) return false; // v∆∞·ª£t gi·ªõi h·∫°n
    return true;
  };

  useEffect(() => {
    // Ki·ªÉm tra c√≥ key kh·∫£ d·ª•ng kh√¥ng (c√≥ th·ªÉ l√† array ho·∫∑c string)
    const hasApiKey = Array.isArray(apiKey) ? apiKey.length > 0 : !!apiKey;

    if (hasApiKey) {
      setIsTranslateAllDisabled(false); // ‚úÖ ƒê√£ c√≥ key th√¨ lu√¥n b·∫≠t n√∫t
    } else {
      setIsTranslateAllDisabled(translatedCount >= 2); // ‚úÖ Ch∆∞a c√≥ key th√¨ gi·ªõi h·∫°n 2 ch∆∞∆°ng
    }
  }, [translatedCount, chapters.length, apiKey]);

  // Reset tr·∫°ng th√°i d·ªãch all khi chuy·ªÉn trang
  useEffect(() => {
    setHasTranslatedAll(false);
  }, [currentPage]);

  // ƒê·∫£m b·∫£o translatedCount kh√¥ng v∆∞·ª£t qu√° 2 n·∫øu kh√¥ng c√≥ apiKey
  useEffect(() => {
    const hasApiKey = Array.isArray(apiKey) ? apiKey.length > 0 : !!apiKey;
    if (!hasApiKey) {
      // ƒê·∫øm s·ªë ch∆∞∆°ng ƒë√£ d·ªãch (results)
      const count = Object.keys(results).length;
      if (count > 2) {
        setTranslatedCount(2);
      } else {
        setTranslatedCount(count);
      }
    }
  }, [apiKey, results]);

  // Callback cho translateAllChapters ƒë·ªÉ ƒëi·ªÅu khi·ªÉn progress t·ª´ng ch∆∞∆°ng
  const handleChapterStartProgress = (index) => {
    const chapterHook = getChapterProgressHook(index);
    chapterHook.startProgress();
  };
  const handleChapterStopProgress = (index) => {
    const chapterHook = getChapterProgressHook(index);
    chapterHook.stopProgress();
  };

  // H√†m d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng
  const translateAll = async () => {
    setIsTranslateAllDisabled(true);
    console.time("‚è±Ô∏è Th·ªùi gian d·ªãch to√†n b·ªô");

    setIsTranslatingAll(true);
    setManualTotalProgress(0); // Reset ti·∫øn ƒë·ªô t·ªïng th·ª±c t·∫ø

    // Ki·ªÉm tra c√≥ key kh·∫£ d·ª•ng kh√¥ng
    const hasApiKey = Array.isArray(apiKey) ? apiKey.length > 0 : !!apiKey;
    const maxChapters = hasApiKey ? chapters.length : 2;

    if (!hasApiKey) {
      const remainingFree = 2 - translatedCount;
      if (remainingFree <= 0) {
        toast.error(
          "üîí Ch·ªâ ƒë∆∞·ª£c d·ªãch 2 ch∆∞∆°ng ƒë·∫ßu mi·ªÖn ph√≠. H√£y nh·∫≠p API key ƒë·ªÉ ti·∫øp t·ª•c."
        );
        setIsTranslateAllDisabled(true);
        setIsTranslatingAll(false);
        return;
      }
    }

    // L·∫•y c√°c ch∆∞∆°ng trong trang hi·ªán t·∫°i
    const currentPageChapters = currentChapters.map((chapter, pageIndex) => {
      // T√¨m index th·ª±c t·∫ø trong m·∫£ng chapters g·ªëc
      const actualIndex = chapters.findIndex(
        (ch) => ch.chapterNumber === chapter.chapterNumber
      );
      return { ...chapter, originalIndex: actualIndex, pageIndex };
    });

    // L·ªçc ra c√°c ch∆∞∆°ng ch∆∞a d·ªãch trong trang hi·ªán t·∫°i
    const chaptersToTranslate = currentPageChapters
      .filter((chapter) => !results[chapter.originalIndex])
      .slice(
        0,
        hasApiKey
          ? currentPageChapters.length
          : Math.min(2 - translatedCount, currentPageChapters.length)
      );

    console.log(
      "üìÑ Ch∆∞∆°ng trong trang hi·ªán t·∫°i:",
      currentPageChapters.map((ch) => ch.chapterName)
    );
    console.log(
      "üìù Ch∆∞∆°ng s·∫Ω d·ªãch:",
      chaptersToTranslate.map((ch) => ch.chapterName)
    );

    if (chaptersToTranslate.length === 0) {
      toast.success("T·∫•t c·∫£ c√°c ch∆∞∆°ng trong trang n√†y ƒë√£ ƒë∆∞·ª£c d·ªãch.");
      setIsTranslatingAll(false);
      setHasTranslatedAll(true);
      setManualTotalProgress(100); // ƒê·∫£m b·∫£o l√™n 100% khi xong
      return;
    }

    // Reset tr·∫°ng th√°i h·ªßy cho c√°c ch∆∞∆°ng s·∫Øp d·ªãch
    chaptersToTranslate.forEach(ch => {
      cancelMapRef.current[ch.originalIndex] = false;
    });

    try {
      await translateAllChapters({
        chaptersToTranslate,
        chapters,
        apiKey,
        model,
        storyId,
        setResults: (updater) => {
          // B·ªçc l·∫°i ƒë·ªÉ ki·ªÉm tra cancelMapRef tr∆∞·ªõc khi c·∫≠p nh·∫≠t
          if (typeof updater === 'function') {
            setResults((prev) => {
              const next = updater(prev);
              // Log t·ª´ng index tr∆∞·ªõc khi l·ªçc
              Object.keys(next).forEach(idx => {
                console.log(`[LOG][setResults-batch] idx=${idx}, status=${chapterStatus[idx]}, cancelFlag=${cancelMapRef.current[idx]}`);
              });
              // Lo·∫°i b·ªè k·∫øt qu·∫£ c√°c ch∆∞∆°ng ƒë√£ b·ªã h·ªßy
              const filtered = { ...next };
              Object.keys(filtered).forEach(idx => {
                if (cancelMapRef.current[idx] || chapterStatus[idx] === "CANCELLED") {
                  console.log(`[SKIP][setResults-batch] B·ªè qua c·∫≠p nh·∫≠t idx=${idx} v√¨ ƒë√£ CANCELLED ho·∫∑c c·ªù h·ªßy.`);
                  delete filtered[idx];
                }
              });
              return filtered;
            });
          } else {
            // updater l√† object
            Object.keys(updater).forEach(idx => {
              console.log(`[LOG][setResults-batch-obj] idx=${idx}, status=${chapterStatus[idx]}, cancelFlag=${cancelMapRef.current[idx]}`);
            });
            const filtered = { ...updater };
            Object.keys(filtered).forEach(idx => {
              if (cancelMapRef.current[idx] || chapterStatus[idx] === "CANCELLED") {
                console.log(`[SKIP][setResults-batch-obj] B·ªè qua c·∫≠p nh·∫≠t idx=${idx} v√¨ ƒë√£ CANCELLED ho·∫∑c c·ªù h·ªßy.`);
                delete filtered[idx];
              }
            });
            setResults(filtered);
          }
        },
        setTranslatedCount,
        setErrorMessages,
        onTranslationResult: (index, translated, translatedTitle, duration) => {
          // Log l·∫°i gi√° tr·ªã m·ªõi nh·∫•t
          console.log(`[CHECK][onTranslationResult] index=${index}, status hi·ªán t·∫°i=${chapterStatus[index]}, cancelFlag hi·ªán t·∫°i=${cancelMapRef.current[index]}`);
          if (cancelMapRef.current[index] || chapterStatus[index] === "CANCELLED") {
            console.log(`[SKIP][onTranslationResult-batch] B·ªè qua c·∫≠p nh·∫≠t v√¨ ƒë√£ CANCELLED ho·∫∑c c·ªù h·ªßy.`);
            return;
          }
          onTranslationResult(index, translated, translatedTitle, duration);
        },
        isStopped: isStoppedRef.current,
        onChapterStartProgress: handleChapterStartProgress,
        onChapterStopProgress: handleChapterStopProgress,
        onUpdateTotalProgress: (percent) => setManualTotalProgress(percent),
        getChapterStatus: (idx) => chapterStatus[idx],
        onBatchCancel: (batchIndex) => {
          // ƒê√°nh d·∫•u tr·∫°ng th√°i CANCELLED cho c√°c ch∆∞∆°ng trong batch b·ªã hu·ª∑
          setChapterStatus(prev => {
            const newStatus = { ...prev };
            const start = batchIndex * 3;
            const end = start + 3;
            for (let i = start; i < end; i++) {
              if (newStatus[i] === "PROCESSING" || newStatus[i] === "PENDING") {
                console.log(`[STOP][BatchCancel] Set CANCELLED cho idx=${i}, status c≈©=${newStatus[i]}`);
                newStatus[i] = "CANCELLED";
                cancelMapRef.current[i] = true;
              }
            }
            return newStatus;
          });
        },
        setChapterStatus: (originalIndex, status) => {
          setChapterStatus((prev) => {
            const newStatus = { ...prev, [originalIndex]: status };
            console.log(`[SET][${status.toUpperCase()}] idx=${originalIndex}, status m·ªõi=${newStatus[originalIndex]}, cancelFlag=${cancelMapRef.current[originalIndex]}`);
            return newStatus;
          });
        },
        setChapterStatusProcessing: (originalIndex) => {
          setChapterStatus((prev) => {
            const newStatus = { ...prev, [originalIndex]: "PROCESSING" };
            console.log(`[SET][PROCESSING][BATCH] idx=${originalIndex}, status m·ªõi=${newStatus[originalIndex]}, cancelFlag=${cancelMapRef.current[originalIndex]}`);
            return newStatus;
          });
        },
      });
    } catch (error) {
      console.error("L·ªói khi d·ªãch ch∆∞∆°ng:", error);
      setErrorMessages((prev) => ({
        ...prev,
        general: "‚ùå L·ªói khi d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng.",
      }));
      toast.error("‚ùå L·ªói khi d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng.");
      setIsTranslateAllDisabled(false);
    } finally {
      console.timeEnd("‚è±Ô∏è Th·ªùi gian d·ªãch to√†n b·ªô");
      setIsTranslatingAll(false);
      setHasTranslatedAll(true);
      setManualTotalProgress(100); // ƒê·∫£m b·∫£o l√™n 100% khi xong
    }
  };

  // H√†m d·ªãch t·ª´ng ch∆∞∆°ng
  const translate = (index) => {
    cancelMapRef.current[index] = false; // Reset tr·∫°ng th√°i h·ªßy khi d·ªãch l·∫°i
    // N·∫øu kh√¥ng ƒë∆∞·ª£c ph√©p d·ªãch th√¨ return lu√¥n, kh√¥ng ch·∫°y ti·∫øp
    if (!canTranslate(index)) return;
    // N·∫øu ch∆∞∆°ng ƒëang PROCESSING ho·∫∑c PENDING th√¨ kh√¥ng cho d·ªãch l·∫°i
    if (
      chapterStatus[index] === "PROCESSING" ||
      chapterStatus[index] === "PENDING"
    )
      return;

    // ƒê·∫∑t tr·∫°ng th√°i PENDING
    setChapterStatus((prev) => {
      const newStatus = { ...prev, [index]: "PENDING" };
      console.log(`[SET][PENDING] idx=${index}, status m·ªõi=${newStatus[index]}, cancelFlag=${cancelMapRef.current[index]}`);
      return newStatus;
    });
    console.log(`D∆∞·ªõi setChapterStatus [SET][PENDING] newStatus=${newStatus}`)

    setTimeout(() => {
      // N·∫øu user ƒë√£ h·ªßy tr∆∞·ªõc khi g·ª≠i request
      if (chapterStatus[index] === "CANCELLED" || cancelMapRef.current[index]) {
        console.log(
          `[CHAPTER ${index}] ƒê√£ h·ªßy tr∆∞·ªõc khi g·ª≠i request, kh√¥ng g·ª≠i n·ªØa.`
        );
        return;
      }
      // Chuy·ªÉn sang PROCESSING
      setChapterStatus((prev) => {
        const newStatus = { ...prev, [index]: "PROCESSING" };
        console.log(`[SET][PROCESSING] idx=${index}, status m·ªõi=${newStatus[index]}, cancelFlag=${cancelMapRef.current[index]}`);
        return newStatus;
      });

      console.log(`D∆∞·ªõi setChapterStatus [SET][PROCESSING] newStatus=${newStatus}`)
      const chapterHook = getChapterProgressHook(index);
      chapterHook.startProgress(); // B·∫Øt ƒë·∫ßu ti·∫øn ƒë·ªô cho ch∆∞∆°ng n√†y

      translateSingleChapter({
        index,
        chapters,
        apiKey,
        model,
        storyId,
        setProgress: (progress) => {
          setChapterProgresses((prev) => ({ ...prev, [index]: progress }));
        },
        setResults: (updater) => {
          if (cancelMapRef.current[index] || chapterStatus[index] === "CANCELLED") {
            console.log(`[SKIP][setResults-single] idx=${index} ƒë√£ CANCELLED ho·∫∑c c·ªù h·ªßy, b·ªè qua c·∫≠p nh·∫≠t.`);
            return;
          }
          setResults(updater);
        },
        setErrorMessages,
        setTranslatedCount,
        setTotalProgress: (progress) => {
          startTotalProgress();
        },
        onTranslationResult: (idx, translated, translatedTitle, duration) => {
          console.log(`[LOG][onTranslationResult-single] idx=${idx}, status=${chapterStatus[idx]}, cancelFlag=${cancelMapRef.current[idx]}`);
          if (cancelMapRef.current[idx] || chapterStatus[idx] === "CANCELLED") {
            console.log(`[SKIP][onTranslationResult-single] B·ªè qua c·∫≠p nh·∫≠t v√¨ ƒë√£ CANCELLED ho·∫∑c c·ªù h·ªßy.`);
            return;
          }
          onTranslationResult(idx, translated, translatedTitle, duration);
        },
        onSelectChapter,
        isStopped: isStoppedRef.current,
        onComplete: (duration, error) => {
          // N·∫øu user ƒë√£ h·ªßy trong l√∫c ƒëang d·ªãch
          if (chapterStatus[index] === "CANCELLED" || cancelMapRef.current[index]) {
            chapterHook.stopProgress();
            setChapterStatus((prev) => {
              const newStatus = { ...prev, [index]: "CANCELLED" };
              console.log(`[SET][CANCELLED] idx=${index}, status m·ªõi=${newStatus[index]}, cancelFlag=${cancelMapRef.current[index]}`);
              return newStatus;
            });
            console.log(
              `[CHAPTER ${index}] ƒê√£ h·ªßy trong l√∫c ƒëang d·ªãch, b·ªè qua k·∫øt qu·∫£.`
            );
            return;
          }
          chapterHook.stopProgress();
          if (error) {
            setChapterStatus((prev) => {
              const newStatus = { ...prev, [index]: "FAILED" };
              console.log(`[QUEUE][${new Date().toLocaleTimeString()}] Ch∆∞∆°ng ${index} chuy·ªÉn tr·∫°ng th√°i: FAILED. L√Ω do:`, error);
              return newStatus;
            });
            console.log(`[CHAPTER ${index}] L·ªói khi d·ªãch:`, error);
          } else {
            if (cancelMapRef.current[index] || chapterStatus[index] === "CANCELLED") {
              console.log(`[COMPLETE][SetStatus] idx=${index}, status c≈©=${chapterStatus[index]}, cancelFlag=${cancelMapRef.current[index]}`);
              console.log(`[CHAPTER ${index}] ƒê√£ h·ªßy, kh√¥ng set COMPLETE.`);
              return;
            }
            setChapterStatus((prev) => {
              console.log(`[COMPLETE][SetStatus] idx=${index}, status c≈©=${prev[index]}, cancelFlag=${cancelMapRef.current[index]}`);
              const newStatus = { ...prev, [index]: "COMPLETE" };
              console.log(`[QUEUE][${new Date().toLocaleTimeString()}] Ch∆∞∆°ng ${index} chuy·ªÉn tr·∫°ng th√°i: COMPLETE`);
              return newStatus;
            });
            console.log(`[CHAPTER ${index}] D·ªãch xong.`);
          }
          stopTotalProgress();
          setTranslationDurations((prev) => ({ ...prev, [index]: duration }));
          setTimeout(() => {
            setChapterProgresses((prev) => {
              const newProgresses = { ...prev };
              delete newProgresses[index];
              return newProgresses;
            });
          }, 2000);
        },
      });
    }, 200); // delay nh·ªè ƒë·ªÉ user c√≥ th·ªÉ b·∫•m h·ªßy ngay sau khi b·∫•m d·ªãch
  };

  // H√†m h·ªßy d·ªãch 1 ch∆∞∆°ng
  const cancelTranslate = (index) => {
    // Ch·ªâ cho h·ªßy khi ƒëang PENDING ho·∫∑c PROCESSING
    if (
      chapterStatus[index] === "PENDING" ||
      chapterStatus[index] === "PROCESSING"
    ) {
      setChapterStatus((prev) => {
        const newStatus = { ...prev, [index]: "CANCELLED" };
        console.log(`[SET][CANCELLED] idx=${index}, status m·ªõi=${newStatus[index]}, cancelFlag=${cancelMapRef.current[index]}`);
        return newStatus;
      });
      cancelMapRef.current[index] = true;
      console.log(`[SET][cancelFlag] idx=${index}, cancelFlag m·ªõi=${cancelMapRef.current[index]}`);
      toast("ƒê√£ hu·ª∑ d·ªãch ch∆∞∆°ng th√†nh c√¥ng!", { icon: "üõë" });
    }
  };

  // H√†m nh·∫£y t·ªõi trang
  const handleJumpToPage = () => {
    const num = parseInt(jumpToPage);
    if (isNaN(num)) {
      toast.error("‚ùå Vui l√≤ng nh·∫≠p s·ªë trang h·ª£p l·ªá!");
      return;
    }

    if (num < 1 || num > totalPages) {
      toast.error(`‚ùå S·ªë trang ph·∫£i t·ª´ 1 ƒë·∫øn ${totalPages}!`);
      return;
    }

    setCurrentPage(num);
    setJumpToPage(""); // Reset input sau khi nh·∫£y
  };

  // H√†m nh·∫£y t·ªõi ch∆∞∆°ng
  const handleJumpToChapter = () => {
    const num = parseInt(jumpToChapter);
    if (isNaN(num)) {
      toast.error("‚ùå Vui l√≤ng nh·∫≠p s·ªë ch∆∞∆°ng h·ª£p l·ªá!");
      return;
    }

    if (num < 1 || num > chapters.length) {
      toast.error(`‚ùå S·ªë ch∆∞∆°ng ph·∫£i t·ª´ 1 ƒë·∫øn ${chapters.length}!`);
      return;
    }

    const targetIndex = num - 1;
    const newPage = Math.ceil(num / chaptersPerPage);
    setCurrentPage(newPage);
    onSelectChapter?.(targetIndex);
    setJumpToChapter(""); // Reset input sau khi nh·∫£y
  };

  // H√†m x·ª≠ l√Ω khi nh·∫≠p gi√° tr·ªã v√†o input nh·∫£y trang
  const handlePageInputChange = (e) => {
    const value = e.target.value;
    const num = parseInt(value);

    if (value === "") {
      setJumpToPage("");
      return;
    }

    if (isNaN(num)) {
      return;
    }

    if (num >= 1 && num <= totalPages) {
      setJumpToPage(value);
    }
  };

  // H√†m x·ª≠ l√Ω khi nh·∫≠p gi√° tr·ªã v√†o input nh·∫£y ch∆∞∆°ng
  const handleChapterInputChange = (e) => {
    const value = e.target.value;
    const num = parseInt(value);

    if (value === "") {
      setJumpToChapter("");
      return;
    }

    if (isNaN(num)) {
      return;
    }

    if (num >= 1 && num <= chapters.length) {
      setJumpToChapter(value);
    }
  };

  // H√†m x·ª≠ l√Ω khi ch·ªçn ch∆∞∆°ng
  const handleSelectChapter = (index, page) => {
    // L·∫•y chapterNumber t·ª´ sortedChapters
    const chapterNumber = sortedChapters[index]?.chapterNumber;
    console.log("S·ªë ch∆∞∆°ng ƒë∆∞·ª£c ch·ªçn:", chapterNumber);
    console.log("Index ƒë∆∞·ª£c ch·ªçn:", index);
    console.log("Sorted chapters:", sortedChapters);

    // T√¨m index th·ª±c t·∫ø trong m·∫£ng chapters d·ª±a tr√™n chapterNumber
    const actualIndex = chapters.findIndex(
      (ch) => ch.chapterNumber === chapterNumber
    );
    console.log("Index th·ª±c t·∫ø trong m·∫£ng chapters:", actualIndex);

    if (page) {
      setCurrentPage(page);
    }
    onSelectChapter?.(actualIndex); // Truy·ªÅn index th·ª±c t·∫ø
  };

  // H√†m x·ª≠ l√Ω x√≥a ch∆∞∆°ng
  const handleDeleteChapter = async (chapterNumber) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ch∆∞∆°ng n√†y?")) {
      try {
        await deleteChapter(storyId, chapterNumber);
        // G·ªçi callback ƒë·ªÉ t·∫£i l·∫°i d·ªØ li·ªáu
        if (onChapterAdded) {
          onChapterAdded();
        }
        toast.success("ƒê√£ x√≥a ch∆∞∆°ng th√†nh c√¥ng!");
      } catch (error) {
        console.error("L·ªói khi x√≥a ch∆∞∆°ng:", error);
        toast.error("L·ªói khi x√≥a ch∆∞∆°ng!");
      }
    }
  };

  // T√≠nh t·ªïng s·ªë t·ª´ c·ªßa 1 trang hi·ªán t·∫°i
  const totalWordsInPage = currentChapters.reduce((sum, ch) => {
    const titleWords = (ch.title || ch.chapterName || "")
      .split(/\s+/)
      .filter(Boolean).length;
    const contentWords = (ch.content || ch.rawText || "")
      .split(/\s+/)
      .filter(Boolean).length;
    return sum + titleWords + contentWords;
  }, 0);

  // L·∫•y averageTimePerWord t·ª´ hook
  const estimatedTime = Math.round(
    totalWordsInPage * parseFloat(averageTimePerWord)
  ); // gi√¢y
  const estimatedTimeStr =
    estimatedTime < 60
      ? `${estimatedTime} gi√¢y`
      : `${Math.floor(estimatedTime / 60)} ph√∫t ${estimatedTime % 60} gi√¢y`;

  // H√†m d·ª´ng d·ªãch to√†n b·ªô ch∆∞∆°ng
  const stopAllTranslation = () => {
    isStoppedRef.current = true;
    // L·∫•y danh s√°ch c√°c ch∆∞∆°ng ƒëang PENDING ho·∫∑c PROCESSING trong trang hi·ªán t·∫°i
    currentChapters.forEach((ch) => {
      // L·∫•y index th·ª±c t·∫ø trong m·∫£ng chapters
      const idx = chapters.findIndex(
        (chapter) => chapter.chapterNumber === ch.chapterNumber
      );
      if (chapterStatus[idx] === "PENDING" || chapterStatus[idx] === "PROCESSING") {
        setChapterStatus((prev) => {
          const newStatus = { ...prev, [idx]: "CANCELLED" };
          console.log(`[SET][CANCELLED] idx=${idx}, status m·ªõi=${newStatus[idx]}, cancelFlag=${cancelMapRef.current[idx]}`);
          return newStatus;
        });
        cancelMapRef.current[idx] = true;
        console.log(`[SET][cancelFlag] idx=${idx}, cancelFlag m·ªõi=${cancelMapRef.current[idx]}`);
        console.log(`[STOP][stopAllTranslation] Set CANCELLED cho idx=${idx}, status c≈©=${chapterStatus[idx]}`);
      }
    });
    toast.success("ƒê√£ d·ª´ng d·ªãch to√†n b·ªô ch∆∞∆°ng trong trang!");
    setHasTranslatedAll(false);
    toast(
      `∆Ø·ªõc t√≠nh th·ªùi gian d·ªãch 1 trang: ${estimatedTimeStr} (T·ªïng ${totalWordsInPage} t·ª´, trung b√¨nh ${averageTimePerWord} gi√¢y/t·ª´)`
    );
  };

  // Expose setChapterStatus ra window ƒë·ªÉ d·ªãch batch g·ªçi ƒë∆∞·ª£c
  useEffect(() => {
    window.setChapterStatusGlobal = (originalIndex, status) => {
      setChapterStatus((prev) => {
        const newStatus = { ...prev, [originalIndex]: status };
        console.log(`[SET][${status.toUpperCase()}][BATCH] idx=${originalIndex}, status m·ªõi=${newStatus[originalIndex]}, cancelFlag=${cancelMapRef.current[originalIndex]}`);
        return newStatus;
      });
    };
    return () => {
      window.setChapterStatusGlobal = undefined;
    };
  }, []);

  return (
    <div className="chapter-list">
      <h3>üìö Danh s√°ch ch∆∞∆°ng ({sortedChapters.length})</h3>
      <ul>
        {currentChapters.map((ch, idxOnPage) => {
          const calculatedChapterNumber = calculateChapterNumber(idxOnPage);
          const idx = chapters.findIndex(
            (chapter) => chapter.chapterNumber === ch.chapterNumber
          );
          const isTranslated = !!results[idx];
          const duration = translationDurations[idx];

          // L·∫•y progress t·ª´ state
          const chapterProgress = chapterProgresses[idx] || 0;
          const isChapterTranslating = chapterTranslatingStates[idx] || false;

          return (
            <li key={ch.chapterNumber}>
              <div
                className={`chapter-item ${
                  idx === currentIndex ? "selected" : ""
                }`}
                onClick={() =>
                  handleSelectChapter(
                    idx,
                    Math.ceil(ch.chapterNumber / chaptersPerPage)
                  )
                }
              >
                <div className="chapter-header">
                  <p>Ch∆∞∆°ng {calculatedChapterNumber}:</p>
                  <strong>
                    {ch.translatedTitle ||
                      ch.title ||
                      ch.chapterName ||
                      `Ch∆∞∆°ng ${calculatedChapterNumber}`}
                  </strong>
                  {/* ƒê√É D·ªäCH: ƒê∆∞a xu·ªëng d∆∞·ªõi tr·∫°ng th√°i */}
                  {/* {isTranslated && (
                    <span className="translated-label">
                      ‚úÖ ƒê√£ d·ªãch {duration ? `(${duration.toFixed(1)}s)` : ""}
                    </span>
                  )} */}
                  <div className="chapter-actions">
                    {/* N√∫t D·ªãch ch·ªâ hi·ªán khi kh√¥ng PROCESSING/PENDING */}
                    {!(
                      chapterStatus[idx] === "PROCESSING" ||
                      chapterStatus[idx] === "PENDING"
                    ) && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          translate(idx);
                        }}
                        disabled={
                          !canTranslate(idx) ||
                          isTranslatingAll ||
                          chapterStatus[idx] === "PROCESSING" ||
                          chapterStatus[idx] === "PENDING"
                        }
                        className={`translate-sgn-button ${
                          isTranslated ? "hidden" : ""
                        }`}
                      >
                        üìù D·ªãch
                      </button>
                    )}
                    {/* N√∫t h·ªßy d·ªãch ch·ªâ hi·ªán khi PROCESSING ho·∫∑c PENDING */}
                    {(chapterStatus[idx] === "PENDING" ||
                      chapterStatus[idx] === "PROCESSING") && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          cancelTranslate(idx);
                        }}
                        className="cancel-translate-button"
                        style={{ height: "42px" }}
                      >
                        üõë H·ªßy D·ªãch
                      </button>
                    )}
                    {/* N√∫t X√≥a ch·ªâ hi·ªán khi kh√¥ng PROCESSING/PENDING */}
                    {!(
                      chapterStatus[idx] === "PROCESSING" ||
                      chapterStatus[idx] === "PENDING"
                    ) && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteChapter(ch.chapterNumber);
                        }}
                        className={`delete-chapter-button${
                          chapterStatus[idx] === "COMPLETE" ? " complete" : ""
                        }`}
                      >
                        ‚ùå Xo√°
                      </button>
                    )}
                  </div>
                </div>
                {/* Hi·ªÉn th·ªã tr·∫°ng th√°i ch∆∞∆°ng */}
                {chapterStatus[idx] && (
                  <div className="chapter-status">
                    <span>
                      Tr·∫°ng th√°i: <b>{chapterStatus[idx]}</b>
                    </span>
                    {/* Hi·ªÉn th·ªã thanh ti·∫øn ƒë·ªô n·∫øu ƒëang PROCESSING ho·∫∑c PENDING */}
                    {(chapterStatus[idx] === "PROCESSING" ||
                      chapterStatus[idx] === "PENDING") && (
                      <div className="chapter-progress-bar-container">
                        <div
                          className="chapter-progress-bar"
                          style={{ width: `${chapterProgress}%` }}
                        ></div>
                        <div className="progress-info">
                          <small className="progress-text">
                            ƒêang d·ªãch... {chapterProgress.toFixed(0)}%
                          </small>
                        </div>
                      </div>
                    )}
                    {/* Hi·ªÉn th·ªã label ƒêang d·ªãch ho·∫∑c ƒê√£ d·ªãch */}
                    {(chapterStatus[idx] === "PROCESSING" || chapterStatus[idx] === "PENDING") && (
                      <span className="translated-label" >
                        üîÑ ƒêang d·ªãch, vui l√≤ng ch·ªù...
                      </span>
                    )}
                    {chapterStatus[idx] === "COMPLETE" && (
                      <span className="translated-label">
                        ‚úÖ ƒê√£ d·ªãch {duration ? `(${duration.toFixed(1)}s)` : ""}
                      </span>
                    )}
                  </div>
                )}
                {errorMessages[idx] && (
                  <div className="error-message">
                    <p>{errorMessages[idx]}</p>
                  </div>
                )}
              </div>
            </li>
          );
        })}
      </ul>
      {/* trang ch·ª©a c√°c ch∆∞∆°ng khi v∆∞·ª£t qu√° 10 ch∆∞∆°ng */}
      <div className="pagination">
        <button onClick={() => setCurrentPage(1)} disabled={currentPage === 1}>
          ‚èÆÔ∏è Trang ƒë·∫ßu
        </button>

        {/* Hi·ªÉn th·ªã trang ƒë·∫ßu ti√™n */}
        {currentPage > 2 && (
          <button onClick={() => setCurrentPage(1)}>1</button>
        )}

        {/* Hi·ªÉn th·ªã d·∫•u ... khi c·∫ßn */}
        {currentPage > 3 && <span>...</span>}

        {/* Hi·ªÉn th·ªã c√°c trang xung quanh trang hi·ªán t·∫°i */}
        {Array.from({ length: totalPages }, (_, i) => i + 1)
          .filter((pageNum) => {
            // Lu√¥n hi·ªÉn th·ªã trang ƒë·∫ßu v√† trang cu·ªëi
            if (pageNum === 1 || pageNum === totalPages) return true;
            // Hi·ªÉn th·ªã c√°c trang xung quanh trang hi·ªán t·∫°i (tr∆∞·ªõc v√† sau 1 trang)
            return Math.abs(pageNum - currentPage) <= 1;
          })
          .map((pageNum, index, array) => {
            // Th√™m d·∫•u ... gi·ªØa c√°c kho·∫£ng tr·ªëng
            const showEllipsisBefore =
              index > 0 && array[index - 1] !== pageNum - 1;
            const showEllipsisAfter =
              index < array.length - 1 && array[index + 1] !== pageNum + 1;

            return (
              <React.Fragment key={pageNum}>
                {showEllipsisBefore && <span>...</span>}
                <button
                  className={currentPage === pageNum ? "active" : ""}
                  onClick={() => setCurrentPage(pageNum)}
                >
                  {pageNum}
                </button>
                {showEllipsisAfter && <span>...</span>}
              </React.Fragment>
            );
          })}

        {/* Hi·ªÉn th·ªã d·∫•u ... khi c·∫ßn */}
        {currentPage < totalPages - 2 && <span>...</span>}

        {/* Hi·ªÉn th·ªã trang cu·ªëi c√πng */}
        {currentPage < totalPages - 1 && (
          <button onClick={() => setCurrentPage(totalPages)}>
            {totalPages}
          </button>
        )}

        <button
          onClick={() => setCurrentPage(totalPages)}
          disabled={currentPage === totalPages}
        >
          ‚è≠Ô∏è Trang cu·ªëi
        </button>
      </div>

      {/* nh·∫£y t·ªõi trang */}
      <div className="jump-to-page">
        <label>üîç Nh·∫£y t·ªõi trang:</label>
        <input
          type="number"
          min={1}
          max={totalPages}
          placeholder={`Nh·∫≠p (1-${totalPages})`}
          value={jumpToPage}
          onChange={handlePageInputChange}
          onKeyDown={(e) => {
            if (e.key === "Enter") handleJumpToPage();
          }}
        />
        <button onClick={handleJumpToPage}>‚û°Ô∏è ƒêi t·ªõi trang</button>
      </div>

      {/* nh·∫£y t·ªõi ch∆∞∆°ng */}
      <div className="jump-to-chapter">
        <label>üîç Nh·∫£y t·ªõi ch∆∞∆°ng:</label>
        <input
          type="number"
          min={1}
          max={chapters.length}
          placeholder={`Nh·∫≠p (1-${chapters.length})`}
          value={jumpToChapter}
          onChange={handleChapterInputChange}
          onKeyDown={(e) => {
            if (e.key === "Enter") handleJumpToChapter();
          }}
        />
        <button onClick={handleJumpToChapter}>‚û°Ô∏è ƒêi t·ªõi ch∆∞∆°ng</button>
      </div>

      <div className="translate-all-container">
        <button
          className="translate-all-button"
          onClick={() => {
            if (hasTranslatedAll) {
              const confirmRetry = window.confirm(
                "B·∫°n c√≥ mu·ªën d·ªãch l·∫°i to√†n b·ªô ch∆∞∆°ng l·∫ßn n·ªØa kh√¥ng?"
              );
              if (confirmRetry) {
                translateAll();
              }
            } else {
              translateAll();
            }
          }}
          disabled={isTranslateAllDisabled || isTranslatingAll}
        >
          {isTranslatingAll ? (
            <span>
              <FontAwesomeIcon icon={faSpinner} spin /> ƒêang d·ªãch...
            </span>
          ) : hasTranslatedAll ? (
            "üîÅ D·ªãch l·∫°i to√†n b·ªô ch∆∞∆°ng trong trang"
          ) : (
            "üìñ D·ªãch to√†n b·ªô ch∆∞∆°ng trong trang"
          )}
        </button>
        <button
          className="stop-translate-all-button"
          onClick={stopAllTranslation}
          disabled={!isTranslatingAll}
        >
          üõë D·ª´ng d·ªãch to√†n b·ªô ch∆∞∆°ng trong trang
        </button>
      </div>
      {isTranslatingAll && (
        <div className="progress-bar-container">
          <div
            className="progress-bar"
            style={{ width: `${manualTotalProgress}%` }}
          ></div>
          <small className="progress-text">
            ƒêang d·ªãch... {manualTotalProgress.toFixed(0)}%<br />
            <span style={{ fontSize: "12px", color: "#888" }}>
              Ti·∫øn ƒë·ªô t·ªïng l√† ∆∞·ªõc l∆∞·ª£ng d·ª±a tr√™n s·ªë ch∆∞∆°ng ƒë√£ d·ªãch, kh√¥ng ph·∫£i
              th·ªùi gian th·ª±c t·∫ø.
            </span>
          </small>
        </div>
      )}
      {errorMessages.general && (
        <div className="general-error">
          <p>{errorMessages.general}</p>
        </div>
      )}
      {/* Th·ªùi gian d·ª± ki·∫øn d·ªãch trang */}
      <div style={{ margin: "8px 0", color: "#888", fontSize: "15px" }}>
        ‚è≥ Th·ªùi gian d·ª± ki·∫øn d·ªãch trang n√†y: <b>{estimatedTimeStr}</b> (T·ªïng{" "}
        {totalWordsInPage} t·ª´, trung b√¨nh {averageTimePerWord} gi√¢y/t·ª´)
      </div>
    </div>
  );
};

export default ChapterList;
