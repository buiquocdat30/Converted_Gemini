import React, { useState, useEffect } from "react";
import axios from "axios";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSpinner } from "@fortawesome/free-solid-svg-icons";
import "../css/ChapterList.css";

const ChapterList = ({
  chapters,
  apiKey,
  onTranslationResult,
  onSelectChapter,
}) => {
  const [results, setResults] = useState({});
  const [errorMessages, setErrorMessages] = useState({}); // Th√™m tr·∫°ng th√°i l·ªói
  const [translatedCount, setTranslatedCount] = useState(0); //ch∆∞∆°ng ƒë√£ d·ªãch
  const [progress, setProgress] = useState({}); // L∆∞u ti·∫øn ƒë·ªô m·ªói ch∆∞∆°ng
  const [totalProgress, setTotalProgress] = useState(0); // L∆∞u ti·∫øn ƒë·ªô t·ªïng
  const [isTranslateAllDisabled, setIsTranslateAllDisabled] = useState(false); //Disable n√∫t d·ªãch t·ªïng
  const [isTranslatingAll, setIsTranslatingAll] = useState(false); //N√∫t quay quay loading

  //ƒë·∫øm ch∆∞∆°ng
  const canTranslate = (index) => {
    if (results[index]) return false; // ƒë√£ d·ªãch r·ªìi
    if (!apiKey && translatedCount >= 2) return false; // v∆∞·ª£t gi·ªõi h·∫°n
    return true;
  };

  useEffect(() => {
    const maxChapters = apiKey ? chapters.length : 2;
    if (translatedCount >= maxChapters) {
      setIsTranslateAllDisabled(true); // ‚úÖ Disable n√∫t n·∫øu ƒë√£ d·ªãch ƒë·ªß
    }
  }, [translatedCount, chapters, apiKey]);

  // H√†m d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng
  const translateAll = async () => {
    setIsTranslateAllDisabled(true); // ‚úÖ Disable ngay khi b·∫Øt ƒë·∫ßu
    console.time("‚è±Ô∏è Th·ªùi gian d·ªãch to√†n b·ªô");

    setIsTranslatingAll(true); // ‚úÖ B·∫Øt ƒë·∫ßu loading
    const maxChapters = apiKey ? chapters.length : 2;

    if (!apiKey && chapters.length > 2) {
      alert(
        "üîí Ch·ªâ ƒë∆∞·ª£c d·ªãch 2 ch∆∞∆°ng ƒë·∫ßu mi·ªÖn ph√≠. H√£y nh·∫≠p API key ƒë·ªÉ ti·∫øp t·ª•c."
      );
      setIsTranslateAllDisabled(false); // ‚úÖ M·ªü l·∫°i n·∫øu ch∆∞a ƒë∆∞·ª£c d·ªãch
      setIsTranslatingAll(false); // ‚ùå D·ª´ng loading n·∫øu kh√¥ng d·ªãch
      return;
    }

    const chaptersToTranslate = chapters
      .map((chapter, index) => ({ ...chapter, originalIndex: index }))
      .filter((_, index) => !results[index])
      .slice(0, maxChapters - translatedCount); // ch·ªâ d·ªãch th√™m n·∫øu ch∆∞a ƒë·ªß

    if (chaptersToTranslate.length === 0) {
      alert("T·∫•t c·∫£ c√°c ch∆∞∆°ng ƒë√£ ƒë∆∞·ª£c d·ªãch.");
      setTotalProgress(100);
      setIsTranslateAllDisabled(true);
      setIsTranslatingAll(false); // ‚úÖ D·ª´ng loading
      return;
    }

    try {
      const res = await axios.post("http://localhost:8000/api/translate", {
        chapters: chaptersToTranslate,
        key: apiKey || "",
      });

      // ‚úÖ B·∫£o v·ªá an to√†n tr∆∞·ªõc khi truy c·∫≠p
      const translatedChapters = res?.data?.chapters;
      if (Array.isArray(translatedChapters)) {
        // L∆∞u k·∫øt qu·∫£ d·ªãch cho t·∫•t c·∫£ c√°c ch∆∞∆°ng
        const newResults = {};
        const newErrors = {};
        let count = 0;

        // G·ª≠i k·∫øt qu·∫£ d·ªãch v·ªÅ cho component cha
        translatedChapters.forEach((chapter, idx) => {
          const realIndex = chaptersToTranslate[idx].originalIndex;
          newResults[realIndex] = chapter.translated || "";
          newErrors[realIndex] = null;
          onTranslationResult(realIndex, chapter.translated);
          count++;

          // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô t·ªïng sau khi m·ªói ch∆∞∆°ng ƒë∆∞·ª£c d·ªãch
          setTranslatedCount((prevCount) => {
            const newCount = prevCount + 1;
            const percent = Math.floor((newCount / chapters.length) * 100);
            setTotalProgress(percent);
            return newCount;
          });
        });

        setResults((prev) => ({ ...prev, ...newResults }));
        setTranslatedCount((prev) => prev + count);
        setErrorMessages((prev) => ({
          ...prev,
          ...newErrors,
          general: null, // ‚úÖ X√≥a l·ªói t·ªïng th·ªÉ n·∫øu c√≥
        }));
      }
    } catch (error) {
      console.error("L·ªói khi d·ªãch ch∆∞∆°ng:", error); // In l·ªói chi ti·∫øt ra console
      setErrorMessages((prev) => ({
        ...prev,
        general: "‚ùå L·ªói khi d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng.",
      }));
      alert("L·ªói khi d·ªãch t·∫•t c·∫£ c√°c ch∆∞∆°ng.");
      // ‚úÖ M·ªü l·∫°i n·∫øu b·ªã l·ªói
      setIsTranslateAllDisabled(false);
    } finally {
      console.timeEnd("‚è±Ô∏è Th·ªùi gian d·ªãch to√†n b·ªô");
      setIsTranslatingAll(false); // ‚úÖ D·ª´ng loading
    }
  };

  // H√†m d·ªãch t·ª´ng ch∆∞∆°ng
  const translate = async (index) => {
    const chapter = chapters[index];
    onSelectChapter?.(index); // üëà g·ªçi ƒë·ªÉ hi·ªÉn th·ªã ch∆∞∆°ng tr∆∞·ªõc khi d·ªãch

    console.log("üìå ch∆∞∆°ng hi·ªán t·∫°i:", chapter ? ("OK", chapter) : "MISSING");
    if (!apiKey && index >= 2) {
      alert(
        "üîí Ch·ªâ ƒë∆∞·ª£c d·ªãch 2 ch∆∞∆°ng ƒë·∫ßu mi·ªÖn ph√≠. H√£y nh·∫≠p API key ƒë·ªÉ ti·∫øp t·ª•c."
      );
      return;
    }
    // B·∫Øt ƒë·∫ßu ti·∫øn ƒë·ªô gi·∫£ l·∫≠p
    let fakeProgress = 0;
    const interval = setInterval(() => {
      fakeProgress += 5;
      if (fakeProgress < 95) {
        setProgress((prev) => ({ ...prev, [index]: fakeProgress }));
      } else {
        clearInterval(interval);
      }
    }, 200); // m·ªói 200ms tƒÉng 5%

    try {
      const res = await axios.post("http://localhost:8000/api/translate", {
        chapters: [chapter],
        key: apiKey || "",
      });

      const translated = res?.data?.chapters?.[0]?.translated || "";
      console.log("üìå d·ªãch hi·ªán t·∫°i:", translated || "MISSING");

      // C·∫≠p nh·∫≠t k·∫øt qu·∫£ d·ªãch
      setResults((prev) => ({
        ...prev,
        [index]: translated,
      }));
      onTranslationResult(index, translated);
      console.log(
        "üìå D·ªãch hi·ªán t·∫°i:",
        onTranslationResult ? "OK ‚úÖ" : "MISSING ‚ùå"
      );

      // Khi d·ªãch xong: full 100%
      setProgress((prev) => ({ ...prev, [index]: 100 }));
      setTranslatedCount((prev) => prev + 1);

      setErrorMessages((prev) => {
        const newErrors = { ...prev };
        delete newErrors[index];
        return newErrors;
      });

      // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô t·ªïng
      const percent = Math.floor(((index + 1) / chapters.length) * 100);
      setTotalProgress(percent);
    } catch (error) {
      console.error("L·ªói khi d·ªãch ch∆∞∆°ng:", error); // In l·ªói chi ti·∫øt ra console

      let errorMessage = "‚ùå L·ªói khi d·ªãch ch∆∞∆°ng: " + chapter.title;
      if (
        error.response &&
        error.response.data &&
        error.response.data.message
      ) {
        errorMessage += " - " + error.response.data.message; // Th√™m th√¥ng b√°o l·ªói t·ª´ backend
      }

      setErrorMessages((prev) => ({ ...prev, [index]: errorMessage })); // L∆∞u l·ªói

      alert(errorMessage);
    } finally {
      clearInterval(interval);
    }
  };

  return (
    <div className="chapter-list">
      <h3>üìö Danh s√°ch ch∆∞∆°ng ({chapters.length})</h3>
      <ul>
        {chapters.map((ch, idx) => {
          const isTranslated = !!results[idx];
          const disableTranslate =
            isTranslated || (!apiKey && translatedCount >= 2);

          return (
            <li key={idx}>
              <div className="chapter-item">
                <div className="chapter-header">
                  <strong>{ch.title}</strong>
                  {isTranslated && (
                    <span className="translated-label">‚úÖ ƒê√£ d·ªãch</span>
                  )}
                  <button
                    onClick={() => translate(idx)}
                    disabled={
                      isTranslated ||
                      (!apiKey && translatedCount >= 2) ||
                      isTranslatingAll
                    }
                    className="translate-button"
                  >
                    D·ªãch
                  </button>
                </div>

                {errorMessages[idx] && (
                  <div className="error-message">
                    <p>{errorMessages[idx]}</p>
                  </div>
                )}

                {progress[idx] !== undefined && !isTranslatingAll && (
                  <div className="chapter-progress-bar-container">
                    <div
                      className="chapter-progress-bar"
                      style={{ width: `${progress[idx]}%` }}
                    ></div>
                  </div>
                )}
              </div>
            </li>
          );
        })}
      </ul>

      <div className="translate-all-container">
        <button
          className="translate-all-button"
          onClick={translateAll}
          disabled={isTranslateAllDisabled || isTranslatingAll}
        >
          {isTranslatingAll ? (
            <span>
              <FontAwesomeIcon icon={faSpinner} spin /> ƒêang d·ªãch...
            </span>
          ) : (
            "D·ªãch to√†n b·ªô ch∆∞∆°ng"
          )}
        </button>

        {totalProgress !== 0 && (
          <div className="progress-bar-container">
            <div
              className="progress-bar"
              style={{ width: `${totalProgress}%` }}
            ></div>
          </div>
        )}
      </div>

      {errorMessages.general && (
        <div className="general-error">
          <p>{errorMessages.general}</p>
        </div>
      )}
    </div>
  );
};

export default ChapterList;
