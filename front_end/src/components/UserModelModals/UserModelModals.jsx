import React from 'react';
import './UserModelModals.css';

const UserModelModals = ({ keyData, onClose }) => {
  // H√†m helper ƒë·ªÉ l·∫•y m√†u tr·∫°ng th√°i
  const getStatusColor = (status) => {
    switch (status) {
      case "ACTIVE":
        return "status-active";
      case "COOLDOWN":
        return "status-cooldown";
      case "EXHAUSTED":
        return "status-exhausted";
      default:
        return "";
    }
  };

  // H√†m helper ƒë·ªÉ hi·ªÉn th·ªã text tr·∫°ng th√°i
  const getStatusText = (status) => {
    switch (status) {
      case "ACTIVE":
        return "üü¢ Ho·∫°t ƒë·ªông";
      case "COOLDOWN":
        return "üü° ƒêang ngh·ªâ";
      case "EXHAUSTED":
        return "üî¥ ƒê√£ h·∫øt quota";
      default:
        return "‚ö™ Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  return (
    <div className="model-modal-overlay" onClick={onClose}>
      <div className="model-modal-content" onClick={e => e.stopPropagation()}>
        <div className="model-modal-header">
          <h3>Chi ti·∫øt Key: {keyData.key?.length > 32 ? keyData.key.slice(0, 32) + '...' : keyData.key}</h3>
          <button className="close-button" onClick={onClose}>√ó</button>
        </div>

        <div className="model-modal-body">
          <div className="key-info">
            <p><strong>Label:</strong> {keyData.label || "Kh√¥ng c√≥ nh√£n"}</p>
            <p><strong>Tr·∫°ng th√°i t·ªïng th·ªÉ:</strong> {getStatusText(keyData.status)}</p>
            <p><strong>S·ªë l·∫ßn s·ª≠ d·ª•ng:</strong> {keyData.usageCount || 0}</p>
            <p><strong>L·∫ßn s·ª≠ d·ª•ng cu·ªëi:</strong> {
              keyData.lastUsedAt 
                ? new Date(keyData.lastUsedAt).toLocaleString()
                : "Ch∆∞a s·ª≠ d·ª•ng"
            }</p>
          </div>

          <div className="models-section">
            <h4>Chi ti·∫øt tr·∫°ng th√°i theo model:</h4>
            <div className="models-grid">
              {keyData.models?.map((model, index) => (
                <div 
                  key={`${keyData.id}-${model.id || index}`} 
                  className="model-status-card"
                >
                  <div className="model-header">
                    <h5>{model.label || "Model kh√¥ng x√°c ƒë·ªãnh"}</h5>
                    <span className={`status-badge ${getStatusColor(model.status)}`}>
                      {getStatusText(model.status)}
                    </span>
                  </div>
                  <div className="model-info">
                    <p><strong>Model ID:</strong> {model.value}</p>
                    {model.description && (
                      <p><strong>M√¥ t·∫£:</strong> {model.description}</p>
                    )}
                    <p><strong>Provider:</strong> {model.provider?.name || "Kh√¥ng x√°c ƒë·ªãnh"}</p>
                    
                    {/* Th√¥ng tin gi·ªõi h·∫°n */}
                    <div className="model-limits">
                      <h6>Gi·ªõi h·∫°n s·ª≠ d·ª•ng:</h6>
                      <p>RPM: {model.rpm ? `${model.rpm}/ph√∫t` : "Kh√¥ng gi·ªõi h·∫°n"}</p>
                      <p>TPM: {model.tpm ? `${model.tpm}/ph√∫t` : "Kh√¥ng gi·ªõi h·∫°n"}</p>
                      <p>RPD: {model.rpd ? `${model.rpd}/ng√†y` : "Kh√¥ng gi·ªõi h·∫°n"}</p>
                    </div>

                    {/* Th·ªëng k√™ s·ª≠ d·ª•ng */}
                    <div className="model-usage">
                      <h6>Th·ªëng k√™ s·ª≠ d·ª•ng:</h6>
                      <p>S·ªë l·∫ßn s·ª≠ d·ª•ng: {model.usageCount || 0}</p>
                      <p>Prompt tokens: {model.promptTokens || 0}</p>
                      <p>Completion tokens: {model.completionTokens || 0}</p>
                      <p>T·ªïng tokens: {model.totalTokens || 0}</p>
                      <p>L·∫ßn s·ª≠ d·ª•ng cu·ªëi: {
                        model.lastUsedAt 
                          ? new Date(model.lastUsedAt).toLocaleString()
                          : "Ch∆∞a s·ª≠ d·ª•ng"
                      }</p>
                    </div>

                    {/* Th√¥ng b√°o tr·∫°ng th√°i */}
                    {model.status === "EXHAUSTED" && (
                      <p className="exhausted-warning">
                        ‚ö†Ô∏è Key ƒë√£ h·∫øt quota cho model n√†y. 
                        Vui l√≤ng th√™m key m·ªõi ho·∫∑c s·ª≠ d·ª•ng model kh√°c.
                      </p>
                    )}
                    {model.status === "COOLDOWN" && (
                      <p className="cooldown-info">
                        ‚ÑπÔ∏è Key ƒëang trong th·ªùi gian ngh·ªâ. 
                        S·∫Ω t·ª± ƒë·ªông k√≠ch ho·∫°t l·∫°i sau m·ªôt th·ªùi gian.
                      </p>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserModelModals; 