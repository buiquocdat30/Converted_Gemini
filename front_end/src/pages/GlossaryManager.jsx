import React, { useEffect, useState, useContext } from "react";
import axios from "axios";
import "../pages/pageCSS/GlossaryManager.css";
import { API_URL } from '../config/config';
import { AuthContext } from "../context/ConverteContext";



function toCSV(data) {
  if (!data.length) return '';
  const header = Object.keys(data[0]).join(',');
  const rows = data.map(row => Object.values(row).map(v => '"' + (v ?? '').toString().replace(/"/g, '""') + '"').join(','));
  return [header, ...rows].join('\n');
}

// Nh·∫≠n storyId qua props ho·∫∑c router
const GlossaryManager = ({ storyId: propStoryId }) => {
  // N·∫øu d√πng react-router, c√≥ th·ªÉ l·∫•y storyId t·ª´ useParams
  // const { storyId } = useParams();
  const [storyId, setStoryId] = useState(propStoryId || "");
  const [glossary, setGlossary] = useState([]);
  const [keyword, setKeyword] = useState("");
  const [loading, setLoading] = useState(false);
  const [editingId, setEditingId] = useState(null);
  const [editData, setEditData] = useState({});
  const [log, setLog] = useState([]);
  const [typeFilter, setTypeFilter] = useState("");
  const { stories, fetchStories } = useContext(AuthContext);

  // L·∫•y token auth t·ª´ localStorage
  const token = localStorage.getItem("auth-token");

  // Log helper
  const addLog = (msg, data) => {
    setLog((prev) => [
      { time: new Date().toLocaleTimeString(), msg, data },
      ...prev.slice(0, 30)
    ]);
    console.log("[GlossaryManager]", msg, data);
  };

  // L·∫•y danh s√°ch truy·ªán c·ªßa user khi mount
  useEffect(() => {
    fetchStories();
  }, []);

  // L·∫•y glossary khi storyId ƒë·ªïi
  useEffect(() => {
    if (!storyId) {
      setGlossary([]); // N·∫øu storyId r·ªóng th√¨ reset glossary v·ªÅ m·∫£ng r·ªóng
      return;
    }
    fetchGlossary();
  }, [storyId]);

  const fetchGlossary = async () => {
    setLoading(true);
    try {
      addLog("G·ªçi API l·∫•y glossary", { storyId });
      const res = await axios.get(`${API_URL}/user/glossary/${storyId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      console.log("ƒë√¢y l√† khi h√†m g·ªçi glossary tr·∫£ v·ªÅ kq:",res.data.data);
      // N·∫øu kh√¥ng ph·∫£i m·∫£ng th√¨ fallback v·ªÅ []
      setGlossary(Array.isArray(res.data.data) ? res.data.data : []);
      addLog("Glossary nh·∫≠n ƒë∆∞·ª£c", res.data.data);
    } catch (err) {
      addLog("L·ªói khi l·∫•y glossary", err);
      setGlossary([]); // N·∫øu l·ªói c≈©ng set v·ªÅ m·∫£ng r·ªóng
      alert("L·ªói khi l·∫•y glossary: " + err.message);
    }
    setLoading(false);
  };

  const searchGlossary = async () => {
    if (!keyword) return fetchGlossary();
    setLoading(true);
    try {
      addLog("G·ªçi API t√¨m ki·∫øm glossary", { storyId, keyword });
      const res = await axios.get(`${API_URL}/user/glossary/${storyId}/search?keyword=${encodeURIComponent(keyword)}`,
        { headers: { Authorization: `Bearer ${token}` } });
      setGlossary(Array.isArray(res.data.data) ? res.data.data : []);
      addLog("K·∫øt qu·∫£ t√¨m ki·∫øm", res.data.data);
    } catch (err) {
      addLog("L·ªói khi t√¨m glossary", err);
      setGlossary([]); // N·∫øu l·ªói c≈©ng set v·ªÅ m·∫£ng r·ªóng
      alert("L·ªói khi t√¨m glossary: " + err.message);
    }
    setLoading(false);
  };

  const startEdit = (item) => {
    setEditingId(item.id);
    setEditData({ ...item });
    addLog("B·∫Øt ƒë·∫ßu s·ª≠a", item);
  };

  const cancelEdit = () => {
    setEditingId(null);
    setEditData({});
    addLog("H·ªßy s·ª≠a", null);
  };

  const saveEdit = async () => {
    setLoading(true);
    try {
      addLog("G·ªçi API c·∫≠p nh·∫≠t glossary", editData);
      await axios.put(`${API_URL}/user/glossary/items/${editingId}`, editData, {
        headers: { Authorization: `Bearer ${token}` },
      });
      addLog("C·∫≠p nh·∫≠t th√†nh c√¥ng", editData);
      setEditingId(null);
      setEditData({});
      fetchGlossary();
    } catch (err) {
      addLog("L·ªói khi c·∫≠p nh·∫≠t glossary", err);
      alert("L·ªói khi c·∫≠p nh·∫≠t glossary: " + err.message);
    }
    setLoading(false);
  };

  const deleteItem = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m·ª•c n√†y?")) return;
    setLoading(true);
    try {
      addLog("G·ªçi API x√≥a glossary", { id });
      await axios.delete(`${API_URL}/user/glossary/items/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      addLog("X√≥a th√†nh c√¥ng", { id });
      fetchGlossary();
    } catch (err) {
      addLog("L·ªói khi x√≥a glossary", err);
      alert("L·ªói khi x√≥a glossary: " + err.message);
    }
    setLoading(false);
  };

  // L·ªçc theo lo·∫°i
  const typeList = Array.from(new Set((glossary || []).map(g => g.type).filter(Boolean)));
  const filteredGlossary = (glossary || []).filter(item =>
    (!typeFilter || item.type === typeFilter)
  );

  // Xu·∫•t CSV
  const exportCSV = () => {
    const csv = toCSV(filteredGlossary);
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `glossary_${storyId}.csv`;
    a.click();
    URL.revokeObjectURL(url);
    addLog("ƒê√£ xu·∫•t file CSV", null);
  };

  return (
    <div className="glossary-wrapper">
      <h2 className="glossary-title">üìö Qu·∫£n l√Ω Glossary cho truy·ªán</h2>
      <div className="glossary-toolbar">
        {/* Dropdown ch·ªçn truy·ªán thay cho input nh·∫≠p storyId */}
        <label className="glossary-story-label">
          Ch·ªçn truy·ªán:
          <select
            value={storyId}
            onChange={e => setStoryId(e.target.value)}
            className="glossary-story-select"
          >
            <option value="">-- Ch·ªçn truy·ªán --</option>
            {stories.map(story => (
              <option key={story.id} value={story.id}>
                {story.name} {story.author ? `- ${story.author}` : ""}
              </option>
            ))}
          </select>
        </label>
        {/* ·∫®n input nh·∫≠p storyId th·ªß c√¥ng */}
        {/* <input
          value={storyId}
          onChange={e => setStoryId(e.target.value)}
          style={{ marginLeft: 8, width: 220, border: `1.5px solid ${BORDER}`, borderRadius: 6, padding: 6 }}
          placeholder="Nh·∫≠p storyId..."
        /> */}
        <input
          value={keyword}
          onChange={e => setKeyword(e.target.value)}
          placeholder="T√¨m ki·∫øm t·ª´, t√™n, lo·∫°i..."
          className="glossary-search-input"
        />
        <button onClick={searchGlossary} disabled={loading}
          className="glossary-btn glossary-btn-search">
          T√¨m ki·∫øm
        </button>
        <button onClick={fetchGlossary} disabled={loading}
          className="glossary-btn glossary-btn-refresh">
          L√†m m·ªõi
        </button>
        <select value={typeFilter} onChange={e => setTypeFilter(e.target.value)}
          className="glossary-type-select">
          <option value="">-- L·ªçc theo lo·∫°i --</option>
          {typeList.map(type => <option key={type} value={type}>{type}</option>)}
        </select>
        <button onClick={exportCSV} className="glossary-btn glossary-btn-export">
          ‚¨áÔ∏è Xu·∫•t CSV
        </button>
      </div>
      {/* N·∫øu ch∆∞a ch·ªçn truy·ªán th√¨ kh√¥ng hi·ªÉn th·ªã b·∫£ng glossary */}
      {storyId ? (
        <>
          <div className="glossary-count">
            <span>T·ªïng s·ªë m·ª•c:</span> {filteredGlossary.length}
          </div>
          <div className="glossary-table-container">
            <table className="glossary-table">
              <thead>
                <tr>
                  <th>T√™n g·ªëc</th>
                  <th>T√™n d·ªãch</th>
                  <th>Lo·∫°i</th>
                  <th>Ng√¥n ng·ªØ</th>
                  <th>S·ªë l·∫ßn</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {filteredGlossary.map(item => (
                  editingId === item.id ? (
                    <tr key={item.id} className="glossary-row-editing">
                      <td><input value={editData.original} onChange={e => setEditData(d => ({ ...d, original: e.target.value }))} className="glossary-input" /></td>
                      <td><input value={editData.translated} onChange={e => setEditData(d => ({ ...d, translated: e.target.value }))} className="glossary-input" /></td>
                      <td><input value={editData.type} onChange={e => setEditData(d => ({ ...d, type: e.target.value }))} className="glossary-input" /></td>
                      <td><input value={editData.lang} onChange={e => setEditData(d => ({ ...d, lang: e.target.value }))} className="glossary-input" /></td>
                      <td>{item.frequency}</td>
                      <td>
                        <button onClick={saveEdit} disabled={loading} className="glossary-btn glossary-btn-save">L∆∞u</button>
                        <button onClick={cancelEdit} className="glossary-btn glossary-btn-cancel">H·ªßy</button>
                      </td>
                    </tr>
                  ) : (
                    <tr key={item.id} className="glossary-row">
                      <td>{item.original}</td>
                      <td>{item.translated}</td>
                      <td>{item.type}</td>
                      <td>{item.lang}</td>
                      <td>{item.frequency}</td>
                      <td>
                        <button onClick={() => startEdit(item)} disabled={loading} className="glossary-btn glossary-btn-edit">S·ª≠a</button>
                        <button onClick={() => deleteItem(item.id)} className="glossary-btn glossary-btn-delete" disabled={loading}>X√≥a</button>
                      </td>
                    </tr>
                  )
                ))}
                {filteredGlossary.length === 0 && (
                  <tr><td colSpan={6} className="glossary-empty">Kh√¥ng c√≥ d·ªØ li·ªáu</td></tr>
                )}
              </tbody>
            </table>
          </div>
        </>
      ) : (
        <div className="glossary-empty-select">Vui l√≤ng ch·ªçn truy·ªán ƒë·ªÉ xem v√† qu·∫£n l√Ω glossary.</div>
      )}
      <div className="glossary-log-section">
        <h4 className="glossary-log-title">üìù Log thao t√°c (debug):</h4>
        <div className="glossary-log-list">
          {log.map((l, i) => (
            <div key={i} className="glossary-log-item">
              <b>[{l.time}]</b> {l.msg}
              <pre className="glossary-log-data">{l.data ? JSON.stringify(l.data, null, 2) : ''}</pre>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default GlossaryManager;
