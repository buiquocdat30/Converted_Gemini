//h√†m d·ªãch to√†n b·ªô ch∆∞∆°ng
import axios from "axios";
import { toast } from "react-hot-toast";
import { API_URL } from '../config/config';

// S·ªë ch∆∞∆°ng d·ªãch song song t·ªëi ƒëa m·ªói batch
// const MAX_PARALLEL = 3; // Kh√¥ng d√πng n·ªØa, d·ªãch tu·∫ßn t·ª±

// L∆∞u batch ƒë√£ b·ªã hu·ª∑
let cancelledBatchIndexes = new Set();

export const translateAllChapters = async ({
  chaptersToTranslate,
  chapters,
  apiKey,
  model,
  storyId,
  setResults,
  setTranslatedCount,
  setErrorMessages,
  onTranslationResult,
  isStopped,
  onChapterStartProgress,
  onChapterStopProgress,
  onUpdateTotalProgress,
  getChapterStatus,
  onBatchCancel,
  userData, // Th√™m userData parameter
}) => {
  const totalChapters = chaptersToTranslate.length;
  let translatedCount = 0;

  console.log(`üìñ [ALL-QUEUE] B·∫Øt ƒë·∫ßu d·ªãch ${totalChapters} ch∆∞∆°ng qua Queue`);

  try {
    // G·ª≠i request ƒë·ªÉ th√™m jobs v√†o queue
    const modelToSend = model; // G·ª≠i to√†n b·ªô model object
    console.log('[ALL-QUEUE] G·ª≠i model object l√™n backend:', modelToSend);
    
    const requestData = {
      chapters: chaptersToTranslate.map(ch => ({
        title: ch.chapterName || `Ch∆∞∆°ng ${ch.originalIndex + 1}`,
        content: ch.rawText || ch.content,
        chapterNumber: ch.chapterNumber || ch.originalIndex + 1
      })),
      userKeys: Array.isArray(apiKey) ? apiKey : [apiKey],
      model: modelToSend, // G·ª≠i to√†n b·ªô model object
      storyId: storyId,
      userId: userData.id, // Th√™m userId cho room
      isBatchTranslation: true // Flag ƒë·ªÉ bi·∫øt ƒë√¢y l√† d·ªãch batch
    };

    console.log(`[ALL-QUEUE] üì§ G·ª≠i ${requestData.chapters.length} ch∆∞∆°ng v√†o Queue`);

    const token = localStorage.getItem("auth-token");
    const res = await axios.post(API_URL + "/translate/queue", requestData, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log(`[ALL-QUEUE] üì• Nh·∫≠n response t·ª´ Queue API:`, {
      success: res.data.success,
      jobCount: res.data.jobCount,
      message: res.data.message
    });

    if (res.data.success) {
      console.log(`[ALL-QUEUE] ‚úÖ ƒê√£ th√™m ${res.data.jobCount} jobs v√†o queue`);
      console.log(`[ALL-QUEUE] üéß ƒêang ch·ªù k·∫øt qu·∫£ qua Socket...`);
      
      // Jobs ƒë√£ ƒë∆∞·ª£c th√™m v√†o queue, Worker s·∫Ω x·ª≠ l√Ω
      // FE s·∫Ω nh·∫≠n k·∫øt qu·∫£ qua Socket.io
      return res.data.jobCount;
    } else {
      throw new Error(res.data.message || 'L·ªói khi th√™m jobs v√†o queue');
    }

  } catch (error) {
    console.error(`[ALL-QUEUE] ‚ùå L·ªói d·ªãch all ch∆∞∆°ng qua Queue:`, error);
    setErrorMessages((prev) => ({ ...prev, general: `‚ùå L·ªói khi d·ªãch t·∫•t c·∫£ ch∆∞∆°ng: ${error.message}` }));
    return 0;
  }
};
