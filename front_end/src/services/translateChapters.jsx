//h√†m d·ªãch to√†n b·ªô ch∆∞∆°ng
import axios from "axios";

// S·ªë ch∆∞∆°ng d·ªãch song song t·ªëi ƒëa m·ªói batch
// const MAX_PARALLEL = 3; // Kh√¥ng d√πng n·ªØa, d·ªãch tu·∫ßn t·ª±

// L∆∞u batch ƒë√£ b·ªã hu·ª∑
let cancelledBatchIndexes = new Set();

export const translateAllChapters = async ({
  chaptersToTranslate,
  chapters,
  apiKey,
  model,
  storyId,
  setResults,
  setTranslatedCount,
  setErrorMessages,
  onTranslationResult,
  isStopped,
  onChapterStartProgress,
  onChapterStopProgress,
  onUpdateTotalProgress,
  getChapterStatus,
  onBatchCancel, // callback khi batch b·ªã cancel
}) => {
  const totalChapters = chaptersToTranslate.length;
  let translatedCount = 0;
  let stopped = false;

  // T·∫°o queue c√°c ch∆∞∆°ng c·∫ßn d·ªãch
  const queue = [...chaptersToTranslate];

  // H√†m d·ªãch 1 ch∆∞∆°ng (gi·ªØ nguy√™n logic c≈©, th√™m batchIndex)
  const translateOneChapter = async (chapter, i, batchIndex) => {
    const originalIndex = chapter.originalIndex;
    // Set tr·∫°ng th√°i PENDING tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu d·ªãch
    if (typeof window.setChapterStatusGlobal === 'function') {
      window.setChapterStatusGlobal(originalIndex, 'PENDING');
    }
    if (typeof onChapterStartProgress === 'function') {
      onChapterStartProgress(originalIndex);
    }
    try {
      // Set tr·∫°ng th√°i PROCESSING ngay tr∆∞·ªõc khi g·ª≠i request
      if (typeof window.setChapterStatusGlobal === 'function') {
        window.setChapterStatusGlobal(originalIndex, 'PROCESSING');
      }
      // N·∫øu batch ƒë√£ b·ªã cancel, b·ªè qua lu√¥n
      if (cancelledBatchIndexes.has(batchIndex)) {
        if (typeof onChapterStopProgress === 'function') {
          onChapterStopProgress(originalIndex);
        }
        return { success: false };
      }
      console.log(`üìñ [Song song] ƒêang d·ªãch ch∆∞∆°ng ${i + 1}/${totalChapters}`);
      const modelToSend = (model && typeof model === 'object' && model.value) ? model.value : model;
      console.log('[translateAllChapters] G·ª≠i model l√™n backend:', modelToSend);
      const requestData = {
        chapters: [{
          title: chapter.chapterName || `Ch∆∞∆°ng ${originalIndex + 1}`,
          content: chapter.rawText || chapter.content,
          chapterNumber: chapter.chapterNumber || originalIndex + 1
        }],
        userKeys: Array.isArray(apiKey) ? apiKey : [apiKey],
        model: modelToSend,
        storyId: storyId,
      };
      const token = localStorage.getItem("auth-token");
      const res = await axios.post("http://localhost:8000/translate", requestData, {
        headers: { Authorization: `Bearer ${token}` }
      });
      // N·∫øu batch ƒë√£ b·ªã cancel sau khi g·ª≠i request, b·ªè qua lu√¥n
      if (cancelledBatchIndexes.has(batchIndex)) {
        if (typeof onChapterStopProgress === 'function') {
          onChapterStopProgress(originalIndex);
        }
        return { success: false };
      }
      const chapterData = res?.data?.chapters?.[0];
      const translated = chapterData?.translatedContent || "";
      const translatedTitle = chapterData?.translatedTitle || "";
      const duration = chapterData?.timeTranslation || 0;
      if (getChapterStatus) {
        try {
          const status = await getChapterStatus(originalIndex);
          if (status === "CANCELLED") {
            console.warn(`[LOG] Ch∆∞∆°ng ${originalIndex} ƒë√£ CANCELLED (realtime), b·ªè qua c·∫≠p nh·∫≠t k·∫øt qu·∫£.`);
            if (typeof onChapterStopProgress === 'function') {
              onChapterStopProgress(originalIndex);
            }
            return { success: false };
          }
        } catch (error) {
          console.warn(`[LOG] L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ch∆∞∆°ng ${originalIndex}:`, error);
        }
      }
      setResults((prev) => ({
        ...prev,
        [originalIndex]: {
          translated,
          translatedTitle,
          chapterName: translatedTitle || chapter.chapterName,
          duration: duration
        },
      }));
      onTranslationResult(originalIndex, translated, translatedTitle, duration);
      
      // Set tr·∫°ng th√°i COMPLETE khi d·ªãch th√†nh c√¥ng
      if (typeof window.setChapterStatusGlobal === 'function') {
        window.setChapterStatusGlobal(originalIndex, 'COMPLETE');
      }
      if (typeof onChapterStopProgress === 'function') {
        onChapterStopProgress(originalIndex);
      }
      
      setTranslatedCount((prev) => prev + 1);
      if (typeof onUpdateTotalProgress === 'function') {
        const percent = Math.floor(((translatedCount + 1) / totalChapters) * 100);
        onUpdateTotalProgress(percent);
      }
      return { success: true };
    } catch (error) {
      if (typeof onChapterStopProgress === 'function') {
        onChapterStopProgress(originalIndex);
      }
      // Set tr·∫°ng th√°i FAILED khi c√≥ l·ªói
      if (typeof window.setChapterStatusGlobal === 'function') {
        window.setChapterStatusGlobal(originalIndex, 'FAILED');
      }
      setErrorMessages((prev) => ({ ...prev, [originalIndex]: `‚ùå L·ªói khi d·ªãch ch∆∞∆°ng ${originalIndex + 1}` }));
      return { success: false };
    }
  };

  // D·ªãch tu·∫ßn t·ª± t·ª´ng ch∆∞∆°ng, m·ªói request c√°ch nhau 60/rpm gi√¢y
  const rpm = (model && typeof model === 'object' && model.rpm) ? model.rpm : 1;
  const delayMs = Math.ceil(60000 / rpm);
  let chapterIndex = 0;
  while (queue.length > 0 && !stopped) {
    if (isStopped) {
      console.log('üõë [Tu·∫ßn t·ª±] D·ª´ng d·ªãch theo y√™u c·∫ßu ng∆∞·ªùi d√πng');
      stopped = true;
      break;
    }
    const chapter = queue.shift();
    await translateOneChapter(chapter, chapterIndex, chapterIndex);
    chapterIndex++;
    if (queue.length > 0 && !stopped) {
      console.log(`[DELAY] Ch·ªù ${delayMs / 1000}s tr∆∞·ªõc khi d·ªãch ch∆∞∆°ng ti·∫øp theo (rpm=${rpm})`);
      await new Promise(resolve => setTimeout(resolve, delayMs));
    }
  }

  // ƒê·∫£m b·∫£o progress t·ªïng l√™n 100% khi xong
  if (typeof onUpdateTotalProgress === 'function') {
    onUpdateTotalProgress(100);
  }
  cancelledBatchIndexes.clear(); // reset cho l·∫ßn d·ªãch sau
  return translatedCount;
};
