import { useState, useEffect, useRef } from 'react';

// L∆∞u tr·ªØ l·ªãch s·ª≠ th·ªùi gian d·ªãch v√† s·ªë t·ª´ trong localStorage
const STORAGE_KEY = 'translation_history_v2';
const MAX_HISTORY = 6;
const DEFAULT_TIME_PER_WORD = 0.05; // 50ms/t·ª´ (th·ª±c t·∫ø h∆°n)

const useTranslationProgress = (defaultTime = 15) => {
  const [progress, setProgress] = useState(0);
  const [isTranslating, setIsTranslating] = useState(false);
  const [averageTimePerWord, setAverageTimePerWord] = useState(DEFAULT_TIME_PER_WORD);
  const startTime = useRef(null);
  const intervalRef = useRef(null);
  const [currentWordCount, setCurrentWordCount] = useState(1); // tr√°nh chia 0

  // L·∫•y l·ªãch s·ª≠ t·ª´ localStorage khi kh·ªüi t·∫°o
  useEffect(() => {
    try {
      const savedHistory = localStorage.getItem(STORAGE_KEY);
      if (savedHistory) {
        const history = JSON.parse(savedHistory); // M·∫£ng c√°c object: { duration, wordCount }

        if (Array.isArray(history) && history.length > 0) {
          // L·ªçc c√°c b·∫£n ghi h·ª£p l·ªá: duration > 0, duration < 60s/t·ª´, wordCount > 0
          const validHistory = history.filter(h => {
            const perWord = h.duration / Math.max(h.wordCount || 1, 1);
            return (
              h.duration > 0 &&
              h.wordCount > 0 &&
              perWord > 0 &&
              perWord < 60 // lo·∫°i b·ªè b·∫£n ghi qu√° b·∫•t th∆∞·ªùng
            );
          });

          if (validHistory.length > 0) {
            const lastN = validHistory.slice(-MAX_HISTORY);
            const totalDuration = lastN.reduce(
              (sum, h) => sum + (h.duration || 0),
              0
            );
            const totalWords = lastN.reduce(
              (sum, h) => sum + Math.max(h.wordCount || 0, 1),
              0
            );
            const avg = totalDuration / totalWords;
            setAverageTimePerWord(avg);
          } else {
            setAverageTimePerWord(DEFAULT_TIME_PER_WORD);
          }
        } else {
          setAverageTimePerWord(DEFAULT_TIME_PER_WORD);
        }
      } else {
        setAverageTimePerWord(DEFAULT_TIME_PER_WORD);
      }
    }catch (error) {
      console.error('L·ªói khi ƒë·ªçc l·ªãch s·ª≠ d·ªãch:', error);
      setAverageTimePerWord(DEFAULT_TIME_PER_WORD);
    }
  }, []);

  // H√†m c·∫≠p nh·∫≠t l·ªãch s·ª≠ d·ªãch
  const updateTranslationHistory = (duration, wordCount) => {
    try {
      // L·∫•y l·ªãch s·ª≠ hi·ªán t·∫°i
      const savedHistory = localStorage.getItem(STORAGE_KEY);
      let history = savedHistory ? JSON.parse(savedHistory) : [];

      // Ch·ªâ l∆∞u b·∫£n ghi h·ª£p l·ªá
      if (
        duration > 0 &&
        wordCount > 0 &&
        duration / wordCount > 0 &&
        duration / wordCount < 60
      ) {
        history.push({ duration, wordCount });
      }

      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng l·ªãch s·ª≠
      if (history.length > MAX_HISTORY) {
        history = history.slice(-MAX_HISTORY);
      }

      // L∆∞u l·∫°i v√†o localStorage
      localStorage.setItem(STORAGE_KEY, JSON.stringify(history));

      // T√≠nh l·∫°i trung b√¨nh th·ªùi gian d·ªãch 1 t·ª´
      const validHistory = history.filter(h => {
        const perWord = h.duration / Math.max(h.wordCount || 1, 1);
        return (
          h.duration > 0 &&
          h.wordCount > 0 &&
          perWord > 0 &&
          perWord < 60
        );
      });
      if (validHistory.length > 0) {
        const lastN = validHistory.slice(-MAX_HISTORY);
        const totalDuration = lastN.reduce(
          (sum, h) => sum + (h.duration || 0),
          0
        );
        const totalWords = lastN.reduce(
          (sum, h) => sum + Math.max(h.wordCount || 0, 1),
          0
        );
        const avg = totalDuration / totalWords;
        console.log('üìä L·ªãch s·ª≠ d·ªãch:', validHistory);
        console.log('‚è±Ô∏è Trung b√¨nh th·ªùi gian d·ªãch 1 t·ª´:', avg.toFixed(3), 'gi√¢y');
        
        // ƒê·∫£m b·∫£o avg kh√¥ng qu√° nh·ªè ho·∫∑c qu√° l·ªõn
        const clampedAvg = Math.max(Math.min(avg, 1.0), 0.01); // Gi·ªõi h·∫°n t·ª´ 10ms ƒë·∫øn 1s/t·ª´
        setAverageTimePerWord(clampedAvg);
        console.log('üîß Gi√° tr·ªã cu·ªëi c√πng:', clampedAvg.toFixed(3), 'gi√¢y/t·ª´');
      } else {
        setAverageTimePerWord(DEFAULT_TIME_PER_WORD);
      }
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t l·ªãch s·ª≠ d·ªãch:', error);
      setAverageTimePerWord(DEFAULT_TIME_PER_WORD);
    }
  };

  // H√†m kh·ªüi ƒë·ªông ti·∫øn ƒë·ªô (truy·ªÅn v√†o s·ªë t·ª´ ch∆∞∆°ng hi·ªán t·∫°i)
  const startProgress = (wordCount = 1) => {
    setIsTranslating(true);
    setProgress(0);
    setCurrentWordCount(wordCount);
    startTime.current = Date.now();

    // T√≠nh th·ªùi gian d·ª± ki·∫øn
    const expectedDuration = wordCount * averageTimePerWord || defaultTime;

    // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô m·ªói 100ms
    intervalRef.current = setInterval(() => {
      const elapsedTime = (Date.now() - startTime.current) / 1000;
      const newProgress = Math.min((elapsedTime / expectedDuration) * 100, 99);
      setProgress(newProgress);
    }, 100);
  };

  const stopProgress = () => {
    setIsTranslating(false);
    setProgress(100);
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }
    // T√≠nh th·ªùi gian th·ª±c t·∫ø v√† c·∫≠p nh·∫≠t l·ªãch s·ª≠
    if (startTime.current) {
      const duration = (Date.now() - startTime.current) / 1000;
      updateTranslationHistory(duration, currentWordCount);
    }
  };

  // Cleanup khi component unmount
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);

  return {
    progress,
    isTranslating,
    startProgress, // truy·ªÅn v√†o s·ªë t·ª´ khi b·∫Øt ƒë·∫ßu d·ªãch: startProgress(wordCount)
    stopProgress,
    averageTimePerWord, // Tr·∫£ v·ªÅ number thay v√¨ string
  };
};

export default useTranslationProgress;
